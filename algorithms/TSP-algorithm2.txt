Lin-Kernighan algorithmInput: A graph G with a cost function c, and an initial tour T.Output: An improved tour T'.1. Initialize:   a. Set best gain g* := 0   b. Set best set of edges F := ∅   c. Push all vertices u in V(G) with (u, 0, 0) onto the stack2. Main Loop:   Repeat until no improvement is found:   a. Set current tour gain g := 0   b. While the stack is not empty:      i. Pop (u, i, g) from the stack      ii. If i is even:         For each v in V(G) such that (v_i, u) is in T:            Push (u, i + 1, g + c(v_i, u)) onto the stack      iii. If i is odd:         If g > c(v_i, v_0):            Report a closed alternating trail with gain g - c(v_i, v_0)         For each u in V(G) such that g > c(v_i, u):            Push (u, i + 1, g - c(v_i, u)) onto the stack      iv. If g* > 0:         Update T := T Δ F         Clear the stack      v. If i > backtracking depth:         Pop all elements with depth > backtracking depth from the stack   c. If no improvement found, stop3. Return the improved tour T'