\documentclass{article}\usepackage{amsmath}\usepackage{algorithm}\usepackage{algpseudocode}\begin{document}\section*{A Novel Algorithm for CVRP}\subsection*{Algorithm Overview}The algorithm employs a two-stage process:\begin{enumerate}    \item \textbf{Initial Solution Construction}: It starts with generating an initial feasible solution.    \item \textbf{Solution Improvement}: It then uses ALNS to improve this solution iteratively.\end{enumerate}\subsection*{Notation}\begin{itemize}    \item \( S \): Set of points to visit.    \item \( P \): Set of arcs representing points \((x_i, y_i)\) in \( S \).    \item \( D_{ij} \): Distance matrix.    \item \( R \): Set of routes.    \item \( k \): Number of vehicles/routes.    \item \( d_i \): Demand at node \( i \).    \item \( C \): Vehicle capacity.    \item \( p_{ijk} \): Binary variable indicating if vehicle \( k \) moves from \( i \) to \( j \).\end{itemize}\subsection*{Initial Solution Construction}\begin{enumerate}    \item \textbf{Start from a random point \( i \)} and set \( p_{ijk} = 1 \) for the arc with the minimum distance \( D_{ij} \).    \item \textbf{Update the capacity and set of unvisited points}.    \item \textbf{Repeat} until all points are included in routes ensuring capacity constraints are met.\end{enumerate}\subsection*{Solution Improvement using ALNS}\begin{enumerate}    \item \textbf{Select a subset of points} from routes to relocate.    \item \textbf{Determine the second closest point} for each selected point.    \item \textbf{Relocate the points}, ensuring capacity constraints are not violated.    \item \textbf{Update the routes} iteratively to avoid cycling using a Tabu list.\end{enumerate}\subsection*{Pseudo Code}\begin{algorithm}\caption{CVRP\_Heuristic}\begin{algorithmic}[1]\Require Set of points \( S \), distance matrix \( D_{ij} \), vehicle capacity \( C \), number of vehicles \( k \)\Ensure Set of routes \( R \) minimizing the total distance\State Initialize: Set \( S \), \( P \), \( D_{ij} \), \( d_i \), \( C \), \( k \)\State Generate initial solution:    \begin{enumerate}        \item Start from a random point \( i \)        \item Set \( p_{ijk} = 1 \) for arc \((i, j)\) with minimum \( D_{ij} \)        \item Update capacity and unvisited points        \item Repeat until all points are visited ensuring capacity constraints    \end{enumerate}\State Improve solution using ALNS:    \begin{enumerate}        \item Select subset of points from routes by roulette wheel selection        \item Determine second closest points using \( D_{ij} \) matrix        \item Relocate points ensuring capacity constraints        \item Repeat relocation for all selected points        \item Update Tabu list to avoid cycling    \end{enumerate}\State Return the improved set of routes \( R \)\end{algorithmic}\end{algorithm}\subsection*{Related Subroutines}\begin{algorithm}\caption{RelocatePoints}\begin{algorithmic}[1]\Require Set of routes \( R \), distance matrix \( D_{ij} \), capacity \( C \)\Ensure Updated set of routes \( R \)\State Select points from each route by roulette wheel selection\For{each selected point}    \State Find the second closest point using \( D_{ij} \)    \If{not in the same route}        \State Relocate        \State Update capacity and check constraints    \EndIf\EndFor\State Return updated routes\end{algorithmic}\end{algorithm}\begin{algorithm}\caption{UpdateTabuList}\begin{algorithmic}[1]\Require Current solution \( F \), best solution \( F_{best} \), Tabu list\Ensure Updated Tabu list, best solution \( F_{best} \)\If{$F$ is better than $F_{best}$ and feasible}    \State Update \( F_{best} = F \)\EndIf\State Update Tabu list to include recent moves\State Return updated Tabu list, best solution \( F_{best} \)\end{algorithmic}\end{algorithm}This algorithm provides a robust approach to solving CVRP by combining initial solution construction with iterative improvement using adaptive neighborhood search and tabu mechanisms to avoid local optima and ensure convergence to a high-quality solution.\end{document}