\documentclass{article}\usepackage{amsmath}\begin{document}\section*{Summary of the Proposed Enhancement of Clarke-Wright Savings Algorithm}The proposed enhancement to the Clarke-Wright Savings Algorithm (CW) seeks to find high-quality feasible solutions to the Capacitated Vehicle Routing Problem (CVRP) by iteratively applying a two-phase probabilistic procedure and route post-improvement procedures. This enhanced approach is described through the following steps:\begin{enumerate}    \item \textbf{Initialization}:    \begin{itemize}        \item Compute the cost matrix.        \item Compute the cost savings matrix.        \item Sort the cost savings in descending order.        \item Generate initial routes and solutions based on cost savings.    \end{itemize}    \item \textbf{Iterative Improvement}:    \begin{itemize}        \item Apply the two-phase probabilistic procedure to re-rank the cost savings.        \item Generate new routes and solutions based on the new cost savings.        \item Update the best solution if the new solution is feasible and better.    \end{itemize}    \item \textbf{Route Post-Improvement}:    \begin{itemize}        \item Apply intra-route and inter-route local search procedures to improve the routes.    \end{itemize}\end{enumerate}\section*{Pseudo Code of the Proposed CW (Figure 2)}\begin{verbatim}costmatrix = DoCostMatrix()costsaving = DoCostSaving(costmatrix)Call DoSort(costsaving)costlink = DoCostLink(costsaving)route = DoRoute(costlink)solution = DoSolution(route)For iteration = 1 To 1000    new_costsaving = TwoPhaseProbabilistic(costsaving, 0, 20)    costlink = DoCostLink(new_costsaving)    new_route = DoRoute(costlink)    new_solution = DoSolution(new_route)    If new_solution < solution Then        If IsFeasible(new_solution) = True Then            route = new_route            solution = new_solution            costsaving = new_costsaving        End If    End IfNext iterationimproveRoute = RoutePostImprovement(route)solution = DoSolution(improveRoute)\end{verbatim}\section*{Subroutines}\subsection*{DoCostMatrix}Generates the cost matrix for all customer pairs.\subsection*{DoCostSaving}Calculates cost savings for every pair of customers.\subsection*{DoSort}Sorts the cost savings list in descending order.\subsection*{DoCostLink}Generates the cost link from the sorted cost savings list.\subsection*{DoRoute}Constructs initial routes based on the cost links.\subsection*{DoSolution}Calculates the total cost of the routes.\subsection*{TwoPhaseProbabilistic}A probabilistic procedure to escape the greedy nature of CW.\begin{verbatim}For no = 1 To UpperBound(costsaving)    tournamentsize = RandomInteger(0 To 20)    j = 0    For i = 1 To UpperBound(costsaving)        If costsaving(i).deleted = False Then            j = j + 1            nosaving(j) = i            If j = tournamentsize Then Exit For i        End If    Next i    sumsaving = 0    For i = 1 To tournamentsize        sumsaving = sumsaving + costsaving(nosaving(i)).value    Next i    For i = 1 To tournamentsize        If i = 1 Then            probability(i) = costsaving(nosaving(i)).value / sumsaving        Else            probability(i) = probability(i â€“ 1) + (costsaving(nosaving(i)).value / sumsaving)        End If    Next i    prob = RandomDecimal(0 To 1)    For i = 1 To tournamentsize        If prob < probability(i) Then            new_costsaving(no).value = costsaving(nosaving(i)).value            costsaving(nosaving(i)).deleted = True            Exit For i        End If    Next iNext noReturn new_costsaving\end{verbatim}\section*{Route Post-Improvement}The route post-improvement applies intra-route and inter-route moves to further optimize the solution.\begin{verbatim}(a) Intra-route moveFor iteration_global = 1 To 100    For i = 1 To UpperBound(route)        For iteration_local = 1 To 50            rand = RandomInteger(1 To 2)            If rand = 1 Then                cal_route = DoMoveRoute(route(i))            Else If rand = 2 Then                cal_route = DoSwapRoute(route(i))            End If            cal_solution = DoSolution(cal_route)            solution = DoSolution(route(i))            If cal_solution < solution Then                route(i) = cal_route            End If        Next iteration_local    Next iNext iteration_globalReturn route(b) Inter-route moveFor iteration_global = 1 To 100    For i = 1 To UpperBound(route) - 1        For j = i + 1 To UpperBound(route)            For iteration_local = 1 To 50                rand = RandomInteger(1 To 2)                If rand = 1 Then                    cal_route = DoMoveRoute(route(i), route(j))                Else If rand = 2 Then                    cal_route = DoSwapRoute(route(i), route(j))                End If                cal_solution = DoSolution(cal_route(i), cal_route(j))                solution = DoSolution(route(i), route(j))                If cal_solution < solution Then                    route(i) = cal_route(i)                    route(j) = cal_route(j)                End If            Next iteration_local        Next j    Next iNext iteration_globalReturn route\end{verbatim}\section*{Explanation}\begin{itemize}    \item \textbf{Initialization}: Initializes the cost and savings matrices, sorts the savings, and constructs initial routes.    \item \textbf{Iterative Improvement}: Uses a two-phase probabilistic approach to introduce randomness and avoid local optima, continually updating the solution if improvements are found.    \item \textbf{Route Post-Improvement}: Applies local search techniques to further enhance the routes by moving and swapping customers within and between routes.\end{itemize}This enhanced algorithm effectively combines classical savings with probabilistic and local search methods to find near-optimal solutions for CVRP.\end{document}