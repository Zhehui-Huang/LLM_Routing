def test_solution(routes, tour_costs, overall_cost, demands, capacities):
    depot = 0
    total_demand_met = sum(demands)
    total_capacity = sum(capacities)
    delivered_demand = 0
    
    # Check if all routes start and end at the depot
    if not all(route[0] == depot and route[-1] == depot for route in routes):
        return "FAIL"

    # Check if all cities except depot are covered
    all_cities = set(range(1, len(demands)))  # exclude depot city
    visited_cities = set(city for route in routes for city in route if city != depot)
    
    if visited_cities != all_cities:
        return "FAIL"

    # Check robot capacity constraints and demand
    for route, tour_cost, capacity in zip(routes, tour_costs, capacities):
        route_demand = 0
        prev_city = route[0]
        
        calculated_cost = 0
        
        for city in route[1:]:
            route_demand += demands[city]
            # Calculate distance
            calculated_cost += ((coordinates[city][0] - coordinates[prev_city][0]) ** 2 + (coordinates[city][1] - coordinates[prev_city][1]) ** 2) ** 0.5
            prev_city = city

        # Add distance from last city to depot
        calculated_cost += ((coordinates[depot][0] - coordinates[prev_city][0]) ** 2 + (coordinates[depot][1] - coordinates[prev_city][1]) ** 2) ** 0.5
        delivered_demand += route_demand

        if route_demand > capacity:
            return "FAIL"
        
        # Validate the individual route costs
        if not (abs(calculated_cost - tour_cost) < 0.01):  # small tolerance for floating point arithmetic
            return "FAIL"

    # Verify total demand is met
    if delivered_demand != total_demand_met:
        return "FAIL"

    # Validate the overall cost
    if not (abs(sum(tour_costs) - overall_cost) < 0.01):  # small tolerance
        return "FAIL"

    # If all checks pass
    return "CORRECT"

# Hypothetical input example after solution found
demands = [0, 7, 30, 16, 23, 11, 19, 15, 28, 8, 8, 7, 14, 6, 19, 11, 12, 26, 17, 6, 15]
capacities = [160, 160]
coordinates = [(30, 40), (37, 52), (49, 49), (52, 64), (31, 62), (52, 33), (42, 41), (52, 41), (57, 58), (62, 42), (42, 57), (27, 68), (43, 67), (58, 48), (58, 27), (37, 69), (38, 46), (61, 33), (62, 63), (63, 69), (45, 35)]

# Hypothetical solutions generated by some algorithm
routes = [[0, 1, 2, 3, 4, 0], [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0]]
tour_costs = [123.45, 231.56]  # Dummy values for the example
overall_cost = 355.01  # Dummy values for the example

# Call the test with this hypothetical solution
result = test_solution(routes, tour_costs, overall_cost, demands, capacities)
print(result)