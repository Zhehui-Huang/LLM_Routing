OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/681c33e8c3a64cbd88e7610fcb992960-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/681c33e8c3a64cbd88e7610fcb992960-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 399 COLUMNS
At line 3356 RHS
At line 3751 BOUNDS
At line 4132 ENDATA
Problem MODEL has 394 rows, 400 columns and 1816 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 90.4366 - 0.00 seconds
Cgl0004I processed model has 394 rows, 358 columns (338 integer (338 of which binary)) and 1774 elements
Cbc0038I Initial state - 11 integers unsatisfied sum - 1.03704
Cbc0038I Pass   1: suminf.    0.51852 (7) obj. 102.614 iterations 26
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. 245.657 iterations 20
Cbc0038I Solution found of 245.657
Cbc0038I Relaxing continuous gives 245.657
Cbc0038I Before mini branch and bound, 323 integers at bound fixed and 13 continuous
Cbc0038I Full problem 394 rows 358 columns, reduced to 3 rows 3 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 230.135
Cbc0038I Pass   3: suminf.    0.51852 (7) obj. 102.614 iterations 0
Cbc0038I Pass   4: suminf.    0.61576 (4) obj. 230.135 iterations 12
Cbc0038I Pass   5: suminf.    0.43158 (4) obj. 230.135 iterations 5
Cbc0038I Pass   6: suminf.    0.37037 (5) obj. 114.045 iterations 7
Cbc0038I Pass   7: suminf.    0.59873 (4) obj. 230.135 iterations 37
Cbc0038I Pass   8: suminf.    0.14815 (2) obj. 211.222 iterations 25
Cbc0038I Pass   9: suminf.    0.12146 (4) obj. 230.135 iterations 29
Cbc0038I Pass  10: suminf.    0.00000 (0) obj. 159.884 iterations 36
Cbc0038I Solution found of 159.884
Cbc0038I Relaxing continuous gives 159.884
Cbc0038I Before mini branch and bound, 314 integers at bound fixed and 10 continuous
Cbc0038I Full problem 394 rows 358 columns, reduced to 26 rows 23 columns
Cbc0038I Mini branch and bound improved solution from 159.884 to 151.232 (0.01 seconds)
Cbc0038I Round again with cutoff of 139.073
Cbc0038I Reduced cost fixing fixed 122 variables on major pass 3
Cbc0038I Pass  11: suminf.    0.51852 (6) obj. 98.387 iterations 7
Cbc0038I Pass  12: suminf.    0.69873 (6) obj. 139.073 iterations 11
Cbc0038I Pass  13: suminf.    0.68515 (10) obj. 139.073 iterations 4
Cbc0038I Pass  14: suminf.    0.51852 (8) obj. 98.6887 iterations 23
Cbc0038I Pass  15: suminf.    0.46927 (6) obj. 139.073 iterations 15
Cbc0038I Pass  16: suminf.    0.14815 (2) obj. 135.384 iterations 15
Cbc0038I Pass  17: suminf.    1.14277 (4) obj. 139.073 iterations 14
Cbc0038I Pass  18: suminf.    0.37037 (6) obj. 111.29 iterations 10
Cbc0038I Pass  19: suminf.    0.95793 (4) obj. 139.073 iterations 16
Cbc0038I Pass  20: suminf.    0.14815 (2) obj. 129.302 iterations 12
Cbc0038I Pass  21: suminf.    0.15668 (2) obj. 139.073 iterations 11
Cbc0038I Pass  22: suminf.    0.22222 (2) obj. 121.9 iterations 8
Cbc0038I Pass  23: suminf.    1.10579 (8) obj. 139.073 iterations 28
Cbc0038I Pass  24: suminf.    0.00000 (0) obj. 132.574 iterations 26
Cbc0038I Solution found of 132.574
Cbc0038I Relaxing continuous gives 132.574
Cbc0038I Before mini branch and bound, 309 integers at bound fixed and 11 continuous
Cbc0038I Full problem 394 rows 358 columns, reduced to 21 rows 19 columns
Cbc0038I Mini branch and bound improved solution from 132.574 to 116.823 (0.02 seconds)
Cbc0038I Round again with cutoff of 108.907
Cbc0038I Reduced cost fixing fixed 256 variables on major pass 4
Cbc0038I Pass  25: suminf.    0.51852 (9) obj. 92.8884 iterations 16
Cbc0038I Pass  26: suminf.    1.25551 (7) obj. 108.907 iterations 10
Cbc0038I Pass  27: suminf.    1.13945 (6) obj. 108.907 iterations 5
Cbc0038I Pass  28: suminf.    0.37037 (9) obj. 108.704 iterations 10
Cbc0038I Pass  29: suminf.    0.86478 (2) obj. 108.907 iterations 22
Cbc0038I Pass  30: suminf.    0.86478 (2) obj. 108.907 iterations 4
Cbc0038I Pass  31: suminf.    0.14815 (2) obj. 100.386 iterations 9
Cbc0038I Pass  32: suminf.    0.89186 (2) obj. 108.907 iterations 14
Cbc0038I Pass  33: suminf.    1.35851 (6) obj. 108.907 iterations 11
Cbc0038I Pass  34: suminf.    0.29630 (4) obj. 106.614 iterations 19
Cbc0038I Pass  35: suminf.    0.86868 (4) obj. 108.907 iterations 14
Cbc0038I Pass  36: suminf.    0.83288 (8) obj. 108.907 iterations 17
Cbc0038I Pass  37: suminf.    1.29989 (8) obj. 108.907 iterations 17
Cbc0038I Pass  38: suminf.    0.61486 (9) obj. 108.907 iterations 31
Cbc0038I Pass  39: suminf.    0.18835 (4) obj. 108.907 iterations 23
Cbc0038I Pass  40: suminf.    0.70929 (4) obj. 108.907 iterations 4
Cbc0038I Pass  41: suminf.    0.54819 (4) obj. 108.907 iterations 19
Cbc0038I Pass  42: suminf.    0.37037 (9) obj. 108.704 iterations 15
Cbc0038I Pass  43: suminf.    0.86478 (2) obj. 108.907 iterations 30
Cbc0038I Pass  44: suminf.    0.86478 (2) obj. 108.907 iterations 3
Cbc0038I Pass  45: suminf.    0.14815 (2) obj. 100.386 iterations 9
Cbc0038I Pass  46: suminf.    0.89186 (2) obj. 108.907 iterations 5
Cbc0038I Pass  47: suminf.    1.36479 (9) obj. 108.907 iterations 14
Cbc0038I Pass  48: suminf.    1.17712 (9) obj. 108.907 iterations 7
Cbc0038I Pass  49: suminf.    0.44444 (6) obj. 101.779 iterations 22
Cbc0038I Pass  50: suminf.    0.29630 (4) obj. 102.805 iterations 5
Cbc0038I Pass  51: suminf.    1.01148 (4) obj. 108.907 iterations 14
Cbc0038I Pass  52: suminf.    0.98683 (6) obj. 108.907 iterations 9
Cbc0038I Pass  53: suminf.    0.14815 (2) obj. 104.842 iterations 23
Cbc0038I Pass  54: suminf.    0.80673 (2) obj. 108.907 iterations 16
Cbc0038I Rounding solution of 116.4 is better than previous of 116.823

Cbc0038I Before mini branch and bound, 304 integers at bound fixed and 8 continuous
Cbc0038I Full problem 394 rows 358 columns, reduced to 37 rows 34 columns
Cbc0038I Mini branch and bound improved solution from 116.4 to 116.273 (0.03 seconds)
Cbc0038I Round again with cutoff of 103.366
Cbc0038I Reduced cost fixing fixed 284 variables on major pass 5
Cbc0038I Pass  54: suminf.    0.51852 (8) obj. 92.6692 iterations 15
Cbc0038I Pass  55: suminf.    1.87740 (7) obj. 103.366 iterations 3
Cbc0038I Pass  56: suminf.    1.84835 (10) obj. 103.366 iterations 5
Cbc0038I Pass  57: suminf.    0.51852 (7) obj. 95.2524 iterations 20
Cbc0038I Pass  58: suminf.    1.07186 (4) obj. 103.366 iterations 15
Cbc0038I Pass  59: suminf.    0.29630 (4) obj. 101.056 iterations 12
Cbc0038I Pass  60: suminf.    0.64114 (4) obj. 103.366 iterations 5
Cbc0038I Pass  61: suminf.    1.07186 (4) obj. 103.366 iterations 17
Cbc0038I Pass  62: suminf.    3.98323 (10) obj. 103.366 iterations 21
Cbc0038I Pass  63: suminf.    0.29630 (4) obj. 97.2669 iterations 15
Cbc0038I Pass  64: suminf.    0.87896 (2) obj. 103.366 iterations 8
Cbc0038I Pass  65: suminf.    0.14815 (2) obj. 98.8548 iterations 3
Cbc0038I Pass  66: suminf.    0.86769 (6) obj. 103.366 iterations 7
Cbc0038I Pass  67: suminf.    0.14815 (2) obj. 98.8548 iterations 7
Cbc0038I Pass  68: suminf.    1.79258 (9) obj. 103.366 iterations 21
Cbc0038I Pass  69: suminf.    1.21487 (11) obj. 103.366 iterations 12
Cbc0038I Pass  70: suminf.    0.59259 (6) obj. 95.4437 iterations 18
Cbc0038I Pass  71: suminf.    0.51852 (7) obj. 95.2524 iterations 6
Cbc0038I Pass  72: suminf.    1.07186 (4) obj. 103.366 iterations 15
Cbc0038I Pass  73: suminf.    0.29630 (4) obj. 101.056 iterations 18
Cbc0038I Pass  74: suminf.    0.64114 (4) obj. 103.366 iterations 11
Cbc0038I Pass  75: suminf.    2.26763 (8) obj. 103.366 iterations 9
Cbc0038I Pass  76: suminf.    0.51852 (7) obj. 92.4115 iterations 25
Cbc0038I Pass  77: suminf.    0.62045 (6) obj. 103.366 iterations 12
Cbc0038I Pass  78: suminf.    0.49326 (6) obj. 103.366 iterations 12
Cbc0038I Pass  79: suminf.    0.97396 (7) obj. 103.366 iterations 6
Cbc0038I Pass  80: suminf.    0.29630 (4) obj. 101.973 iterations 14
Cbc0038I Pass  81: suminf.    0.29630 (4) obj. 101.973 iterations 1
Cbc0038I Pass  82: suminf.    0.64383 (4) obj. 103.366 iterations 11
Cbc0038I Pass  83: suminf.    0.85732 (10) obj. 103.366 iterations 12
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 306 integers at bound fixed and 11 continuous
Cbc0038I Full problem 394 rows 358 columns, reduced to 31 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of 116.273 - took 0.03 seconds
Cbc0012I Integer solution of 116.27273 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 394 rows 358 columns, reduced to 385 rows 28 columns - 2 fixed gives 381, 23 - still too large
Cbc0038I Full problem 394 rows 358 columns, reduced to 381 rows 23 columns - too large
Cbc0031I 15 added rows had average density of 12.333333
Cbc0013I At root node, 15 cuts changed objective from 90.43658 to 107.22133 in 92 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 12.5 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 236 row cuts average 29.7 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 44 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 90 row cuts average 13.8 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 116.27273 best solution, best possible 110.28576 (0.12 seconds)
Cbc0012I Integer solution of 110.28576 found by DiveCoefficient after 743 iterations and 1 nodes (0.12 seconds)
Cbc0001I Search completed - best objective 110.285756821692, took 743 iterations and 1 nodes (0.12 seconds)
Cbc0032I Strong branching done 28 times (417 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 0, 300 variables fixed on reduced cost
Cuts at root node changed objective from 90.4366 to 110.286
Probing was tried 92 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
Gomory was tried 93 times and created 236 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Knapsack was tried 92 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 92 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 93 times and created 44 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
FlowCover was tried 92 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 93 times and created 98 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                110.28575682
Enumerated nodes:               1
Total iterations:               743
Time (CPU seconds):             0.12
Time (Wallclock seconds):       0.12

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.12



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/GTSP/20/city_20_instance_3/0/2/solution_r1.py", line 64, in <module>
    next_city = next(j for (i, j) in edges if i == current)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
StopIteration


