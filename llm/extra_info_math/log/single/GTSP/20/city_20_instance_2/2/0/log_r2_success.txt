OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/b871f3070e4345f5afe5fcca2db74d9f-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/b871f3070e4345f5afe5fcca2db74d9f-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 377 COLUMNS
At line 4026 RHS
At line 4399 BOUNDS
At line 4780 ENDATA
Problem MODEL has 372 rows, 399 columns and 2508 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 64.506 - 0.00 seconds
Cgl0003I 54 fixed, 0 tightened bounds, 0 strengthened rows, 0 substitutions
Cgl0004I processed model has 372 rows, 345 columns (326 integer (326 of which binary)) and 2238 elements
Cbc0038I Initial state - 12 integers unsatisfied sum - 3.8
Cbc0038I Pass   1: suminf.    3.60000 (13) obj. 158.847 iterations 37
Cbc0038I Pass   2: suminf.    2.60000 (10) obj. 157.313 iterations 21
Cbc0038I Pass   3: suminf.    1.96000 (14) obj. 170.289 iterations 21
Cbc0038I Pass   4: suminf.    2.00000 (8) obj. 230.217 iterations 57
Cbc0038I Pass   5: suminf.    2.00000 (16) obj. 254.733 iterations 26
Cbc0038I Pass   6: suminf.    2.00000 (19) obj. 269.864 iterations 41
Cbc0038I Pass   7: suminf.    2.00000 (17) obj. 278.951 iterations 40
Cbc0038I Pass   8: suminf.    4.50000 (12) obj. 283.608 iterations 36
Cbc0038I Pass   9: suminf.    4.00000 (8) obj. 245.571 iterations 40
Cbc0038I Pass  10: suminf.    4.00000 (8) obj. 245.571 iterations 30
Cbc0038I Pass  11: suminf.    5.50000 (11) obj. 367.488 iterations 50
Cbc0038I Pass  12: suminf.    5.00000 (10) obj. 347.764 iterations 43
Cbc0038I Pass  13: suminf.    5.00000 (10) obj. 347.764 iterations 25
Cbc0038I Pass  14: suminf.    4.00000 (8) obj. 371.008 iterations 52
Cbc0038I Pass  15: suminf.    3.00000 (6) obj. 352.316 iterations 74
Cbc0038I Pass  16: suminf.    3.00000 (6) obj. 352.316 iterations 40
Cbc0038I Pass  17: suminf.    4.50000 (17) obj. 220.033 iterations 69
Cbc0038I Pass  18: suminf.    0.00000 (0) obj. 215.984 iterations 64
Cbc0038I Solution found of 215.984
Cbc0038I Relaxing continuous gives 215.984
Cbc0038I Before mini branch and bound, 234 integers at bound fixed and 5 continuous
Cbc0038I Full problem 372 rows 345 columns, reduced to 83 rows 84 columns
Cbc0038I Mini branch and bound improved solution from 215.984 to 171.334 (0.03 seconds)
Cbc0038I Round again with cutoff of 160.688
Cbc0038I Reduced cost fixing fixed 5 variables on major pass 2
Cbc0038I Pass  19: suminf.    3.60000 (13) obj. 158.847 iterations 0
Cbc0038I Pass  20: suminf.    2.60000 (10) obj. 157.313 iterations 23
Cbc0038I Pass  21: suminf.    2.00000 (18) obj. 160.688 iterations 31
Cbc0038I Pass  22: suminf.    2.00000 (16) obj. 160.688 iterations 37
Cbc0038I Pass  23: suminf.    2.40000 (11) obj. 120.779 iterations 56
Cbc0038I Pass  24: suminf.    2.00000 (13) obj. 120.002 iterations 42
Cbc0038I Pass  25: suminf.    4.17364 (13) obj. 160.688 iterations 48
Cbc0038I Pass  26: suminf.    3.00000 (9) obj. 160.688 iterations 40
Cbc0038I Pass  27: suminf.    2.20000 (7) obj. 147.159 iterations 19
Cbc0038I Pass  28: suminf.    1.96000 (14) obj. 141.723 iterations 26
Cbc0038I Pass  29: suminf.    4.72720 (11) obj. 160.688 iterations 36
Cbc0038I Pass  30: suminf.    1.96000 (16) obj. 160.688 iterations 40
Cbc0038I Pass  31: suminf.    2.19834 (9) obj. 160.688 iterations 44
Cbc0038I Pass  32: suminf.    2.00000 (17) obj. 160.688 iterations 48
Cbc0038I Pass  33: suminf.    2.00000 (9) obj. 139.02 iterations 74
Cbc0038I Pass  34: suminf.    2.00000 (20) obj. 157.32 iterations 51
Cbc0038I Pass  35: suminf.    3.85001 (14) obj. 160.688 iterations 49
Cbc0038I Pass  36: suminf.    2.00000 (13) obj. 160.688 iterations 42
Cbc0038I Pass  37: suminf.    2.00000 (17) obj. 160.688 iterations 39
Cbc0038I Pass  38: suminf.    3.66667 (11) obj. 106.291 iterations 44
Cbc0038I Pass  39: suminf.    2.80000 (11) obj. 160.688 iterations 48
Cbc0038I Pass  40: suminf.    2.00000 (4) obj. 135.105 iterations 33
Cbc0038I Pass  41: suminf.    2.00000 (4) obj. 135.105 iterations 24
Cbc0038I Pass  42: suminf.    2.00000 (4) obj. 135.105 iterations 18
Cbc0038I Pass  43: suminf.    1.80000 (11) obj. 160.688 iterations 29
Cbc0038I Pass  44: suminf.    2.00000 (8) obj. 145.115 iterations 56
Cbc0038I Pass  45: suminf.    2.00000 (13) obj. 160.688 iterations 54
Cbc0038I Pass  46: suminf.    3.20000 (12) obj. 159.192 iterations 39
Cbc0038I Pass  47: suminf.    2.00000 (12) obj. 141.614 iterations 30
Cbc0038I Pass  48: suminf.    2.00000 (12) obj. 141.614 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 227 integers at bound fixed and 3 continuous
Cbc0038I Full problem 372 rows 345 columns, reduced to 102 rows 93 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of 171.334 - took 0.06 seconds
Cbc0012I Integer solution of 171.33388 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 372 rows 345 columns, reduced to 353 rows 29 columns - 1 fixed gives 342, 19 - still too large
Cbc0031I 9 added rows had average density of 202.66667
Cbc0013I At root node, 9 cuts changed objective from 64.87459 to 83.937086 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.133 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 677 row cuts average 316.2 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 410 row cuts average 25.5 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 331 row cuts average 62.6 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 191 row cuts average 157.1 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 171.33388 best solution, best possible 83.937086 (0.48 seconds)
Cbc0016I Integer solution of 159.6137 found by strong branching after 3752 iterations and 16 nodes (0.59 seconds)
Cbc0016I Integer solution of 150.52899 found by strong branching after 3780 iterations and 18 nodes (0.59 seconds)
Cbc0038I Full problem 372 rows 345 columns, reduced to 356 rows 35 columns - 1 fixed gives 344, 21 - still too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 352 rows 27 columns - 1 fixed gives 342, 19 - still too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 352 rows 26 columns - 1 fixed gives 342, 19 - still too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 351 rows 28 columns - 1 fixed gives 342, 20 - still too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 354 rows 29 columns - 1 fixed gives 342, 20 - still too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 342 rows 20 columns - too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 345 rows 23 columns - 1 fixed gives 342, 20 - still too large
Cbc0038I Full problem 372 rows 345 columns, reduced to 342 rows 20 columns - too large
Cbc0001I Search completed - best objective 150.5289941543, took 32434 iterations and 804 nodes (1.69 seconds)
Cbc0032I Strong branching done 3254 times (41230 iterations), fathomed 128 nodes and fixed 139 variables
Cbc0035I Maximum depth 54, 7545 variables fixed on reduced cost
Cuts at root node changed objective from 64.8746 to 83.9371
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.133 seconds)
Gomory was tried 1126 times and created 952 cuts of which 0 were active after adding rounds of cuts (0.084 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 1126 times and created 2398 cuts of which 0 were active after adding rounds of cuts (0.095 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 1126 times and created 1930 cuts of which 0 were active after adding rounds of cuts (0.048 seconds)
ZeroHalf was tried 1126 times and created 1133 cuts of which 0 were active after adding rounds of cuts (0.128 seconds)

Result - Optimal solution found

Objective value:                150.52899415
Enumerated nodes:               804
Total iterations:               32434
Time (CPU seconds):             1.69
Time (Wallclock seconds):       1.70

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.69   (Wallclock seconds):       1.70

Tour: [0, 6, 11, 18, 19, 16, 0, 6, 11, 18, 19, 16, 0, 6, 11, 18, 19, 16, 0, 6, 0]
Total travel cost: 529.61


ERROR:


