OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/3d2db88739854277ba7039ddcefd140b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/3d2db88739854277ba7039ddcefd140b-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 89 COLUMNS
At line 878 RHS
At line 963 BOUNDS
At line 1054 ENDATA
Problem MODEL has 84 rows, 99 columns and 518 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 136.523 - 0.00 seconds
Cgl0004I processed model has 84 rows, 99 columns (90 integer (90 of which binary)) and 518 elements
Cbc0038I Initial state - 12 integers unsatisfied sum - 3
Cbc0038I Pass   1: suminf.    2.00000 (8) obj. 224.321 iterations 8
Cbc0038I Pass   2: suminf.    0.80000 (10) obj. 279.592 iterations 14
Cbc0038I Pass   3: suminf.    3.50000 (7) obj. 358.001 iterations 13
Cbc0038I Pass   4: suminf.    0.80000 (6) obj. 352.296 iterations 11
Cbc0038I Pass   5: suminf.    0.80000 (4) obj. 338.691 iterations 9
Cbc0038I Pass   6: suminf.    0.80000 (4) obj. 322.398 iterations 9
Cbc0038I Pass   7: suminf.    0.00000 (0) obj. 596.253 iterations 25
Cbc0038I Solution found of 596.253
Cbc0038I Relaxing continuous gives 596.253
Cbc0038I Before mini branch and bound, 59 integers at bound fixed and 4 continuous
Cbc0038I Full problem 84 rows 99 columns, reduced to 12 rows 12 columns
Cbc0038I Mini branch and bound improved solution from 596.253 to 317.189 (0.00 seconds)
Cbc0038I Round again with cutoff of 299.123
Cbc0038I Pass   8: suminf.    2.00000 (8) obj. 224.321 iterations 0
Cbc0038I Pass   9: suminf.    0.80000 (10) obj. 279.592 iterations 16
Cbc0038I Pass  10: suminf.    3.67926 (13) obj. 299.123 iterations 18
Cbc0038I Pass  11: suminf.    1.72791 (8) obj. 299.123 iterations 16
Cbc0038I Pass  12: suminf.    1.58314 (12) obj. 299.123 iterations 6
Cbc0038I Pass  13: suminf.    1.40000 (7) obj. 188.063 iterations 15
Cbc0038I Pass  14: suminf.    0.40000 (4) obj. 202.907 iterations 23
Cbc0038I Pass  15: suminf.    0.40000 (4) obj. 236.523 iterations 10
Cbc0038I Pass  16: suminf.    6.33891 (14) obj. 299.123 iterations 34
Cbc0038I Pass  17: suminf.    4.00000 (8) obj. 217.372 iterations 29
Cbc0038I Pass  18: suminf.    4.00000 (8) obj. 217.372 iterations 3
Cbc0038I Pass  19: suminf.    1.00000 (7) obj. 223.561 iterations 15
Cbc0038I Pass  20: suminf.    1.00000 (7) obj. 205.385 iterations 19
Cbc0038I Pass  21: suminf.    0.00000 (0) obj. 189.777 iterations 21
Cbc0038I Solution found of 189.777
Cbc0038I Relaxing continuous gives 189.777
Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 2 continuous
Cbc0038I Full problem 84 rows 99 columns, reduced to 43 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 179.126
Cbc0038I Reduced cost fixing fixed 26 variables on major pass 3
Cbc0038I Pass  22: suminf.    3.00000 (6) obj. 155.387 iterations 3
Cbc0038I Pass  23: suminf.    1.00000 (6) obj. 174.927 iterations 9
Cbc0038I Pass  24: suminf.    1.00000 (6) obj. 174.927 iterations 4
Cbc0038I Pass  25: suminf.    1.00000 (9) obj. 171.578 iterations 17
Cbc0038I Pass  26: suminf.    1.01603 (5) obj. 179.126 iterations 31
Cbc0038I Pass  27: suminf.    1.00000 (6) obj. 178.88 iterations 23
Cbc0038I Pass  28: suminf.    1.00000 (9) obj. 179.126 iterations 26
Cbc0038I Pass  29: suminf.    1.00000 (10) obj. 178.399 iterations 19
Cbc0038I Pass  30: suminf.    1.06716 (6) obj. 179.126 iterations 28
Cbc0038I Pass  31: suminf.    1.00000 (7) obj. 179.126 iterations 19
Cbc0038I Pass  32: suminf.    1.80000 (6) obj. 163.324 iterations 40
Cbc0038I Pass  33: suminf.    1.00000 (10) obj. 160.21 iterations 16
Cbc0038I Pass  34: suminf.    3.00000 (10) obj. 179.126 iterations 20
Cbc0038I Pass  35: suminf.    2.76963 (8) obj. 179.126 iterations 5
Cbc0038I Pass  36: suminf.    1.60000 (7) obj. 154.593 iterations 12
Cbc0038I Pass  37: suminf.    1.00000 (9) obj. 158.135 iterations 17
Cbc0038I Pass  38: suminf.    3.45290 (9) obj. 179.126 iterations 14
Cbc0038I Pass  39: suminf.    1.60000 (7) obj. 174.934 iterations 14
Cbc0038I Pass  40: suminf.    1.00000 (13) obj. 179.126 iterations 31
Cbc0038I Pass  41: suminf.    1.20000 (6) obj. 153.629 iterations 33
Cbc0038I Pass  42: suminf.    1.00000 (8) obj. 149.961 iterations 25
Cbc0038I Pass  43: suminf.    1.00000 (7) obj. 158.9 iterations 26
Cbc0038I Pass  44: suminf.    1.00000 (8) obj. 154.716 iterations 8
Cbc0038I Pass  45: suminf.    1.00000 (7) obj. 156.64 iterations 8
Cbc0038I Pass  46: suminf.    2.00766 (11) obj. 179.126 iterations 39
Cbc0038I Pass  47: suminf.    1.53662 (7) obj. 179.126 iterations 9
Cbc0038I Pass  48: suminf.    1.20000 (6) obj. 151.688 iterations 24
Cbc0038I Pass  49: suminf.    1.00000 (8) obj. 167.372 iterations 19
Cbc0038I Pass  50: suminf.    1.00000 (15) obj. 179.126 iterations 23
Cbc0038I Pass  51: suminf.    1.00000 (13) obj. 179.126 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 1 continuous
Cbc0038I Full problem 84 rows 99 columns, reduced to 51 rows 42 columns
Cbc0038I Mini branch and bound improved solution from 189.777 to 178.631 (0.02 seconds)
Cbc0038I Round again with cutoff of 165.999
Cbc0038I Reduced cost fixing fixed 41 variables on major pass 4
Cbc0038I Pass  51: suminf.    1.20000 (6) obj. 143.634 iterations 12
Cbc0038I Pass  52: suminf.    1.00000 (10) obj. 143.42 iterations 10
Cbc0038I Pass  53: suminf.    1.00000 (9) obj. 154.797 iterations 23
Cbc0038I Pass  54: suminf.    1.00000 (11) obj. 156.462 iterations 9
Cbc0038I Pass  55: suminf.    1.79676 (6) obj. 165.999 iterations 13
Cbc0038I Pass  56: suminf.    1.61854 (9) obj. 165.999 iterations 11
Cbc0038I Pass  57: suminf.    2.00000 (9) obj. 148.691 iterations 23
Cbc0038I Pass  58: suminf.    1.00000 (14) obj. 144.173 iterations 18
Cbc0038I Pass  59: suminf.    3.90770 (13) obj. 165.999 iterations 22
Cbc0038I Pass  60: suminf.    1.60000 (7) obj. 154.593 iterations 11
Cbc0038I Pass  61: suminf.    1.00000 (10) obj. 154.562 iterations 13
Cbc0038I Pass  62: suminf.    1.85434 (8) obj. 165.999 iterations 19
Cbc0038I Pass  63: suminf.    1.00000 (11) obj. 156.462 iterations 25
Cbc0038I Pass  64: suminf.    1.79676 (6) obj. 165.999 iterations 20
Cbc0038I Pass  65: suminf.    1.61854 (9) obj. 165.999 iterations 11
Cbc0038I Pass  66: suminf.    2.00000 (9) obj. 148.691 iterations 37
Cbc0038I Pass  67: suminf.    1.00000 (14) obj. 144.173 iterations 18
Cbc0038I Pass  68: suminf.    3.84108 (9) obj. 165.999 iterations 8
Cbc0038I Pass  69: suminf.    2.47209 (11) obj. 165.999 iterations 7
Cbc0038I Pass  70: suminf.    1.00000 (8) obj. 154.801 iterations 5
Cbc0038I Pass  71: suminf.    1.00000 (11) obj. 154.435 iterations 7
Cbc0038I Pass  72: suminf.    3.00000 (6) obj. 157.239 iterations 26
Cbc0038I Pass  73: suminf.    3.00000 (6) obj. 157.239 iterations 2
Cbc0038I Pass  74: suminf.    3.00000 (6) obj. 157.239 iterations 4
Cbc0038I Pass  75: suminf.    2.06892 (7) obj. 165.999 iterations 9
Cbc0038I Pass  76: suminf.    1.58034 (11) obj. 165.999 iterations 14
Cbc0038I Pass  77: suminf.    1.50305 (11) obj. 165.999 iterations 1
Cbc0038I Pass  78: suminf.    1.20000 (4) obj. 157.641 iterations 18
Cbc0038I Pass  79: suminf.    1.00000 (11) obj. 154.435 iterations 18
Cbc0038I Pass  80: suminf.    3.00000 (6) obj. 157.239 iterations 17
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 57 integers at bound fixed and 1 continuous
Cbc0038I Full problem 84 rows 99 columns, reduced to 50 rows 39 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of 178.631 - took 0.03 seconds
Cbc0012I Integer solution of 178.63132 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 84 rows 99 columns, reduced to 73 rows 17 columns
Cbc0031I 9 added rows had average density of 30.333333
Cbc0013I At root node, 9 cuts changed objective from 136.5234 to 162.65039 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 21 row cuts average 11.0 elements, 2 column cuts (2 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1032 row cuts average 57.4 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 348 row cuts average 11.6 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 257 row cuts average 12.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 34.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 178.63132 best solution, best possible 162.65039 (0.12 seconds)
Cbc0001I Search completed - best objective 178.63131549633, took 3647 iterations and 32 nodes (0.16 seconds)
Cbc0032I Strong branching done 396 times (6407 iterations), fathomed 8 nodes and fixed 5 variables
Cbc0035I Maximum depth 12, 218 variables fixed on reduced cost
Cuts at root node changed objective from 136.523 to 162.65
Probing was tried 100 times and created 23 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
Gomory was tried 182 times and created 1072 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 182 times and created 525 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 182 times and created 502 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
ZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                178.63131550
Enumerated nodes:               32
Total iterations:               3647
Time (CPU seconds):             0.15
Time (Wallclock seconds):       0.16

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.16



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/GTSP/10/city_10_instance_2/0/1/solution_r1.py", line 69, in <module>
    next_city = next(j for j in cities if j != current and value(x[current, j]) == 1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
StopIteration


