OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/0c1c1c3124b04b528e88f37cab5ef74d-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/0c1c1c3124b04b528e88f37cab5ef74d-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 101 COLUMNS
At line 732 RHS
At line 829 BOUNDS
At line 920 ENDATA
Problem MODEL has 96 rows, 99 columns and 360 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 338.878 - 0.00 seconds
Cgl0004I processed model has 96 rows, 81 columns (72 integer (72 of which binary)) and 342 elements
Cbc0038I Initial state - 26 integers unsatisfied sum - 2.8
Cbc0038I Pass   1: suminf.    1.20000 (6) obj. 352.919 iterations 34
Cbc0038I Pass   2: suminf.    1.20000 (6) obj. 402.051 iterations 26
Cbc0038I Pass   3: suminf.    1.20000 (6) obj. 497.984 iterations 32
Cbc0038I Pass   4: suminf.    1.20000 (6) obj. 483.938 iterations 31
Cbc0038I Pass   5: suminf.    1.20000 (4) obj. 432.703 iterations 19
Cbc0038I Pass   6: suminf.    1.20000 (8) obj. 471.157 iterations 15
Cbc0038I Pass   7: suminf.    1.80000 (6) obj. 487.366 iterations 26
Cbc0038I Pass   8: suminf.    0.60000 (6) obj. 480.108 iterations 23
Cbc0038I Pass   9: suminf.    0.60000 (6) obj. 480.108 iterations 19
Cbc0038I Pass  10: suminf.    0.00000 (0) obj. 507.258 iterations 36
Cbc0038I Solution found of 507.258
Cbc0038I Relaxing continuous gives 507.258
Cbc0038I Before mini branch and bound, 29 integers at bound fixed and 2 continuous
Cbc0038I Full problem 96 rows 81 columns, reduced to 39 rows 37 columns
Cbc0038I Mini branch and bound improved solution from 507.258 to 360.926 (0.00 seconds)
Cbc0038I Round again with cutoff of 358.722
Cbc0038I Reduced cost fixing fixed 18 variables on major pass 2
Cbc0038I Pass  11: suminf.    1.60000 (8) obj. 342.938 iterations 15
Cbc0038I Pass  12: suminf.    1.84559 (6) obj. 358.722 iterations 13
Cbc0038I Pass  13: suminf.    1.20000 (6) obj. 342.109 iterations 13
Cbc0038I Pass  14: suminf.    1.12088 (4) obj. 358.722 iterations 19
Cbc0038I Pass  15: suminf.    0.80000 (4) obj. 348.195 iterations 22
Cbc0038I Pass  16: suminf.    0.21296 (4) obj. 358.722 iterations 21
Cbc0038I Pass  17: suminf.    0.21296 (4) obj. 358.722 iterations 2
Cbc0038I Pass  18: suminf.    0.21296 (4) obj. 358.722 iterations 2
Cbc0038I Pass  19: suminf.    2.30758 (8) obj. 358.722 iterations 14
Cbc0038I Pass  20: suminf.    0.80000 (4) obj. 352.497 iterations 13
Cbc0038I Pass  21: suminf.    3.14446 (10) obj. 358.722 iterations 16
Cbc0038I Pass  22: suminf.    2.04840 (7) obj. 358.722 iterations 7
Cbc0038I Pass  23: suminf.    0.00000 (0) obj. 357.409 iterations 16
Cbc0038I Solution found of 357.409
Cbc0038I Relaxing continuous gives 357.409
Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 1 continuous
Cbc0038I Full problem 96 rows 81 columns, reduced to 30 rows 30 columns
Cbc0038I Mini branch and bound improved solution from 357.409 to 348.225 (0.01 seconds)
Cbc0038I Round again with cutoff of 346.356
Cbc0038I Reduced cost fixing fixed 36 variables on major pass 3
Cbc0038I Pass  24: suminf.    2.40000 (12) obj. 339.509 iterations 10
Cbc0038I Pass  25: suminf.    2.72903 (8) obj. 346.356 iterations 8
Cbc0038I Pass  26: suminf.    1.60000 (8) obj. 339.601 iterations 8
Cbc0038I Pass  27: suminf.    1.60000 (8) obj. 339.601 iterations 2
Cbc0038I Pass  28: suminf.    1.60000 (8) obj. 339.601 iterations 2
Cbc0038I Pass  29: suminf.    2.00000 (10) obj. 339.578 iterations 9
Cbc0038I Pass  30: suminf.    2.00000 (10) obj. 339.578 iterations 1
Cbc0038I Pass  31: suminf.    3.45025 (10) obj. 346.356 iterations 3
Cbc0038I Pass  32: suminf.    3.15124 (11) obj. 346.356 iterations 4
Cbc0038I Pass  33: suminf.    1.60000 (8) obj. 339.601 iterations 10
Cbc0038I Pass  34: suminf.    1.60000 (8) obj. 339.601 iterations 7
Cbc0038I Pass  35: suminf.    1.33978 (9) obj. 346.356 iterations 7
Cbc0038I Pass  36: suminf.    1.30107 (9) obj. 346.356 iterations 3
Cbc0038I Pass  37: suminf.    2.72903 (8) obj. 346.356 iterations 5
Cbc0038I Pass  38: suminf.    2.72903 (8) obj. 346.356 iterations 3
Cbc0038I Pass  39: suminf.    1.60000 (8) obj. 339.601 iterations 8
Cbc0038I Pass  40: suminf.    2.00000 (10) obj. 339.578 iterations 8
Cbc0038I Pass  41: suminf.    1.60000 (8) obj. 339.601 iterations 6
Cbc0038I Pass  42: suminf.    1.60000 (8) obj. 339.642 iterations 6
Cbc0038I Pass  43: suminf.    1.60000 (8) obj. 339.642 iterations 3
Cbc0038I Pass  44: suminf.    2.40000 (11) obj. 339.549 iterations 13
Cbc0038I Pass  45: suminf.    2.40000 (12) obj. 339.509 iterations 9
Cbc0038I Pass  46: suminf.    1.60000 (8) obj. 339.601 iterations 10
Cbc0038I Pass  47: suminf.    1.60000 (8) obj. 339.601 iterations 3
Cbc0038I Pass  48: suminf.    2.72903 (8) obj. 346.356 iterations 6
Cbc0038I Pass  49: suminf.    2.72903 (8) obj. 346.356 iterations 0
Cbc0038I Pass  50: suminf.    2.72903 (8) obj. 346.356 iterations 0
Cbc0038I Pass  51: suminf.    2.72903 (8) obj. 346.356 iterations 0
Cbc0038I Pass  52: suminf.    1.60000 (8) obj. 339.601 iterations 4
Cbc0038I Pass  53: suminf.    1.33978 (9) obj. 346.356 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 2 continuous
Cbc0038I Full problem 96 rows 81 columns, reduced to 18 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of 348.225 - took 0.01 seconds
Cbc0012I Integer solution of 348.22488 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 96 rows 81 columns, reduced to 74 rows 15 columns
Cbc0031I 8 added rows had average density of 9.375
Cbc0013I At root node, 8 cuts changed objective from 338.87842 to 338.87842 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 309 row cuts average 15.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 19 row cuts average 2.3 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 147 row cuts average 8.5 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 348.22488 best solution, best possible 338.87842 (0.05 seconds)
Cbc0001I Search completed - best objective 348.224878977649, took 260 iterations and 4 nodes (0.05 seconds)
Cbc0032I Strong branching done 84 times (306 iterations), fathomed 3 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 62 variables fixed on reduced cost
Cuts at root node changed objective from 338.878 to 338.878
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 100 times and created 309 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
TwoMirCuts was tried 100 times and created 147 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                348.22487898
Enumerated nodes:               4
Total iterations:               260
Time (CPU seconds):             0.05
Time (Wallclock seconds):       0.05

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.05



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/GTSP/10/city_10_instance_0/4/0/solution_r0.py", line 61, in <module>
    next_cities = [j for j in range(n) if pulp.value(x[current_city, j]) == 1]
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/GTSP/10/city_10_instance_0/4/0/solution_r0.py", line 61, in <listcomp>
    next_cities = [j for j in range(n) if pulp.value(x[current_city, j]) == 1]
                                                     ~^^^^^^^^^^^^^^^^^
KeyError: (0, 0)


