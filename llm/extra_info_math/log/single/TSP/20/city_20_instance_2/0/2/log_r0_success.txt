OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/bbef60ebe6354dfe94a6df077abde010-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/bbef60ebe6354dfe94a6df077abde010-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 387 COLUMNS
At line 3352 RHS
At line 3735 BOUNDS
At line 4135 ENDATA
Problem MODEL has 382 rows, 399 columns and 1786 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 335.13 - 0.00 seconds
Cgl0004I processed model has 382 rows, 399 columns (399 integer (380 of which binary)) and 1786 elements
Cbc0038I Initial state - 37 integers unsatisfied sum - 3.28947
Cbc0038I Pass   1: suminf.    3.39474 (30) obj. 367.619 iterations 61
Cbc0038I Pass   2: suminf.    1.89474 (7) obj. 662.228 iterations 44
Cbc0038I Pass   3: suminf.    1.89474 (4) obj. 655.018 iterations 11
Cbc0038I Pass   4: suminf.    3.89474 (16) obj. 649.536 iterations 30
Cbc0038I Pass   5: suminf.    1.89474 (8) obj. 542.698 iterations 46
Cbc0038I Pass   6: suminf.    1.89474 (11) obj. 586.4 iterations 25
Cbc0038I Pass   7: suminf.    1.89474 (7) obj. 554.224 iterations 37
Cbc0038I Pass   8: suminf.    1.89474 (8) obj. 555.81 iterations 16
Cbc0038I Pass   9: suminf.    1.89474 (7) obj. 588.886 iterations 33
Cbc0038I Pass  10: suminf.    2.84211 (6) obj. 591.971 iterations 15
Cbc0038I Pass  11: suminf.    1.89474 (11) obj. 589.463 iterations 27
Cbc0038I Pass  12: suminf.    1.89474 (8) obj. 585.243 iterations 34
Cbc0038I Pass  13: suminf.    1.89474 (8) obj. 585.243 iterations 12
Cbc0038I Pass  14: suminf.    1.89474 (11) obj. 537.683 iterations 22
Cbc0038I Pass  15: suminf.    2.21053 (10) obj. 581.381 iterations 12
Cbc0038I Pass  16: suminf.    1.89474 (18) obj. 583.31 iterations 20
Cbc0038I Pass  17: suminf.    1.89474 (14) obj. 578.939 iterations 60
Cbc0038I Pass  18: suminf.    4.64474 (27) obj. 591.989 iterations 23
Cbc0038I Pass  19: suminf.    1.89474 (6) obj. 584.573 iterations 54
Cbc0038I Pass  20: suminf.    1.89474 (12) obj. 582.371 iterations 13
Cbc0038I Pass  21: suminf.    2.89474 (12) obj. 590.18 iterations 33
Cbc0038I Pass  22: suminf.    1.89474 (15) obj. 569.223 iterations 55
Cbc0038I Pass  23: suminf.    2.52632 (11) obj. 488.844 iterations 21
Cbc0038I Pass  24: suminf.    1.89474 (15) obj. 486.633 iterations 23
Cbc0038I Pass  25: suminf.    2.89474 (15) obj. 567.143 iterations 38
Cbc0038I Pass  26: suminf.    0.00000 (0) obj. 902.028 iterations 122
Cbc0038I Solution found of 902.028
Cbc0038I Cleaned solution of 902.028
Cbc0038I Before mini branch and bound, 293 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 399 columns, reduced to 372 rows 98 columns - 5 fixed gives 360, 57 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 161 rows 57 columns
Cbc0038I Mini branch and bound improved solution from 902.028 to 614.959 (0.03 seconds)
Cbc0038I Round again with cutoff of 586.976
Cbc0038I Pass  27: suminf.    3.39474 (30) obj. 367.619 iterations 0
Cbc0038I Pass  28: suminf.    3.12130 (10) obj. 586.976 iterations 78
Cbc0038I Pass  29: suminf.    1.89474 (8) obj. 583.431 iterations 28
Cbc0038I Pass  30: suminf.    5.18560 (22) obj. 586.976 iterations 83
Cbc0038I Pass  31: suminf.    3.39474 (30) obj. 380.915 iterations 67
Cbc0038I Pass  32: suminf.    2.89474 (16) obj. 501.774 iterations 59
Cbc0038I Pass  33: suminf.    1.89474 (18) obj. 506.268 iterations 29
Cbc0038I Pass  34: suminf.    6.15741 (25) obj. 586.976 iterations 86
Cbc0038I Pass  35: suminf.    4.53835 (27) obj. 586.976 iterations 44
Cbc0038I Pass  36: suminf.    5.56140 (21) obj. 473.552 iterations 69
Cbc0038I Pass  37: suminf.    6.29474 (26) obj. 470.591 iterations 78
Cbc0038I Pass  38: suminf.    3.34586 (16) obj. 545.548 iterations 41
Cbc0038I Pass  39: suminf.    2.89474 (13) obj. 521.56 iterations 12
Cbc0038I Pass  40: suminf.    7.29474 (27) obj. 552.777 iterations 59
Cbc0038I Pass  41: suminf.    1.89474 (7) obj. 505.287 iterations 44
Cbc0038I Pass  42: suminf.    4.29474 (19) obj. 509.657 iterations 26
Cbc0038I Pass  43: suminf.    6.47006 (33) obj. 586.976 iterations 91
Cbc0038I Pass  44: suminf.    2.72268 (19) obj. 586.976 iterations 80
Cbc0038I Pass  45: suminf.    2.41741 (13) obj. 586.976 iterations 53
Cbc0038I Pass  46: suminf.    4.22371 (19) obj. 586.976 iterations 60
Cbc0038I Pass  47: suminf.    1.36842 (10) obj. 507.715 iterations 88
Cbc0038I Pass  48: suminf.    1.15789 (18) obj. 508.974 iterations 36
Cbc0038I Pass  49: suminf.    4.34739 (12) obj. 586.976 iterations 77
Cbc0038I Pass  50: suminf.    2.28569 (19) obj. 586.976 iterations 24
Cbc0038I Pass  51: suminf.    2.10526 (9) obj. 493.857 iterations 73
Cbc0038I Pass  52: suminf.    5.56140 (20) obj. 510.042 iterations 36
Cbc0038I Pass  53: suminf.    5.56528 (16) obj. 586.976 iterations 38
Cbc0038I Pass  54: suminf.    6.78972 (22) obj. 586.976 iterations 21
Cbc0038I Pass  55: suminf.    1.89474 (11) obj. 556.62 iterations 112
Cbc0038I Pass  56: suminf.    1.89474 (9) obj. 575.757 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 279 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 399 columns, reduced to 127 rows 111 columns
Cbc0038I Mini branch and bound improved solution from 614.959 to 588.936 (0.09 seconds)
Cbc0038I Round again with cutoff of 536.607
Cbc0038I Pass  56: suminf.    3.39474 (30) obj. 367.619 iterations 0
Cbc0038I Pass  57: suminf.    2.92773 (15) obj. 536.607 iterations 103
Cbc0038I Pass  58: suminf.    5.39474 (18) obj. 531.343 iterations 43
Cbc0038I Pass  59: suminf.    7.22577 (28) obj. 536.607 iterations 85
Cbc0038I Pass  60: suminf.    4.12546 (32) obj. 536.607 iterations 58
Cbc0038I Pass  61: suminf.    2.52632 (12) obj. 429.099 iterations 127
Cbc0038I Pass  62: suminf.    1.89474 (21) obj. 427.825 iterations 39
Cbc0038I Pass  63: suminf.    5.87726 (31) obj. 536.607 iterations 61
Cbc0038I Pass  64: suminf.    3.89673 (20) obj. 536.607 iterations 56
Cbc0038I Pass  65: suminf.    2.73684 (9) obj. 425.603 iterations 65
Cbc0038I Pass  66: suminf.    4.09474 (23) obj. 443.886 iterations 59
Cbc0038I Pass  67: suminf.    5.46535 (24) obj. 536.607 iterations 69
Cbc0038I Pass  68: suminf.    4.42460 (26) obj. 536.607 iterations 60
Cbc0038I Pass  69: suminf.    4.01754 (27) obj. 471.793 iterations 83
Cbc0038I Pass  70: suminf.    3.22807 (29) obj. 457.434 iterations 23
Cbc0038I Pass  71: suminf.    4.07706 (10) obj. 536.607 iterations 79
Cbc0038I Pass  72: suminf.    1.89474 (9) obj. 468.709 iterations 32
Cbc0038I Pass  73: suminf.    3.03523 (9) obj. 536.607 iterations 59
Cbc0038I Pass  74: suminf.    2.37613 (10) obj. 536.607 iterations 21
Cbc0038I Pass  75: suminf.    2.50854 (15) obj. 536.607 iterations 37
Cbc0038I Pass  76: suminf.    1.89474 (7) obj. 469.434 iterations 50
Cbc0038I Pass  77: suminf.    1.89474 (9) obj. 468.709 iterations 24
Cbc0038I Pass  78: suminf.    3.18307 (11) obj. 536.607 iterations 89
Cbc0038I Pass  79: suminf.    2.37613 (10) obj. 536.607 iterations 27
Cbc0038I Pass  80: suminf.    2.50854 (15) obj. 536.607 iterations 35
Cbc0038I Pass  81: suminf.    1.89474 (7) obj. 469.434 iterations 74
Cbc0038I Pass  82: suminf.    1.89474 (9) obj. 468.709 iterations 22
Cbc0038I Pass  83: suminf.    3.03523 (9) obj. 536.607 iterations 89
Cbc0038I Pass  84: suminf.    2.37613 (10) obj. 536.607 iterations 31
Cbc0038I Pass  85: suminf.    2.50854 (15) obj. 536.607 iterations 36
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 294 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 399 columns, reduced to 116 rows 99 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of 588.936 - took 0.15 seconds
Cbc0012I Integer solution of 588.93649 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 62 rows 46 columns
Cbc0031I 25 added rows had average density of 109.4
Cbc0013I At root node, 25 cuts changed objective from 335.12977 to 393.51326 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 260 row cuts average 2.5 elements, 0 column cuts (5 active)  in 0.075 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1372 row cuts average 307.2 elements, 0 column cuts (0 active)  in 0.064 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3 row cuts average 129.3 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 83 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 6 (TwoMirCuts) - 294 row cuts average 86.2 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 22 row cuts average 3.6 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 588.93649 best solution, best possible 393.51326 (0.64 seconds)
Cbc0012I Integer solution of 491.3474 found by DiveCoefficient after 4362 iterations and 37 nodes (0.85 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 343 rows 23 columns - 1 fixed gives 342, 21 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 84 rows 21 columns
Cbc0012I Integer solution of 446.98075 found by DiveCoefficient after 4562 iterations and 45 nodes (0.88 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 38 rows 28 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 33 rows 27 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 350 rows 31 columns - 1 fixed gives 346, 25 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 57 rows 22 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 25 rows 21 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 316 rows 27 columns - 2 fixed gives 310, 19 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 29 rows 23 columns
Cbc0016I Integer solution of 437.8315 found by strong branching after 34402 iterations and 802 nodes (2.17 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 346 rows 26 columns - 1 fixed gives 342, 20 - still too large
Cbc0010I After 1000 nodes, 120 on tree, 437.8315 best solution, best possible 393.51326 (2.43 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 354 rows 39 columns - 1 fixed gives 352, 35 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 80 rows 35 columns
Cbc0016I Integer solution of 431.16959 found by strong branching after 66573 iterations and 1768 nodes (3.45 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 346 rows 26 columns - 2 fixed gives 342, 20 - still too large
Cbc0010I After 2000 nodes, 4 on tree, 431.16959 best solution, best possible 393.51326 (3.82 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 348 rows 29 columns - 1 fixed gives 348, 28 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 37 rows 23 columns
Cbc0010I After 3000 nodes, 10 on tree, 431.16959 best solution, best possible 393.73742 (5.72 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 348 rows 29 columns - 2 fixed gives 343, 21 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 20 rows 19 columns
Cbc0010I After 4000 nodes, 97 on tree, 431.16959 best solution, best possible 393.73742 (7.08 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 40 rows 22 columns
Cbc0010I After 5000 nodes, 17 on tree, 431.16959 best solution, best possible 393.73742 (8.48 seconds)
Cbc0010I After 6000 nodes, 12 on tree, 431.16959 best solution, best possible 398.09746 (10.02 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 349 rows 31 columns - 2 fixed gives 346, 26 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 60 rows 26 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 50 rows 40 columns
Cbc0010I After 7000 nodes, 6 on tree, 431.16959 best solution, best possible 398.09746 (11.56 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 350 rows 32 columns - 1 fixed gives 350, 31 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 52 rows 31 columns
Cbc0010I After 8000 nodes, 11 on tree, 431.16959 best solution, best possible 398.85602 (13.07 seconds)
Cbc0001I Search completed - best objective 431.169591782657, took 309927 iterations and 8414 nodes (13.68 seconds)
Cbc0032I Strong branching done 10004 times (182555 iterations), fathomed 293 nodes and fixed 1108 variables
Cbc0035I Maximum depth 32, 70376 variables fixed on reduced cost
Cuts at root node changed objective from 335.13 to 393.513
Probing was tried 14844 times and created 175765 cuts of which 5 were active after adding rounds of cuts (1.688 seconds)
Gomory was tried 14038 times and created 4614 cuts of which 0 were active after adding rounds of cuts (1.097 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
FlowCover was tried 14038 times and created 8673 cuts of which 0 were active after adding rounds of cuts (1.159 seconds)
TwoMirCuts was tried 14038 times and created 14865 cuts of which 0 were active after adding rounds of cuts (0.577 seconds)
ZeroHalf was tried 100 times and created 22 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
ImplicationCuts was tried 2129 times and created 376 cuts of which 0 were active after adding rounds of cuts (0.028 seconds)

Result - Optimal solution found

Objective value:                431.16959178
Enumerated nodes:               8414
Total iterations:               309927
Time (CPU seconds):             13.65
Time (Wallclock seconds):       13.69

Option for printingOptions changed from normal to all
Total time (CPU seconds):       13.65   (Wallclock seconds):       13.69

Tour: [0, 6, 8, 10, 3, 4, 17, 1, 5, 2, 9, 15, 13, 18, 7, 11, 19, 16, 14, 12, 0]
Total travel cost: 431.17


ERROR:


