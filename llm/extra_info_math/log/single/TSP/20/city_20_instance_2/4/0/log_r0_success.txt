OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/7fd55a68248f443b9feb7b93a1540286-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/7fd55a68248f443b9feb7b93a1540286-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 387 COLUMNS
At line 3314 RHS
At line 3697 BOUNDS
At line 4097 ENDATA
Problem MODEL has 382 rows, 399 columns and 1786 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 334.916 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0004I processed model has 382 rows, 399 columns (380 integer (380 of which binary)) and 4864 elements
Cbc0038I Initial state - 36 integers unsatisfied sum - 2.78947
Cbc0038I Pass   1: suminf.    1.80000 (32) obj. 363.587 iterations 77
Cbc0038I Pass   2: suminf.    2.10000 (6) obj. 668.546 iterations 81
Cbc0038I Pass   3: suminf.    1.80000 (7) obj. 648.418 iterations 46
Cbc0038I Pass   4: suminf.    2.36842 (7) obj. 647.917 iterations 28
Cbc0038I Pass   5: suminf.    1.80000 (7) obj. 646.893 iterations 20
Cbc0038I Pass   6: suminf.    1.80000 (16) obj. 646.911 iterations 40
Cbc0038I Pass   7: suminf.    2.30000 (9) obj. 701.046 iterations 65
Cbc0038I Pass   8: suminf.    2.15000 (10) obj. 706.076 iterations 15
Cbc0038I Pass   9: suminf.    1.80000 (19) obj. 716.412 iterations 54
Cbc0038I Pass  10: suminf.    1.80000 (18) obj. 771.282 iterations 144
Cbc0038I Pass  11: suminf.    1.80000 (22) obj. 769.391 iterations 21
Cbc0038I Pass  12: suminf.    2.38000 (9) obj. 809.745 iterations 100
Cbc0038I Pass  13: suminf.    1.80000 (8) obj. 811.636 iterations 51
Cbc0038I Pass  14: suminf.    1.80000 (10) obj. 823.624 iterations 58
Cbc0038I Pass  15: suminf.    1.80000 (10) obj. 836.236 iterations 77
Cbc0038I Pass  16: suminf.    0.00000 (0) obj. 927.571 iterations 121
Cbc0038I Solution found of 927.571
Cbc0038I Relaxing continuous gives 927.571
Cbc0038I Before mini branch and bound, 284 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 399 columns, reduced to 373 rows 110 columns - 5 fixed gives 306, 78 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 274 rows 78 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I Round again with cutoff of 868.327
Cbc0038I Pass  17: suminf.    1.80000 (32) obj. 363.587 iterations 0
Cbc0038I Pass  18: suminf.    1.89474 (4) obj. 685.969 iterations 132
Cbc0038I Pass  19: suminf.    1.80000 (4) obj. 697.803 iterations 47
Cbc0038I Pass  20: suminf.    1.80000 (4) obj. 696.724 iterations 9
Cbc0038I Pass  21: suminf.    3.41862 (8) obj. 868.327 iterations 171
Cbc0038I Pass  22: suminf.    1.43263 (4) obj. 868.327 iterations 101
Cbc0038I Pass  23: suminf.    0.50476 (9) obj. 798.194 iterations 91
Cbc0038I Pass  24: suminf.    1.68623 (13) obj. 868.327 iterations 73
Cbc0038I Pass  25: suminf.    1.68623 (13) obj. 868.327 iterations 5
Cbc0038I Pass  26: suminf.    0.62105 (7) obj. 632.504 iterations 144
Cbc0038I Pass  27: suminf.    0.40000 (4) obj. 634.77 iterations 54
Cbc0038I Pass  28: suminf.    0.40506 (8) obj. 781.695 iterations 61
Cbc0038I Pass  29: suminf.    1.58627 (4) obj. 868.327 iterations 77
Cbc0038I Pass  30: suminf.    0.40000 (6) obj. 774.562 iterations 62
Cbc0038I Pass  31: suminf.    2.66667 (8) obj. 815.696 iterations 142
Cbc0038I Pass  32: suminf.    1.50000 (12) obj. 783.321 iterations 94
Cbc0038I Pass  33: suminf.    1.50000 (11) obj. 841.79 iterations 141
Cbc0038I Pass  34: suminf.    2.10000 (6) obj. 867.807 iterations 128
Cbc0038I Pass  35: suminf.    1.50000 (16) obj. 862.544 iterations 106
Cbc0038I Pass  36: suminf.    2.43569 (10) obj. 868.327 iterations 203
Cbc0038I Pass  37: suminf.    2.21179 (7) obj. 868.327 iterations 34
Cbc0038I Pass  38: suminf.    1.57758 (7) obj. 790.216 iterations 83
Cbc0038I Pass  39: suminf.    1.50000 (6) obj. 776.529 iterations 65
Cbc0038I Pass  40: suminf.    1.50000 (6) obj. 770.655 iterations 66
Cbc0038I Pass  41: suminf.    5.18437 (18) obj. 868.327 iterations 102
Cbc0038I Pass  42: suminf.    1.10000 (13) obj. 830.945 iterations 92
Cbc0038I Pass  43: suminf.    1.17994 (4) obj. 868.327 iterations 79
Cbc0038I Pass  44: suminf.    1.10000 (4) obj. 865.056 iterations 105
Cbc0038I Pass  45: suminf.    1.11186 (10) obj. 820.586 iterations 36
Cbc0038I Pass  46: suminf.    1.10000 (10) obj. 833.402 iterations 106
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 244 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 399 columns, reduced to 382 rows 155 columns - 2 fixed gives 343, 127 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 342 rows 127 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of 927.571 - took 0.07 seconds
Cbc0012I Integer solution of 927.5709 found by feasibility pump after 0 iterations and 0 nodes (0.14 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 366 rows 61 columns - 19 fixed gives 181, 19 - ok now
Cbc0031I 19 added rows had average density of 131.68421
Cbc0013I At root node, 19 cuts changed objective from 335.12977 to 393.51295 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 457 row cuts average 3.7 elements, 0 column cuts (1 active)  in 0.125 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1127 row cuts average 362.3 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 334 row cuts average 8.4 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 13 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 293 row cuts average 151.1 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 927.5709 best solution, best possible 393.51295 (0.73 seconds)
Cbc0012I Integer solution of 488.8182 found by DiveCoefficient after 3984 iterations and 11 nodes (0.88 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 303 rows 24 columns - 3 fixed gives 286, 19 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 302 rows 22 columns - 2 fixed gives 286, 20 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 315 rows 26 columns - 2 fixed gives 295, 20 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 327 rows 23 columns - 1 fixed gives 296, 22 - still too large
Cbc0004I Integer solution of 469.79969 found after 14092 iterations and 347 nodes (1.67 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 351 rows 37 columns - 1 fixed gives 345, 27 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 332 rows 26 columns - too large
Cbc0016I Integer solution of 447.24744 found by strong branching after 21310 iterations and 550 nodes (2.08 seconds)
Cbc0004I Integer solution of 431.16959 found after 22217 iterations and 571 nodes (2.13 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 331 rows 29 columns - 1 fixed gives 331, 28 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 126 rows 28 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 331 rows 25 columns - 5 fixed gives 308, 19 - still too large
Cbc0010I After 1000 nodes, 51 on tree, 431.16959 best solution, best possible 393.51295 (2.91 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 334 rows 29 columns - 1 fixed gives 324, 28 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 88 rows 28 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 342 rows 26 columns - 1 fixed gives 339, 23 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 77 rows 21 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 347 rows 31 columns - 6 fixed gives 329, 22 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 93 rows 22 columns
Cbc0010I After 2000 nodes, 9 on tree, 431.16959 best solution, best possible 393.51295 (4.97 seconds)
Cbc0010I After 3000 nodes, 10 on tree, 431.16959 best solution, best possible 393.59093 (7.22 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 350 rows 34 columns - 10 fixed gives 316, 21 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 54 rows 21 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 348 rows 32 columns - 1 fixed gives 342, 25 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 74 rows 22 columns
Cbc0010I After 4000 nodes, 14 on tree, 431.16959 best solution, best possible 393.59093 (8.92 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 349 rows 35 columns - 1 fixed gives 344, 27 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 263 rows 25 columns
Cbc0010I After 5000 nodes, 7 on tree, 431.16959 best solution, best possible 393.59093 (10.59 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 350 rows 34 columns - 1 fixed gives 324, 27 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 252 rows 25 columns
Cbc0038I Full problem 382 rows 399 columns, reduced to 339 rows 39 columns - 1 fixed gives 334, 30 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 304 rows 30 columns - too large
Cbc0010I After 6000 nodes, 7 on tree, 431.16959 best solution, best possible 393.59093 (12.35 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 347 rows 31 columns - 2 fixed gives 325, 21 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 54 rows 21 columns
Cbc0010I After 7000 nodes, 12 on tree, 431.16959 best solution, best possible 398.17334 (14.19 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 336 rows 26 columns - 8 fixed gives 310, 20 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 36 rows 20 columns
Cbc0010I After 8000 nodes, 6 on tree, 431.16959 best solution, best possible 398.17334 (15.86 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 348 rows 36 columns - 1 fixed gives 345, 30 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 160 rows 28 columns
Cbc0010I After 9000 nodes, 11 on tree, 431.16959 best solution, best possible 401.61758 (17.40 seconds)
Cbc0038I Full problem 382 rows 399 columns, reduced to 346 rows 30 columns - 1 fixed gives 340, 22 - still too large
Cbc0038I Full problem 382 rows 399 columns, reduced to 170 rows 22 columns
Cbc0010I After 10000 nodes, 3 on tree, 431.16959 best solution, best possible 414.13934 (19.05 seconds)
Cbc0001I Search completed - best objective 431.169591782657, took 375984 iterations and 10074 nodes (19.16 seconds)
Cbc0032I Strong branching done 11608 times (232189 iterations), fathomed 537 nodes and fixed 1388 variables
Cbc0035I Maximum depth 33, 74783 variables fixed on reduced cost
Cuts at root node changed objective from 335.13 to 393.513
Probing was tried 16878 times and created 170657 cuts of which 1 were active after adding rounds of cuts (2.399 seconds)
Gomory was tried 16179 times and created 1908 cuts of which 0 were active after adding rounds of cuts (1.213 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 16179 times and created 15386 cuts of which 0 were active after adding rounds of cuts (1.994 seconds)
FlowCover was tried 100 times and created 13 cuts of which 0 were active after adding rounds of cuts (0.023 seconds)
TwoMirCuts was tried 16179 times and created 5876 cuts of which 0 were active after adding rounds of cuts (1.073 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                431.16959178
Enumerated nodes:               10074
Total iterations:               375984
Time (CPU seconds):             19.14
Time (Wallclock seconds):       19.17

Option for printingOptions changed from normal to all
Total time (CPU seconds):       19.14   (Wallclock seconds):       19.17

Tour: [0, 12, 0]
Total travel cost: 14.422205101855956


ERROR:


