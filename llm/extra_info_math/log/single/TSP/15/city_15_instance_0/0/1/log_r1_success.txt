OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/684958d6f9834c0f8c53b2d9d17e14a8-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/684958d6f9834c0f8c53b2d9d17e14a8-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 217 COLUMNS
At line 1814 RHS
At line 2027 BOUNDS
At line 2252 ENDATA
Problem MODEL has 212 rows, 224 columns and 966 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 278.949 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0004I processed model has 212 rows, 224 columns (210 integer (210 of which binary)) and 2603 elements
Cbc0038I Initial state - 30 integers unsatisfied sum - 1.85537
Cbc0038I Pass   1: suminf.    0.11475 (25) obj. 281.333 iterations 44
Cbc0038I Pass   2: suminf.    0.13129 (13) obj. 606.365 iterations 137
Cbc0038I Pass   3: suminf.    0.10667 (8) obj. 606.161 iterations 10
Cbc0038I Pass   4: suminf.    0.10667 (10) obj. 674.604 iterations 87
Cbc0038I Pass   5: suminf.    0.10667 (8) obj. 620.554 iterations 68
Cbc0038I Pass   6: suminf.    0.10667 (6) obj. 696.488 iterations 38
Cbc0038I Pass   7: suminf.    0.10667 (12) obj. 736.653 iterations 49
Cbc0038I Pass   8: suminf.    0.10667 (6) obj. 779.846 iterations 65
Cbc0038I Pass   9: suminf.    0.10667 (8) obj. 729.056 iterations 36
Cbc0038I Pass  10: suminf.    0.10667 (12) obj. 774.431 iterations 56
Cbc0038I Pass  11: suminf.    0.10667 (9) obj. 672.018 iterations 68
Cbc0038I Pass  12: suminf.    0.16000 (6) obj. 691.066 iterations 23
Cbc0038I Pass  13: suminf.    0.10667 (4) obj. 691.322 iterations 42
Cbc0038I Pass  14: suminf.    0.10667 (4) obj. 701.319 iterations 21
Cbc0038I Pass  15: suminf.    0.10667 (6) obj. 732.52 iterations 44
Cbc0038I Pass  16: suminf.    0.11111 (17) obj. 746.013 iterations 59
Cbc0038I Pass  17: suminf.    0.00000 (0) obj. 792.214 iterations 73
Cbc0038I Solution found of 792.214
Cbc0038I Relaxing continuous gives 792.214
Cbc0038I Before mini branch and bound, 137 integers at bound fixed and 0 continuous
Cbc0038I Full problem 212 rows 224 columns, reduced to 211 rows 86 columns - 8 fixed gives 82, 18 - ok now
Cbc0038I Full problem 212 rows 224 columns, reduced to 11 rows 9 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of 741.014
Cbc0038I Pass  18: suminf.    0.11475 (25) obj. 281.333 iterations 0
Cbc0038I Pass  19: suminf.    0.10667 (9) obj. 537.249 iterations 93
Cbc0038I Pass  20: suminf.    0.10667 (12) obj. 538.123 iterations 18
Cbc0038I Pass  21: suminf.    0.10667 (4) obj. 692.77 iterations 78
Cbc0038I Pass  22: suminf.    0.10667 (4) obj. 694.253 iterations 17
Cbc0038I Pass  23: suminf.    0.10667 (7) obj. 692.499 iterations 29
Cbc0038I Pass  24: suminf.    0.10667 (4) obj. 692.77 iterations 30
Cbc0038I Pass  25: suminf.    0.41477 (21) obj. 682.159 iterations 126
Cbc0038I Pass  26: suminf.    0.09778 (18) obj. 682.183 iterations 77
Cbc0038I Pass  27: suminf.    3.68753 (8) obj. 741.014 iterations 56
Cbc0038I Pass  28: suminf.    0.09778 (7) obj. 643.057 iterations 68
Cbc0038I Pass  29: suminf.    1.74255 (4) obj. 741.014 iterations 43
Cbc0038I Pass  30: suminf.    0.09778 (11) obj. 707.72 iterations 38
Cbc0038I Pass  31: suminf.    0.09778 (11) obj. 723.336 iterations 57
Cbc0038I Pass  32: suminf.    0.09778 (11) obj. 724.09 iterations 29
Cbc0038I Pass  33: suminf.    0.44588 (12) obj. 741.014 iterations 85
Cbc0038I Pass  34: suminf.    0.40463 (10) obj. 741.014 iterations 22
Cbc0038I Pass  35: suminf.    0.09778 (4) obj. 573.193 iterations 50
Cbc0038I Pass  36: suminf.    0.09778 (10) obj. 573.887 iterations 36
Cbc0038I Pass  37: suminf.    0.39102 (17) obj. 741.014 iterations 119
Cbc0038I Pass  38: suminf.    0.20670 (7) obj. 492.755 iterations 61
Cbc0038I Pass  39: suminf.    0.09778 (15) obj. 491.546 iterations 32
Cbc0038I Pass  40: suminf.    1.90582 (11) obj. 741.014 iterations 83
Cbc0038I Pass  41: suminf.    1.90277 (11) obj. 741.014 iterations 5
Cbc0038I Pass  42: suminf.    0.16000 (4) obj. 569.108 iterations 87
Cbc0038I Pass  43: suminf.    0.09778 (14) obj. 571.163 iterations 42
Cbc0038I Pass  44: suminf.    0.09778 (12) obj. 719.44 iterations 106
Cbc0038I Pass  45: suminf.    0.09778 (7) obj. 738.379 iterations 93
Cbc0038I Pass  46: suminf.    0.10667 (4) obj. 640.324 iterations 21
Cbc0038I Pass  47: suminf.    0.09778 (9) obj. 639.893 iterations 18
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 104 integers at bound fixed and 0 continuous
Cbc0038I Full problem 212 rows 224 columns, reduced to 212 rows 120 columns - 3 fixed gives 184, 83 - still too large
Cbc0038I Full problem 212 rows 224 columns, reduced to 181 rows 83 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of 792.214 - took 0.04 seconds
Cbc0012I Integer solution of 792.21381 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 212 rows 224 columns, reduced to 205 rows 50 columns - 15 fixed gives 76, 14 - ok now
Cbc0031I 20 added rows had average density of 78.9
Cbc0013I At root node, 20 cuts changed objective from 280.21411 to 319.40109 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 468 row cuts average 3.7 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 612 row cuts average 190.4 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 378 row cuts average 36.5 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 69 row cuts average 5.9 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 6 (TwoMirCuts) - 246 row cuts average 92.1 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 792.21381 best solution, best possible 319.40109 (0.32 seconds)
Cbc0012I Integer solution of 395.6438 found by DiveCoefficient after 3738 iterations and 13 nodes (0.40 seconds)
Cbc0016I Integer solution of 395.22666 found by strong branching after 3748 iterations and 13 nodes (0.41 seconds)
Cbc0016I Integer solution of 372.72181 found by strong branching after 4583 iterations and 34 nodes (0.46 seconds)
Cbc0016I Integer solution of 365.46696 found by strong branching after 8397 iterations and 94 nodes (0.68 seconds)
Cbc0004I Integer solution of 334.55745 found after 9040 iterations and 102 nodes (0.72 seconds)
Cbc0038I Full problem 212 rows 224 columns, reduced to 179 rows 25 columns - 3 fixed gives 177, 22 - still too large
Cbc0038I Full problem 212 rows 224 columns, reduced to 147 rows 19 columns
Cbc0001I Search completed - best objective 334.5574454652251, took 18489 iterations and 224 nodes (1.01 seconds)
Cbc0032I Strong branching done 2550 times (43455 iterations), fathomed 25 nodes and fixed 31 variables
Cbc0035I Maximum depth 23, 3143 variables fixed on reduced cost
Cuts at root node changed objective from 280.214 to 319.401
Probing was tried 599 times and created 4624 cuts of which 0 were active after adding rounds of cuts (0.123 seconds)
Gomory was tried 590 times and created 717 cuts of which 0 were active after adding rounds of cuts (0.057 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 590 times and created 1623 cuts of which 0 were active after adding rounds of cuts (0.073 seconds)
FlowCover was tried 590 times and created 441 cuts of which 0 were active after adding rounds of cuts (0.056 seconds)
TwoMirCuts was tried 590 times and created 490 cuts of which 0 were active after adding rounds of cuts (0.063 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ImplicationCuts was tried 161 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                334.55744547
Enumerated nodes:               224
Total iterations:               18489
Time (CPU seconds):             1.01
Time (Wallclock seconds):       1.01

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.01   (Wallclock seconds):       1.01

Tour: [8, 10, 1, 9, 11, 14, 12, 4, 7, 13, 3, 5, 6, 2, 0, 0]
Total travel cost: 314.8343625419059


ERROR:


