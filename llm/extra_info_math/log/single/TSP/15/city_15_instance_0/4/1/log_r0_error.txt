OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/0276856be9624325bf9a6902fbec8333-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/0276856be9624325bf9a6902fbec8333-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 217 COLUMNS
At line 1842 RHS
At line 2055 BOUNDS
At line 2280 ENDATA
Problem MODEL has 212 rows, 224 columns and 966 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 282.984 - 0.00 seconds
Cgl0004I processed model has 212 rows, 224 columns (224 integer (210 of which binary)) and 966 elements
Cbc0038I Initial state - 18 integers unsatisfied sum - 2.57143
Cbc0038I Pass   1: suminf.    1.71429 (12) obj. 302.953 iterations 37
Cbc0038I Pass   2: suminf.    5.04762 (17) obj. 432.663 iterations 31
Cbc0038I Pass   3: suminf.    3.31429 (13) obj. 401.122 iterations 21
Cbc0038I Pass   4: suminf.    3.71429 (15) obj. 403 iterations 20
Cbc0038I Pass   5: suminf.    1.71429 (7) obj. 448.031 iterations 19
Cbc0038I Pass   6: suminf.    1.71429 (11) obj. 459.146 iterations 12
Cbc0038I Pass   7: suminf.    1.71429 (9) obj. 410.077 iterations 24
Cbc0038I Pass   8: suminf.    1.71429 (13) obj. 411.557 iterations 14
Cbc0038I Pass   9: suminf.    1.71429 (6) obj. 452.113 iterations 22
Cbc0038I Pass  10: suminf.    5.04762 (17) obj. 432.663 iterations 14
Cbc0038I Pass  11: suminf.    3.31429 (13) obj. 401.122 iterations 21
Cbc0038I Pass  12: suminf.    3.71429 (15) obj. 403 iterations 18
Cbc0038I Pass  13: suminf.    1.71429 (7) obj. 448.031 iterations 20
Cbc0038I Pass  14: suminf.    1.71429 (11) obj. 459.146 iterations 11
Cbc0038I Pass  15: suminf.    1.71429 (9) obj. 410.077 iterations 27
Cbc0038I Pass  16: suminf.    1.71429 (13) obj. 411.557 iterations 22
Cbc0038I Pass  17: suminf.    1.71429 (6) obj. 452.113 iterations 26
Cbc0038I Pass  18: suminf.    5.04762 (17) obj. 432.663 iterations 17
Cbc0038I Pass  19: suminf.    3.31429 (13) obj. 401.122 iterations 21
Cbc0038I Pass  20: suminf.    3.71429 (15) obj. 403 iterations 19
Cbc0038I Pass  21: suminf.    1.71429 (7) obj. 448.031 iterations 20
Cbc0038I Pass  22: suminf.    1.71429 (11) obj. 459.146 iterations 11
Cbc0038I Pass  23: suminf.    4.38095 (17) obj. 422.146 iterations 18
Cbc0038I Pass  24: suminf.    4.38095 (19) obj. 418.946 iterations 16
Cbc0038I Pass  25: suminf.    1.71429 (13) obj. 447.02 iterations 21
Cbc0038I Pass  26: suminf.    1.71429 (9) obj. 408.829 iterations 32
Cbc0038I Pass  27: suminf.    2.57143 (14) obj. 602.897 iterations 77
Cbc0038I Pass  28: suminf.    4.09524 (17) obj. 584.734 iterations 37
Cbc0038I Pass  29: suminf.    2.76190 (10) obj. 555.574 iterations 32
Cbc0038I Pass  30: suminf.    1.42857 (4) obj. 539.87 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 156 integers at bound fixed and 0 continuous
Cbc0038I Full problem 212 rows 224 columns, reduced to 71 rows 59 columns
Cbc0038I Mini branch and bound improved solution from 1.79769e+308 to 397.354 (0.03 seconds)
Cbc0038I Round again with cutoff of 385.917
Cbc0038I Pass  30: suminf.    1.71429 (12) obj. 302.953 iterations 0
Cbc0038I Pass  31: suminf.    3.22896 (13) obj. 385.917 iterations 52
Cbc0038I Pass  32: suminf.    1.71429 (8) obj. 337.389 iterations 35
Cbc0038I Pass  33: suminf.    3.71429 (20) obj. 298.886 iterations 21
Cbc0038I Pass  34: suminf.    2.28571 (12) obj. 384.156 iterations 62
Cbc0038I Pass  35: suminf.    2.71429 (16) obj. 379.517 iterations 35
Cbc0038I Pass  36: suminf.    5.47817 (18) obj. 385.917 iterations 36
Cbc0038I Pass  37: suminf.    3.22896 (13) obj. 385.917 iterations 19
Cbc0038I Pass  38: suminf.    1.71429 (8) obj. 337.389 iterations 34
Cbc0038I Pass  39: suminf.    3.04762 (18) obj. 298.886 iterations 28
Cbc0038I Pass  40: suminf.    2.28571 (12) obj. 384.156 iterations 41
Cbc0038I Pass  41: suminf.    2.71429 (16) obj. 379.517 iterations 37
Cbc0038I Pass  42: suminf.    5.66904 (18) obj. 385.917 iterations 53
Cbc0038I Pass  43: suminf.    3.22896 (13) obj. 385.917 iterations 18
Cbc0038I Pass  44: suminf.    1.71429 (8) obj. 337.389 iterations 39
Cbc0038I Pass  45: suminf.    3.04762 (18) obj. 298.886 iterations 34
Cbc0038I Pass  46: suminf.    2.28571 (12) obj. 384.156 iterations 54
Cbc0038I Pass  47: suminf.    2.71429 (16) obj. 379.517 iterations 28
Cbc0038I Pass  48: suminf.    2.28589 (19) obj. 385.917 iterations 46
Cbc0038I Pass  49: suminf.    3.65475 (18) obj. 385.917 iterations 18
Cbc0038I Pass  50: suminf.    1.71429 (11) obj. 304.331 iterations 37
Cbc0038I Pass  51: suminf.    1.71429 (12) obj. 309.216 iterations 15
Cbc0038I Pass  52: suminf.    4.82883 (17) obj. 385.917 iterations 42
Cbc0038I Pass  53: suminf.    1.71429 (8) obj. 337.389 iterations 37
Cbc0038I Pass  54: suminf.    3.04762 (18) obj. 298.886 iterations 36
Cbc0038I Pass  55: suminf.    2.28571 (12) obj. 384.156 iterations 49
Cbc0038I Pass  56: suminf.    2.71429 (16) obj. 379.517 iterations 18
Cbc0038I Pass  57: suminf.    6.27208 (20) obj. 385.917 iterations 45
Cbc0038I Pass  58: suminf.    4.82947 (17) obj. 385.917 iterations 21
Cbc0038I Pass  59: suminf.    1.71429 (8) obj. 337.389 iterations 43
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 176 integers at bound fixed and 0 continuous
Cbc0038I Full problem 212 rows 224 columns, reduced to 40 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of 397.354 - took 0.05 seconds
Cbc0012I Integer solution of 397.35356 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0031I 14 added rows had average density of 71.142857
Cbc0013I At root node, 14 cuts changed objective from 282.98412 to 318.94112 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 262 row cuts average 3.7 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1250 row cuts average 154.5 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 21 row cuts average 134.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 72 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 274 row cuts average 40.9 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 397.35356 best solution, best possible 318.94112 (0.24 seconds)
Cbc0012I Integer solution of 371.54675 found by DiveCoefficient after 2588 iterations and 4 nodes (0.27 seconds)
Cbc0038I Full problem 212 rows 224 columns, reduced to 35 rows 25 columns
Cbc0016I Integer solution of 364.68711 found by strong branching after 3919 iterations and 42 nodes (0.35 seconds)
Cbc0038I Full problem 226 rows 224 columns, reduced to 212 rows 183 columns - too large
Cbc0004I Integer solution of 351.85102 found after 4398 iterations and 53 nodes (0.37 seconds)
Cbc0004I Integer solution of 334.55745 found after 4884 iterations and 58 nodes (0.39 seconds)
Cbc0001I Search completed - best objective 334.5574454652251, took 6376 iterations and 82 nodes (0.46 seconds)
Cbc0032I Strong branching done 1236 times (17371 iterations), fathomed 10 nodes and fixed 16 variables
Cbc0035I Maximum depth 16, 1145 variables fixed on reduced cost
Cuts at root node changed objective from 282.984 to 318.941
Probing was tried 292 times and created 2413 cuts of which 0 were active after adding rounds of cuts (0.057 seconds)
Gomory was tried 285 times and created 1424 cuts of which 0 were active after adding rounds of cuts (0.039 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
FlowCover was tried 100 times and created 72 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
TwoMirCuts was tried 285 times and created 837 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ImplicationCuts was tried 144 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                334.55744547
Enumerated nodes:               82
Total iterations:               6376
Time (CPU seconds):             0.46
Time (Wallclock seconds):       0.46

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.46   (Wallclock seconds):       0.46



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/TSP/15/city_15_instance_0/4/1/solution_r0.py", line 62, in <module>
    next_city = [j for j in range(n) if pulp.value(x[next_city, j]) == 1][0]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/TSP/15/city_15_instance_0/4/1/solution_r0.py", line 62, in <listcomp>
    next_city = [j for j in range(n) if pulp.value(x[next_city, j]) == 1][0]
                                                   ~^^^^^^^^^^^^^^
KeyError: (0, 0)


