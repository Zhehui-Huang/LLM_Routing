OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/d34fcdfe35714bc9aa0257c374936ca8-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/d34fcdfe35714bc9aa0257c374936ca8-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 217 COLUMNS
At line 1814 RHS
At line 2027 BOUNDS
At line 2252 ENDATA
Problem MODEL has 212 rows, 224 columns and 966 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 252.987 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0004I processed model has 212 rows, 224 columns (210 integer (210 of which binary)) and 2604 elements
Cbc0038I Initial state - 26 integers unsatisfied sum - 2.64286
Cbc0038I Pass   1: suminf.    1.73333 (17) obj. 280.133 iterations 46
Cbc0038I Pass   2: suminf.    2.53333 (7) obj. 517.844 iterations 48
Cbc0038I Pass   3: suminf.    1.74713 (17) obj. 521.638 iterations 38
Cbc0038I Pass   4: suminf.    1.80000 (10) obj. 570.08 iterations 59
Cbc0038I Pass   5: suminf.    1.73333 (11) obj. 585.164 iterations 33
Cbc0038I Pass   6: suminf.    2.13333 (9) obj. 623.221 iterations 43
Cbc0038I Pass   7: suminf.    1.73333 (17) obj. 638.446 iterations 30
Cbc0038I Pass   8: suminf.    2.55172 (8) obj. 568.237 iterations 44
Cbc0038I Pass   9: suminf.    1.73333 (12) obj. 557.718 iterations 50
Cbc0038I Pass  10: suminf.    1.92982 (10) obj. 494 iterations 46
Cbc0038I Pass  11: suminf.    1.73333 (10) obj. 502.947 iterations 37
Cbc0038I Pass  12: suminf.    1.73333 (13) obj. 564.967 iterations 57
Cbc0038I Pass  13: suminf.    1.83251 (7) obj. 578.061 iterations 63
Cbc0038I Pass  14: suminf.    1.73333 (17) obj. 560.461 iterations 38
Cbc0038I Pass  15: suminf.    1.85714 (7) obj. 608.327 iterations 64
Cbc0038I Pass  16: suminf.    1.73333 (6) obj. 637.143 iterations 23
Cbc0038I Pass  17: suminf.    1.73612 (15) obj. 659.31 iterations 24
Cbc0038I Pass  18: suminf.    2.75238 (12) obj. 595.437 iterations 62
Cbc0038I Pass  19: suminf.    1.77887 (19) obj. 580.732 iterations 16
Cbc0038I Pass  20: suminf.    1.74242 (19) obj. 557.888 iterations 30
Cbc0038I Pass  21: suminf.    1.79225 (7) obj. 597.492 iterations 55
Cbc0038I Pass  22: suminf.    1.73677 (13) obj. 590.071 iterations 25
Cbc0038I Pass  23: suminf.    2.06667 (7) obj. 595.165 iterations 52
Cbc0038I Pass  24: suminf.    1.75111 (7) obj. 613.643 iterations 17
Cbc0038I Pass  25: suminf.    1.76061 (10) obj. 634.539 iterations 36
Cbc0038I Pass  26: suminf.    1.73333 (4) obj. 692.778 iterations 63
Cbc0038I Pass  27: suminf.    1.73333 (8) obj. 694.703 iterations 52
Cbc0038I Pass  28: suminf.    1.73333 (12) obj. 675.587 iterations 51
Cbc0038I Pass  29: suminf.    1.73333 (8) obj. 635.33 iterations 50
Cbc0038I Pass  30: suminf.    1.73333 (8) obj. 618.044 iterations 29
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 132 integers at bound fixed and 1 continuous
Cbc0038I Full problem 212 rows 224 columns, reduced to 169 rows 84 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Full problem 213 rows 224 columns, reduced to 213 rows 224 columns - too large
Cbc0038I After 0.05 seconds - Feasibility pump exiting - took 0.02 seconds
Cbc0031I 9 added rows had average density of 96
Cbc0013I At root node, 9 cuts changed objective from 253.03707 to 292.19472 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 678 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.056 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 889 row cuts average 184.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 373 row cuts average 25.3 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 46 row cuts average 3.6 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 315 row cuts average 67.2 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 292.19472 (0.29 seconds)
Cbc0016I Integer solution of 344.59043 found by strong branching after 4578 iterations and 16 nodes (0.38 seconds)
Cbc0038I Full problem 212 rows 224 columns, reduced to 78 rows 16 columns
Cbc0038I Full problem 212 rows 224 columns, reduced to 173 rows 17 columns - 4 fixed gives 145, 14 - ok now
Cbc0016I Integer solution of 343.41089 found by strong branching after 5172 iterations and 43 nodes (0.43 seconds)
Cbc0016I Integer solution of 342.4615 found by strong branching after 5386 iterations and 52 nodes (0.44 seconds)
Cbc0016I Integer solution of 324.60478 found by strong branching after 5737 iterations and 68 nodes (0.47 seconds)
Cbc0016I Integer solution of 322.52664 found by strong branching after 5986 iterations and 77 nodes (0.49 seconds)
Cbc0016I Integer solution of 322.31314 found by strong branching after 6164 iterations and 82 nodes (0.50 seconds)
Cbc0016I Integer solution of 318.07446 found by strong branching after 6294 iterations and 89 nodes (0.51 seconds)
Cbc0038I Full problem 212 rows 224 columns, reduced to 191 rows 33 columns - 2 fixed gives 188, 27 - still too large
Cbc0038I Full problem 212 rows 224 columns, reduced to 160 rows 27 columns - too large
Cbc0012I Integer solution of 316.11632 found by DiveCoefficient after 13648 iterations and 192 nodes (0.75 seconds)
Cbc0016I Integer solution of 311.87764 found by strong branching after 15584 iterations and 213 nodes (0.81 seconds)
Cbc0038I Full problem 212 rows 224 columns, reduced to 186 rows 38 columns - 3 fixed gives 171, 22 - still too large
Cbc0038I Full problem 212 rows 224 columns, reduced to 69 rows 17 columns
Cbc0038I Full problem 212 rows 224 columns, reduced to 187 rows 37 columns - 3 fixed gives 178, 23 - still too large
Cbc0038I Full problem 212 rows 224 columns, reduced to 129 rows 21 columns
Cbc0038I Full problem 212 rows 224 columns, reduced to 193 rows 32 columns - 3 fixed gives 188, 23 - still too large
Cbc0038I Full problem 212 rows 224 columns, reduced to 168 rows 23 columns - too large
Cbc0001I Search completed - best objective 311.877641807883, took 71484 iterations and 1666 nodes (2.17 seconds)
Cbc0032I Strong branching done 6668 times (117457 iterations), fathomed 136 nodes and fixed 135 variables
Cbc0041I Maximum depth 17, 6122 variables fixed on reduced cost (complete fathoming 46 times, 874 nodes taking 21171 iterations)
Cuts at root node changed objective from 253.037 to 292.195
Probing was tried 1840 times and created 18636 cuts of which 0 were active after adding rounds of cuts (0.251 seconds)
Gomory was tried 1787 times and created 1094 cuts of which 0 were active after adding rounds of cuts (0.127 seconds)
Knapsack was tried 100 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 1787 times and created 3786 cuts of which 0 were active after adding rounds of cuts (0.183 seconds)
FlowCover was tried 100 times and created 46 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
TwoMirCuts was tried 1787 times and created 1554 cuts of which 0 were active after adding rounds of cuts (0.083 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                311.87764181
Enumerated nodes:               1666
Total iterations:               71484
Time (CPU seconds):             2.17
Time (Wallclock seconds):       2.18

Option for printingOptions changed from normal to all
Total time (CPU seconds):       2.17   (Wallclock seconds):       2.18



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/TSP/15/city_15_instance_2/4/2/solution_r2.py", line 63, in <module>
    next_city = next(j for j in range(n) if i != j and pulp.value(x[current_city, j]) == 1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/TSP/15/city_15_instance_2/4/2/solution_r2.py", line 63, in <genexpr>
    next_city = next(j for j in range(n) if i != j and pulp.value(x[current_city, j]) == 1)
                                                                  ~^^^^^^^^^^^^^^^^^
KeyError: (0, 0)


