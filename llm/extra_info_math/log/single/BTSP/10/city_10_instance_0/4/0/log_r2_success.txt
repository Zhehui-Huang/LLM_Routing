OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/23094d4af52b4b2ba15ce3ae744d30de-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/23094d4af52b4b2ba15ce3ae744d30de-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 187 COLUMNS
At line 963 RHS
At line 1146 BOUNDS
At line 1246 ENDATA
Problem MODEL has 182 rows, 100 columns and 576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 5.63264 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0004I processed model has 182 rows, 100 columns (99 integer (90 of which binary)) and 1080 elements
Cbc0038I Initial state - 74 integers unsatisfied sum - 10
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 77.5242 iterations 96
Cbc0038I Solution found of 77.5242
Cbc0038I Relaxing continuous gives 77.5242
Cbc0038I Cleaned solution of 77.5242
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 167 rows 85 columns - 5 fixed gives 53, 31 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 46 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 70.335
Cbc0038I Pass   2: suminf.    2.56116 (14) obj. 70.335 iterations 1
Cbc0038I Pass   3: suminf.    1.85945 (10) obj. 70.335 iterations 10
Cbc0038I Pass   4: suminf.    0.66667 (6) obj. 70.335 iterations 43
Cbc0038I Pass   5: suminf.    0.66667 (6) obj. 70.335 iterations 28
Cbc0038I Pass   6: suminf.    4.17778 (18) obj. 70.335 iterations 40
Cbc0038I Pass   7: suminf.    2.77778 (9) obj. 70.335 iterations 19
Cbc0038I Pass   8: suminf.    1.77778 (8) obj. 70.335 iterations 12
Cbc0038I Pass   9: suminf.    1.77778 (8) obj. 70.335 iterations 20
Cbc0038I Pass  10: suminf.    1.33333 (12) obj. 70.335 iterations 35
Cbc0038I Pass  11: suminf.    0.80000 (4) obj. 70.335 iterations 17
Cbc0038I Pass  12: suminf.    0.00000 (0) obj. 70.335 iterations 24
Cbc0038I Solution found of 70.335
Cbc0038I Relaxing continuous gives 68.7314
Cbc0038I Cleaned solution of 68.7314
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 174 rows 92 columns - 1 fixed gives 157, 79 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 56.1116
Cbc0038I Pass  13: suminf.    3.13740 (16) obj. 56.1116 iterations 2
Cbc0038I Pass  14: suminf.    2.86782 (13) obj. 56.1116 iterations 11
Cbc0038I Pass  15: suminf.    3.16667 (9) obj. 56.1116 iterations 26
Cbc0038I Pass  16: suminf.    2.72901 (14) obj. 56.1116 iterations 18
Cbc0038I Pass  17: suminf.    3.19969 (12) obj. 56.1116 iterations 33
Cbc0038I Pass  18: suminf.    3.48058 (16) obj. 56.1116 iterations 20
Cbc0038I Pass  19: suminf.    2.66667 (8) obj. 56.1116 iterations 35
Cbc0038I Pass  20: suminf.    3.35746 (13) obj. 56.1116 iterations 21
Cbc0038I Pass  21: suminf.    1.65357 (12) obj. 56.1116 iterations 29
Cbc0038I Pass  22: suminf.    1.65357 (12) obj. 56.1116 iterations 1
Cbc0038I Pass  23: suminf.    2.00000 (8) obj. 56.1116 iterations 29
Cbc0038I Pass  24: suminf.    1.65357 (12) obj. 56.1116 iterations 20
Cbc0038I Pass  25: suminf.    1.33333 (4) obj. 56.1116 iterations 18
Cbc0038I Pass  26: suminf.    2.80722 (16) obj. 56.1116 iterations 39
Cbc0038I Pass  27: suminf.    2.11111 (11) obj. 56.1116 iterations 19
Cbc0038I Pass  28: suminf.    3.05460 (18) obj. 56.1116 iterations 31
Cbc0038I Pass  29: suminf.    1.77591 (15) obj. 56.1116 iterations 36
Cbc0038I Pass  30: suminf.    2.53257 (12) obj. 56.1116 iterations 18
Cbc0038I Pass  31: suminf.    2.56313 (15) obj. 56.1116 iterations 27
Cbc0038I Pass  32: suminf.    2.60607 (20) obj. 56.1116 iterations 14
Cbc0038I Pass  33: suminf.    1.77778 (8) obj. 56.1116 iterations 33
Cbc0038I Pass  34: suminf.    2.42424 (10) obj. 56.1116 iterations 12
Cbc0038I Pass  35: suminf.    1.33333 (6) obj. 56.1116 iterations 19
Cbc0038I Pass  36: suminf.    1.34674 (16) obj. 56.1116 iterations 18
Cbc0038I Pass  37: suminf.    1.90264 (12) obj. 56.1116 iterations 40
Cbc0038I Pass  38: suminf.    1.42256 (12) obj. 56.1116 iterations 7
Cbc0038I Pass  39: suminf.    4.16702 (14) obj. 56.1116 iterations 18
Cbc0038I Pass  40: suminf.    1.42256 (12) obj. 56.1116 iterations 12
Cbc0038I Pass  41: suminf.    2.83723 (16) obj. 56.1116 iterations 25
Cbc0038I Pass  42: suminf.    3.17485 (22) obj. 56.1116 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 174 rows 92 columns - 1 fixed gives 158, 81 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 68.7314 - took 0.03 seconds
Cbc0012I Integer solution of 68.731361 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 23 added rows had average density of 25.695652
Cbc0013I At root node, 23 cuts changed objective from 5.6326367 to 38.470385 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2790 row cuts average 4.1 elements, 3 column cuts (3 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1669 row cuts average 59.6 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 138 row cuts average 15.1 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 20 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 421 row cuts average 18.4 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 68.731361 best solution, best possible 38.470385 (0.24 seconds)
Cbc0004I Integer solution of 45.188494 found after 5692 iterations and 11 nodes (0.33 seconds)
Cbc0001I Search completed - best objective 45.18849411078, took 6394 iterations and 22 nodes (0.34 seconds)
Cbc0032I Strong branching done 418 times (8554 iterations), fathomed 2 nodes and fixed 4 variables
Cbc0035I Maximum depth 9, 0 variables fixed on reduced cost
Cuts at root node changed objective from 5.63264 to 38.4704
Probing was tried 158 times and created 3514 cuts of which 0 were active after adding rounds of cuts (0.051 seconds)
Gomory was tried 156 times and created 1722 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 156 times and created 145 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
FlowCover was tried 100 times and created 20 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 156 times and created 636 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ImplicationCuts was tried 56 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                45.18849411
Enumerated nodes:               22
Total iterations:               6394
Time (CPU seconds):             0.35
Time (Wallclock seconds):       0.35

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.35   (Wallclock seconds):       0.35

Tour: [0, 2, 4, 3, 8, 9, 7, 5, 1, 6, 0]
Total travel cost: 336.4015755047926
Maximum distance between consecutive cities: 45.18849411078001


ERROR:


