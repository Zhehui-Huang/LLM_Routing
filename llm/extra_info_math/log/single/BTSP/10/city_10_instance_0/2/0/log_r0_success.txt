OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/7d9f7d44e3d34a48a48f48ea10c85eca-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/7d9f7d44e3d34a48a48f48ea10c85eca-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 187 COLUMNS
At line 945 RHS
At line 1128 BOUNDS
At line 1219 ENDATA
Problem MODEL has 182 rows, 100 columns and 576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 5.63264 - 0.00 seconds
Cgl0004I processed model has 182 rows, 100 columns (90 integer (90 of which binary)) and 576 elements
Cbc0038I Initial state - 74 integers unsatisfied sum - 10
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 77.5242 iterations 94
Cbc0038I Solution found of 77.5242
Cbc0038I Relaxing continuous gives 77.5242
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 1 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 166 rows 85 columns - 5 fixed gives 34, 31 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 34 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 70.335
Cbc0038I Pass   2: suminf.    0.74188 (8) obj. 70.335 iterations 1
Cbc0038I Pass   3: suminf.    0.37094 (4) obj. 70.335 iterations 10
Cbc0038I Pass   4: suminf.    0.60000 (6) obj. 70.335 iterations 26
Cbc0038I Pass   5: suminf.    0.60000 (6) obj. 70.335 iterations 16
Cbc0038I Pass   6: suminf.    1.60000 (4) obj. 70.335 iterations 40
Cbc0038I Pass   7: suminf.    1.60000 (6) obj. 70.335 iterations 12
Cbc0038I Pass   8: suminf.    1.60000 (8) obj. 70.335 iterations 11
Cbc0038I Pass   9: suminf.    1.60000 (8) obj. 70.335 iterations 20
Cbc0038I Pass  10: suminf.    1.20000 (12) obj. 70.335 iterations 28
Cbc0038I Pass  11: suminf.    0.80000 (4) obj. 70.335 iterations 17
Cbc0038I Pass  12: suminf.    0.91579 (4) obj. 70.335 iterations 10
Cbc0038I Pass  13: suminf.    2.19948 (8) obj. 70.335 iterations 38
Cbc0038I Pass  14: suminf.    1.09974 (4) obj. 70.335 iterations 17
Cbc0038I Pass  15: suminf.    0.80000 (11) obj. 70.335 iterations 30
Cbc0038I Pass  16: suminf.    1.64961 (6) obj. 70.335 iterations 26
Cbc0038I Pass  17: suminf.    1.09974 (4) obj. 70.335 iterations 10
Cbc0038I Pass  18: suminf.    1.00000 (6) obj. 70.335 iterations 33
Cbc0038I Pass  19: suminf.    1.00000 (4) obj. 70.335 iterations 13
Cbc0038I Pass  20: suminf.    1.00000 (9) obj. 70.335 iterations 9
Cbc0038I Pass  21: suminf.    1.20000 (4) obj. 70.335 iterations 32
Cbc0038I Pass  22: suminf.    1.00000 (9) obj. 70.335 iterations 10
Cbc0038I Pass  23: suminf.    1.20000 (4) obj. 70.335 iterations 27
Cbc0038I Pass  24: suminf.    1.60000 (16) obj. 70.335 iterations 26
Cbc0038I Pass  25: suminf.    0.60000 (6) obj. 70.335 iterations 12
Cbc0038I Pass  26: suminf.    0.60000 (6) obj. 70.335 iterations 6
Cbc0038I Pass  27: suminf.    2.80000 (13) obj. 70.335 iterations 30
Cbc0038I Pass  28: suminf.    1.40000 (14) obj. 70.335 iterations 33
Cbc0038I Pass  29: suminf.    1.49432 (9) obj. 70.335 iterations 21
Cbc0038I Pass  30: suminf.    1.40000 (13) obj. 70.335 iterations 16
Cbc0038I Pass  31: suminf.    1.99458 (11) obj. 70.335 iterations 40
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 178 rows 96 columns - 3 fixed gives 97, 50 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 97 rows 50 columns
Cbc0038I Mini branch and bound improved solution from 77.5242 to 50.5371 (0.02 seconds)
Cbc0038I Round again with cutoff of 41.5562
Cbc0038I Pass  31: suminf.    4.83567 (21) obj. 41.5562 iterations 8
Cbc0038I Pass  32: suminf.    2.58043 (14) obj. 41.5562 iterations 15
Cbc0038I Pass  33: suminf.    2.42631 (11) obj. 41.5562 iterations 24
Cbc0038I Pass  34: suminf.    1.77543 (13) obj. 41.5562 iterations 23
Cbc0038I Pass  35: suminf.    2.67224 (10) obj. 41.5562 iterations 18
Cbc0038I Pass  36: suminf.    1.10334 (13) obj. 41.5562 iterations 17
Cbc0038I Pass  37: suminf.    3.14305 (11) obj. 41.5562 iterations 19
Cbc0038I Pass  38: suminf.    2.06452 (11) obj. 41.5562 iterations 11
Cbc0038I Pass  39: suminf.    1.08333 (7) obj. 41.5562 iterations 20
Cbc0038I Pass  40: suminf.    0.80000 (7) obj. 41.5562 iterations 17
Cbc0038I Pass  41: suminf.    2.76696 (7) obj. 41.5562 iterations 24
Cbc0038I Pass  42: suminf.    1.85583 (10) obj. 41.5562 iterations 7
Cbc0038I Pass  43: suminf.    1.71667 (9) obj. 41.5562 iterations 22
Cbc0038I Pass  44: suminf.    1.40000 (13) obj. 41.5562 iterations 15
Cbc0038I Pass  45: suminf.    2.56879 (13) obj. 41.5562 iterations 26
Cbc0038I Pass  46: suminf.    2.13916 (16) obj. 41.5562 iterations 12
Cbc0038I Pass  47: suminf.    3.58731 (14) obj. 41.5562 iterations 26
Cbc0038I Pass  48: suminf.    1.76076 (10) obj. 41.5562 iterations 13
Cbc0038I Pass  49: suminf.    1.40000 (15) obj. 41.5562 iterations 16
Cbc0038I Pass  50: suminf.    2.42249 (10) obj. 41.5562 iterations 24
Cbc0038I Pass  51: suminf.    2.13916 (10) obj. 41.5562 iterations 11
Cbc0038I Pass  52: suminf.    2.14322 (7) obj. 41.5562 iterations 20
Cbc0038I Pass  53: suminf.    2.14322 (7) obj. 41.5562 iterations 5
Cbc0038I Pass  54: suminf.    2.40000 (7) obj. 41.5562 iterations 16
Cbc0038I Pass  55: suminf.    2.19076 (7) obj. 41.5562 iterations 1
Cbc0038I Pass  56: suminf.    1.97139 (8) obj. 41.5562 iterations 11
Cbc0038I Pass  57: suminf.    1.97139 (8) obj. 41.5562 iterations 0
Cbc0038I Pass  58: suminf.    2.71357 (9) obj. 41.5562 iterations 17
Cbc0038I Pass  59: suminf.    1.40000 (10) obj. 41.5562 iterations 25
Cbc0038I Pass  60: suminf.    1.80338 (6) obj. 41.5562 iterations 18
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 1 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 177 rows 95 columns - 4 fixed gives 65, 38 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 50.5371 - took 0.03 seconds
Cbc0012I Integer solution of 50.537115 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0012I Integer solution of 45.188494 found by DiveCoefficient after 3066 iterations and 0 nodes (0.13 seconds)
Cbc0031I 9 added rows had average density of 20.111111
Cbc0013I At root node, 9 cuts changed objective from 5.6326367 to 42.813413 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1893 row cuts average 5.7 elements, 3 column cuts (3 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1444 row cuts average 33.6 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 313 row cuts average 6.9 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 377 row cuts average 8.3 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 45.188494 best solution, best possible 42.814883 (0.13 seconds)
Cbc0001I Search completed - best objective 45.18849411078, took 3144 iterations and 2 nodes (0.13 seconds)
Cbc0032I Strong branching done 36 times (388 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 5.63264 to 42.8149
Probing was tried 101 times and created 1917 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
Gomory was tried 101 times and created 1448 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 101 times and created 320 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 101 times and created 403 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ImplicationCuts was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                45.18849411
Enumerated nodes:               2
Total iterations:               3144
Time (CPU seconds):             0.13
Time (Wallclock seconds):       0.13

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.14   (Wallclock seconds):       0.14

Tour: [0, 1, 6, 7, 5, 2, 9, 8, 3, 4, 0]
Total travel cost: 305.0457065108971
Maximum distance between consecutive cities: 45.18849411078001


ERROR:


