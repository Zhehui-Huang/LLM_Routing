OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/e973587398c94a75a3dae209d6f396ff-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/e973587398c94a75a3dae209d6f396ff-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 617 COLUMNS
At line 10375 RHS
At line 10988 BOUNDS
At line 11079 ENDATA
Problem MODEL has 612 rows, 91 columns and 9576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7.20453 - 0.00 seconds
Cgl0004I processed model has 612 rows, 91 columns (90 integer (90 of which binary)) and 9576 elements
Cbc0038I Initial state - 68 integers unsatisfied sum - 9.99363
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 113.071 iterations 82
Cbc0038I Solution found of 113.071
Cbc0038I Relaxing continuous gives 113.071
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 580 rows 71 columns - 5 fixed gives 83, 14 - ok now
Cbc0038I Full problem 612 rows 91 columns, reduced to 83 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 102.484
Cbc0038I Pass   2: suminf.    1.87257 (15) obj. 102.484 iterations 2
Cbc0038I Pass   3: suminf.    0.39792 (27) obj. 102.484 iterations 21
Cbc0038I Pass   4: suminf.    0.56177 (6) obj. 102.484 iterations 24
Cbc0038I Pass   5: suminf.    0.39792 (27) obj. 102.484 iterations 19
Cbc0038I Pass   6: suminf.    0.00000 (0) obj. 102.484 iterations 22
Cbc0038I Solution found of 102.484
Cbc0038I Relaxing continuous gives 93.5361
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 593 rows 78 columns - 6 fixed gives 74, 14 - ok now
Cbc0038I Full problem 612 rows 91 columns, reduced to 74 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 76.2698
Cbc0038I Pass   7: suminf.    5.09001 (18) obj. 76.2698 iterations 1
Cbc0038I Pass   8: suminf.    1.95281 (10) obj. 76.2698 iterations 15
Cbc0038I Pass   9: suminf.    1.38324 (27) obj. 76.2698 iterations 11
Cbc0038I Pass  10: suminf.    6.39407 (24) obj. 76.2698 iterations 37
Cbc0038I Pass  11: suminf.    1.60683 (12) obj. 76.2698 iterations 18
Cbc0038I Pass  12: suminf.    1.14729 (17) obj. 76.2698 iterations 18
Cbc0038I Pass  13: suminf.    1.14718 (11) obj. 76.2698 iterations 29
Cbc0038I Pass  14: suminf.    0.72225 (13) obj. 76.2698 iterations 23
Cbc0038I Pass  15: suminf.    3.25469 (10) obj. 76.2698 iterations 31
Cbc0038I Pass  16: suminf.    1.67107 (9) obj. 76.2698 iterations 14
Cbc0038I Pass  17: suminf.    1.01957 (9) obj. 76.2698 iterations 26
Cbc0038I Pass  18: suminf.    1.61421 (18) obj. 76.2698 iterations 32
Cbc0038I Pass  19: suminf.    0.72225 (18) obj. 76.2698 iterations 20
Cbc0038I Pass  20: suminf.    1.16331 (12) obj. 76.2698 iterations 31
Cbc0038I Pass  21: suminf.    1.03570 (10) obj. 76.2698 iterations 11
Cbc0038I Pass  22: suminf.    1.10757 (6) obj. 76.2698 iterations 19
Cbc0038I Pass  23: suminf.    0.95961 (12) obj. 76.2698 iterations 21
Cbc0038I Pass  24: suminf.    1.10757 (6) obj. 76.2698 iterations 16
Cbc0038I Pass  25: suminf.    1.03570 (9) obj. 76.2698 iterations 19
Cbc0038I Pass  26: suminf.    0.38283 (6) obj. 76.2698 iterations 20
Cbc0038I Pass  27: suminf.    0.27117 (27) obj. 76.2698 iterations 13
Cbc0038I Pass  28: suminf.    0.60177 (19) obj. 76.2698 iterations 44
Cbc0038I Pass  29: suminf.    0.32573 (12) obj. 76.2698 iterations 19
Cbc0038I Pass  30: suminf.    1.90781 (12) obj. 76.2698 iterations 26
Cbc0038I Pass  31: suminf.    1.42948 (25) obj. 76.2698 iterations 16
Cbc0038I Pass  32: suminf.    1.91227 (17) obj. 76.2698 iterations 26
Cbc0038I Pass  33: suminf.    0.95961 (14) obj. 76.2698 iterations 18
Cbc0038I Pass  34: suminf.    0.63805 (9) obj. 76.2698 iterations 27
Cbc0038I Pass  35: suminf.    0.27117 (27) obj. 76.2698 iterations 18
Cbc0038I Pass  36: suminf.    2.08042 (14) obj. 76.2698 iterations 24
Cbc0038I Rounding solution of 76.2698 is better than previous of 93.5361

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 608 rows 88 columns - 6 fixed gives 74, 14 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I Round again with cutoff of 55.5502
Cbc0038I Pass  36: suminf.    4.87001 (22) obj. 55.5502 iterations 2
Cbc0038I Pass  37: suminf.    2.36446 (13) obj. 55.5502 iterations 25
Cbc0038I Pass  38: suminf.    1.84864 (14) obj. 55.5502 iterations 11
Cbc0038I Pass  39: suminf.    4.91287 (10) obj. 55.5502 iterations 21
Cbc0038I Pass  40: suminf.    1.84457 (14) obj. 55.5502 iterations 14
Cbc0038I Pass  41: suminf.    3.04042 (13) obj. 55.5502 iterations 24
Cbc0038I Pass  42: suminf.    7.02195 (22) obj. 55.5502 iterations 42
Cbc0038I Pass  43: suminf.    4.78534 (23) obj. 55.5502 iterations 25
Cbc0038I Pass  44: suminf.    4.75580 (21) obj. 55.5502 iterations 5
Cbc0038I Pass  45: suminf.    3.98424 (23) obj. 55.5502 iterations 6
Cbc0038I Pass  46: suminf.    6.21655 (20) obj. 55.5502 iterations 27
Cbc0038I Pass  47: suminf.    5.00000 (22) obj. 55.5502 iterations 14
Cbc0038I Pass  48: suminf.    5.00000 (19) obj. 55.5502 iterations 5
Cbc0038I Pass  49: suminf.    2.56090 (18) obj. 55.5502 iterations 19
Cbc0038I Pass  50: suminf.    1.84936 (17) obj. 55.5502 iterations 16
Cbc0038I Pass  51: suminf.    2.33223 (13) obj. 55.5502 iterations 33
Cbc0038I Pass  52: suminf.    1.84142 (14) obj. 55.5502 iterations 7
Cbc0038I Pass  53: suminf.    4.24888 (12) obj. 55.5502 iterations 25
Cbc0038I Pass  54: suminf.    2.64757 (16) obj. 55.5502 iterations 12
Cbc0038I Pass  55: suminf.    2.64757 (16) obj. 55.5502 iterations 0
Cbc0038I Pass  56: suminf.    5.09838 (13) obj. 55.5502 iterations 33
Cbc0038I Pass  57: suminf.    3.88057 (13) obj. 55.5502 iterations 21
Cbc0038I Pass  58: suminf.    5.00000 (10) obj. 55.5502 iterations 19
Cbc0038I Pass  59: suminf.    2.52101 (10) obj. 55.5502 iterations 19
Cbc0038I Pass  60: suminf.    2.52101 (11) obj. 55.5502 iterations 7
Cbc0038I Pass  61: suminf.    4.00000 (8) obj. 55.5502 iterations 20
Cbc0038I Pass  62: suminf.    2.16160 (9) obj. 55.5502 iterations 11
Cbc0038I Pass  63: suminf.    1.71865 (15) obj. 55.5502 iterations 10
Cbc0038I Pass  64: suminf.    4.11802 (15) obj. 55.5502 iterations 29
Cbc0038I Pass  65: suminf.    2.87775 (14) obj. 55.5502 iterations 14
Cbc0038I Rounding solution of 61.6847 is better than previous of 76.2698

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 596 rows 81 columns - 6 fixed gives 74, 14 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.22 seconds)
Cbc0038I Round again with cutoff of 41.0465
Cbc0038I Pass  65: suminf.    6.49724 (22) obj. 41.0465 iterations 3
Cbc0038I Pass  66: suminf.    3.21874 (12) obj. 41.0465 iterations 17
Cbc0038I Pass  67: suminf.    3.87187 (9) obj. 41.0465 iterations 23
Cbc0038I Pass  68: suminf.    2.62417 (13) obj. 41.0465 iterations 13
Cbc0038I Pass  69: suminf.    2.62417 (13) obj. 41.0465 iterations 0
Cbc0038I Pass  70: suminf.    3.99233 (14) obj. 41.0465 iterations 20
Cbc0038I Pass  71: suminf.    3.21874 (12) obj. 41.0465 iterations 12
Cbc0038I Pass  72: suminf.    3.21874 (12) obj. 41.0465 iterations 0
Cbc0038I Pass  73: suminf.    3.87187 (9) obj. 41.0465 iterations 22
Cbc0038I Pass  74: suminf.    2.62417 (13) obj. 41.0465 iterations 13
Cbc0038I Pass  75: suminf.    2.62417 (13) obj. 41.0465 iterations 0
Cbc0038I Pass  76: suminf.    3.99233 (12) obj. 41.0465 iterations 26
Cbc0038I Pass  77: suminf.    3.21874 (12) obj. 41.0465 iterations 13
Cbc0038I Pass  78: suminf.    3.21874 (12) obj. 41.0465 iterations 0
Cbc0038I Pass  79: suminf.    3.87187 (9) obj. 41.0465 iterations 22
Cbc0038I Pass  80: suminf.    2.62417 (13) obj. 41.0465 iterations 13
Cbc0038I Pass  81: suminf.    2.62417 (13) obj. 41.0465 iterations 0
Cbc0038I Pass  82: suminf.    3.99233 (14) obj. 41.0465 iterations 23
Cbc0038I Pass  83: suminf.    3.21874 (12) obj. 41.0465 iterations 12
Cbc0038I Pass  84: suminf.    3.21874 (12) obj. 41.0465 iterations 0
Cbc0038I Pass  85: suminf.    3.87187 (9) obj. 41.0465 iterations 23
Cbc0038I Pass  86: suminf.    2.62417 (13) obj. 41.0465 iterations 13
Cbc0038I Pass  87: suminf.    2.62417 (13) obj. 41.0465 iterations 0
Cbc0038I Pass  88: suminf.    3.99233 (14) obj. 41.0465 iterations 21
Cbc0038I Pass  89: suminf.    3.21874 (12) obj. 41.0465 iterations 12
Cbc0038I Pass  90: suminf.    3.21874 (12) obj. 41.0465 iterations 0
Cbc0038I Pass  91: suminf.    3.87187 (9) obj. 41.0465 iterations 25
Cbc0038I Pass  92: suminf.    2.62417 (13) obj. 41.0465 iterations 12
Cbc0038I Pass  93: suminf.    2.62417 (13) obj. 41.0465 iterations 0
Cbc0038I Pass  94: suminf.    3.99233 (14) obj. 41.0465 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 580 rows 73 columns - 6 fixed gives 51, 11 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.41 seconds)
Cbc0038I After 0.41 seconds - Feasibility pump exiting with objective of 61.6847 - took 0.40 seconds
Cbc0012I Integer solution of 61.684682 found by feasibility pump after 0 iterations and 0 nodes (0.41 seconds)
Cbc0038I Full problem 612 rows 91 columns, reduced to 575 rows 70 columns - 2 fixed gives 500, 47 - still too large
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from 7.2045311 to 7.2045311 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 10 column cuts (10 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective 61.68468205316, took 0 iterations and 0 nodes (0.43 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 7.20453 to 7.20453
Probing was tried 1 times and created 11 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                61.68468205
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.43
Time (Wallclock seconds):       0.43

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.43   (Wallclock seconds):       0.43



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/10/city_10_instance_4/4/0/solution_r1.py", line 61, in <module>
    arcs = [(i, j) for i in range(n) for j in range(n) if pulp.value(x_vars[(i, j)]) == 1 and i != j]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/10/city_10_instance_4/4/0/solution_r1.py", line 61, in <listcomp>
    arcs = [(i, j) for i in range(n) for j in range(n) if pulp.value(x_vars[(i, j)]) == 1 and i != j]
                                                                     ~~~~~~^^^^^^^^
KeyError: (0, 0)


