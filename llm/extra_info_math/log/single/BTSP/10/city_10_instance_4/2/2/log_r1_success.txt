OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/fc9c41433c554eaf972599b4d3418638-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/fc9c41433c554eaf972599b4d3418638-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 187 COLUMNS
At line 963 RHS
At line 1146 BOUNDS
At line 1246 ENDATA
Problem MODEL has 182 rows, 100 columns and 576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7.20453 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0004I processed model has 182 rows, 100 columns (99 integer (90 of which binary)) and 1080 elements
Cbc0038I Initial state - 70 integers unsatisfied sum - 9.98725
Cbc0038I Pass   1: suminf.    3.11111 (10) obj. 60.1415 iterations 93
Cbc0038I Pass   2: suminf.    3.44444 (11) obj. 78.0256 iterations 17
Cbc0038I Pass   3: suminf.    2.44444 (8) obj. 78.0256 iterations 8
Cbc0038I Pass   4: suminf.    2.44444 (8) obj. 78.0256 iterations 8
Cbc0038I Pass   5: suminf.    1.20000 (6) obj. 115.256 iterations 35
Cbc0038I Pass   6: suminf.    0.80000 (4) obj. 115.256 iterations 15
Cbc0038I Pass   7: suminf.    0.00000 (0) obj. 115.256 iterations 12
Cbc0038I Solution found of 115.256
Cbc0038I Relaxing continuous gives 115.256
Cbc0038I Cleaned solution of 115.256
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 169 rows 87 columns - 5 fixed gives 81, 30 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 53 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 104.451
Cbc0038I Pass   8: suminf.    3.11111 (10) obj. 60.1415 iterations 0
Cbc0038I Pass   9: suminf.    3.44444 (11) obj. 78.0256 iterations 19
Cbc0038I Pass  10: suminf.    2.44444 (8) obj. 78.0256 iterations 17
Cbc0038I Pass  11: suminf.    2.44444 (8) obj. 78.0256 iterations 16
Cbc0038I Pass  12: suminf.    2.03936 (17) obj. 104.451 iterations 42
Cbc0038I Pass  13: suminf.    2.30875 (15) obj. 104.451 iterations 15
Cbc0038I Pass  14: suminf.    0.00000 (0) obj. 104.451 iterations 40
Cbc0038I Solution found of 104.451
Cbc0038I Relaxing continuous gives 81.2527
Cbc0038I Cleaned solution of 81.2527
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 170 rows 88 columns - 4 fixed gives 91, 38 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 71 rows 38 columns
Cbc0038I Mini branch and bound improved solution from 81.2527 to 81.2527 (0.02 seconds)
Cbc0038I Round again with cutoff of 66.4431
Cbc0038I Pass  15: suminf.    3.11111 (10) obj. 60.1415 iterations 0
Cbc0038I Pass  16: suminf.    3.00983 (16) obj. 66.4431 iterations 15
Cbc0038I Pass  17: suminf.    2.49587 (15) obj. 66.4431 iterations 23
Cbc0038I Pass  18: suminf.    2.98001 (18) obj. 66.4431 iterations 10
Cbc0038I Pass  19: suminf.    3.13509 (16) obj. 66.4431 iterations 26
Cbc0038I Pass  20: suminf.    4.53978 (19) obj. 66.4431 iterations 28
Cbc0038I Pass  21: suminf.    3.13390 (16) obj. 66.4431 iterations 17
Cbc0038I Pass  22: suminf.    3.20436 (12) obj. 66.4431 iterations 29
Cbc0038I Pass  23: suminf.    1.99414 (11) obj. 66.4431 iterations 8
Cbc0038I Pass  24: suminf.    0.88889 (4) obj. 66.4431 iterations 17
Cbc0038I Pass  25: suminf.    1.20000 (6) obj. 66.4431 iterations 13
Cbc0038I Pass  26: suminf.    2.82177 (8) obj. 66.4431 iterations 17
Cbc0038I Pass  27: suminf.    1.88889 (9) obj. 66.4431 iterations 18
Cbc0038I Pass  28: suminf.    1.88889 (10) obj. 66.4431 iterations 16
Cbc0038I Pass  29: suminf.    3.91854 (16) obj. 66.4431 iterations 42
Cbc0038I Pass  30: suminf.    3.62543 (18) obj. 66.4431 iterations 19
Cbc0038I Pass  31: suminf.    0.88818 (8) obj. 66.4431 iterations 32
Cbc0038I Pass  32: suminf.    0.76338 (7) obj. 66.4431 iterations 8
Cbc0038I Pass  33: suminf.    0.66667 (6) obj. 66.4431 iterations 32
Cbc0038I Pass  34: suminf.    0.66667 (6) obj. 66.4431 iterations 19
Cbc0038I Pass  35: suminf.    3.35714 (16) obj. 66.4431 iterations 29
Cbc0038I Pass  36: suminf.    2.55556 (9) obj. 66.4431 iterations 34
Cbc0038I Pass  37: suminf.    2.55556 (9) obj. 66.4431 iterations 23
Cbc0038I Pass  38: suminf.    2.55556 (9) obj. 66.4431 iterations 11
Cbc0038I Pass  39: suminf.    3.55556 (11) obj. 66.4431 iterations 22
Cbc0038I Pass  40: suminf.    1.92000 (12) obj. 66.4431 iterations 28
Cbc0038I Pass  41: suminf.    0.88889 (4) obj. 66.4431 iterations 21
Cbc0038I Pass  42: suminf.    0.88889 (4) obj. 66.4431 iterations 18
Cbc0038I Pass  43: suminf.    6.97517 (26) obj. 66.4431 iterations 27
Cbc0038I Pass  44: suminf.    3.82329 (16) obj. 66.4431 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 177 rows 95 columns - 7 fixed gives 72, 10 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 81.2527 - took 0.02 seconds
Cbc0012I Integer solution of 81.252692 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 182 rows 100 columns, reduced to 161 rows 80 columns - 7 fixed gives 25, 7 - ok now
Cbc0012I Integer solution of 61.684682 found by DiveCoefficient after 1151 iterations and 0 nodes (0.08 seconds)
Cbc0031I 5 added rows had average density of 16.8
Cbc0013I At root node, 5 cuts changed objective from 7.2045311 to 61.684626 in 35 passes
Cbc0014I Cut generator 0 (Probing) - 1688 row cuts average 3.9 elements, 3 column cuts (3 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 654 row cuts average 30.3 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 12.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 298 row cuts average 13.9 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 61.684682 best solution, best possible 61.684626 (0.08 seconds)
Cbc0001I Search completed - best objective 61.68468205316, took 1207 iterations and 2 nodes (0.08 seconds)
Cbc0032I Strong branching done 60 times (570 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 7.20453 to 61.6846
Probing was tried 36 times and created 1693 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
Gomory was tried 35 times and created 654 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Knapsack was tried 35 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 35 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 35 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
FlowCover was tried 35 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
TwoMirCuts was tried 35 times and created 298 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                61.68468205
Enumerated nodes:               2
Total iterations:               1207
Time (CPU seconds):             0.08
Time (Wallclock seconds):       0.08

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.08   (Wallclock seconds):       0.08

Tour: [0, 6, 2, 8, 9, 7, 5, 3, 1, 4, 0]
Total travel cost: 385.21122936904356
Maximum distance between consecutive cities: 61.68468205316454


ERROR:


