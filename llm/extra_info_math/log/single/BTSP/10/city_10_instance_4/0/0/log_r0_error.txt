OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/27f861b9e2b0475c876731aa58bd3f46-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/27f861b9e2b0475c876731aa58bd3f46-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 187 COLUMNS
At line 963 RHS
At line 1146 BOUNDS
At line 1246 ENDATA
Problem MODEL has 182 rows, 100 columns and 576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7.20453 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 72 strengthened rows, 0 substitutions
Cgl0004I processed model has 182 rows, 100 columns (99 integer (90 of which binary)) and 1080 elements
Cbc0038I Initial state - 69 integers unsatisfied sum - 9.98725
Cbc0038I Pass   1: suminf.    2.00000 (6) obj. 81.4678 iterations 86
Cbc0038I Pass   2: suminf.    3.11111 (13) obj. 81.4678 iterations 8
Cbc0038I Pass   3: suminf.    2.00000 (6) obj. 82.28 iterations 21
Cbc0038I Pass   4: suminf.    3.11111 (14) obj. 81.4678 iterations 21
Cbc0038I Pass   5: suminf.    4.22222 (17) obj. 81.4678 iterations 11
Cbc0038I Pass   6: suminf.    2.66667 (6) obj. 85.7555 iterations 33
Cbc0038I Pass   7: suminf.    1.55556 (8) obj. 85.7555 iterations 26
Cbc0038I Pass   8: suminf.    1.55556 (8) obj. 85.7555 iterations 14
Cbc0038I Pass   9: suminf.    0.88889 (4) obj. 113.071 iterations 26
Cbc0038I Pass  10: suminf.    0.88889 (8) obj. 113.071 iterations 14
Cbc0038I Pass  11: suminf.    0.88889 (4) obj. 113.071 iterations 26
Cbc0038I Pass  12: suminf.    0.88889 (4) obj. 113.071 iterations 10
Cbc0038I Pass  13: suminf.    0.80000 (4) obj. 113.071 iterations 46
Cbc0038I Solution found of 113.071
Cbc0038I Relaxing continuous gives 113.071
Cbc0038I Cleaned solution of 113.071
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 170 rows 88 columns - 4 fixed gives 79, 39 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 68 rows 39 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 102.484
Cbc0038I Pass  14: suminf.    2.00000 (6) obj. 81.4678 iterations 0
Cbc0038I Pass  15: suminf.    3.11111 (13) obj. 81.4678 iterations 6
Cbc0038I Pass  16: suminf.    2.00000 (6) obj. 82.28 iterations 29
Cbc0038I Pass  17: suminf.    3.11111 (14) obj. 81.4678 iterations 20
Cbc0038I Pass  18: suminf.    4.22222 (17) obj. 81.4678 iterations 25
Cbc0038I Pass  19: suminf.    4.78889 (16) obj. 73.5731 iterations 48
Cbc0038I Pass  20: suminf.    1.77778 (11) obj. 99.2472 iterations 47
Cbc0038I Pass  21: suminf.    1.33333 (4) obj. 99.2472 iterations 31
Cbc0038I Pass  22: suminf.    1.77778 (11) obj. 99.2472 iterations 21
Cbc0038I Pass  23: suminf.    1.33333 (4) obj. 99.2472 iterations 34
Cbc0038I Pass  24: suminf.    1.77778 (8) obj. 99.2472 iterations 32
Cbc0038I Pass  25: suminf.    1.33333 (9) obj. 99.2472 iterations 36
Cbc0038I Pass  26: suminf.    1.33333 (6) obj. 99.2472 iterations 24
Cbc0038I Pass  27: suminf.    1.33333 (4) obj. 99.2472 iterations 14
Cbc0038I Pass  28: suminf.    1.33333 (6) obj. 99.2472 iterations 25
Cbc0038I Pass  29: suminf.    1.33333 (4) obj. 99.2472 iterations 29
Cbc0038I Pass  30: suminf.    4.14444 (14) obj. 99.2472 iterations 22
Cbc0038I Pass  31: suminf.    2.11111 (7) obj. 99.2472 iterations 25
Cbc0038I Pass  32: suminf.    0.00000 (0) obj. 99.2472 iterations 18
Cbc0038I Solution found of 99.2472
Cbc0038I Relaxing continuous gives 99.2472
Cbc0038I Cleaned solution of 99.2472
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 172 rows 90 columns - 1 fixed gives 139, 74 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of 80.8386
Cbc0038I Pass  33: suminf.    2.21624 (15) obj. 80.8386 iterations 1
Cbc0038I Pass  34: suminf.    3.15745 (19) obj. 80.8386 iterations 6
Cbc0038I Pass  35: suminf.    2.81834 (17) obj. 80.8386 iterations 42
Cbc0038I Pass  36: suminf.    2.63488 (20) obj. 80.8386 iterations 11
Cbc0038I Pass  37: suminf.    1.77778 (4) obj. 80.8386 iterations 30
Cbc0038I Pass  38: suminf.    3.66667 (16) obj. 80.8386 iterations 12
Cbc0038I Pass  39: suminf.    2.77778 (13) obj. 80.8386 iterations 29
Cbc0038I Pass  40: suminf.    3.21322 (14) obj. 80.8386 iterations 44
Cbc0038I Pass  41: suminf.    2.88889 (10) obj. 80.8386 iterations 22
Cbc0038I Pass  42: suminf.    2.80556 (12) obj. 80.8386 iterations 15
Cbc0038I Pass  43: suminf.    1.55556 (9) obj. 80.8386 iterations 18
Cbc0038I Pass  44: suminf.    3.05556 (7) obj. 80.8386 iterations 21
Cbc0038I Pass  45: suminf.    1.87633 (8) obj. 80.8386 iterations 41
Cbc0038I Pass  46: suminf.    1.65438 (16) obj. 80.8386 iterations 26
Cbc0038I Pass  47: suminf.    2.60944 (17) obj. 80.8386 iterations 48
Cbc0038I Pass  48: suminf.    2.35790 (20) obj. 80.8386 iterations 8
Cbc0038I Pass  49: suminf.    2.16487 (19) obj. 80.8386 iterations 46
Cbc0038I Pass  50: suminf.    2.53333 (17) obj. 80.8386 iterations 31
Cbc0038I Pass  51: suminf.    2.74058 (13) obj. 80.8386 iterations 49
Cbc0038I Pass  52: suminf.    1.91441 (15) obj. 80.8386 iterations 12
Cbc0038I Pass  53: suminf.    2.05807 (13) obj. 80.8386 iterations 24
Cbc0038I Pass  54: suminf.    1.96398 (14) obj. 80.8386 iterations 28
Cbc0038I Pass  55: suminf.    2.97020 (16) obj. 80.8386 iterations 38
Cbc0038I Pass  56: suminf.    1.57542 (13) obj. 80.8386 iterations 8
Cbc0038I Pass  57: suminf.    2.49255 (15) obj. 80.8386 iterations 31
Cbc0038I Pass  58: suminf.    2.83333 (11) obj. 80.8386 iterations 7
Cbc0038I Pass  59: suminf.    1.33333 (11) obj. 80.8386 iterations 32
Cbc0038I Pass  60: suminf.    1.45438 (10) obj. 80.8386 iterations 41
Cbc0038I Pass  61: suminf.    2.54582 (16) obj. 80.8386 iterations 41
Cbc0038I Pass  62: suminf.    1.55556 (8) obj. 80.8386 iterations 17
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 169 rows 87 columns - 1 fixed gives 138, 73 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of 99.2472 - took 0.04 seconds
Cbc0012I Integer solution of 99.247166 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 182 rows 100 columns, reduced to 161 rows 78 columns - 1 fixed gives 133, 66 - still too large
Cbc0031I 19 added rows had average density of 25.894737
Cbc0013I At root node, 19 cuts changed objective from 7.2045311 to 52.371134 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4070 row cuts average 5.0 elements, 3 column cuts (3 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1617 row cuts average 58.5 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 209 row cuts average 15.6 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 41 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 498 row cuts average 15.1 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 99.247166 best solution, best possible 52.371134 (0.25 seconds)
Cbc0012I Integer solution of 61.684682 found by DiveCoefficient after 4832 iterations and 2 nodes (0.25 seconds)
Cbc0001I Search completed - best objective 61.68468205316, took 4884 iterations and 3 nodes (0.25 seconds)
Cbc0032I Strong branching done 114 times (1674 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 0 variables fixed on reduced cost
Cuts at root node changed objective from 7.20453 to 52.3711
Probing was tried 106 times and created 4087 cuts of which 0 were active after adding rounds of cuts (0.044 seconds)
Gomory was tried 105 times and created 1622 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Knapsack was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 105 times and created 213 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
FlowCover was tried 100 times and created 41 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
TwoMirCuts was tried 105 times and created 585 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                61.68468205
Enumerated nodes:               3
Total iterations:               4884
Time (CPU seconds):             0.26
Time (Wallclock seconds):       0.26

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.26   (Wallclock seconds):       0.26



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/10/city_10_instance_4/0/0/solution_r0.py", line 69, in <module>
    result = solve_tsp_bottleneck(cities)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/10/city_10_instance_4/0/0/solution_r0.py", line 48, in solve_tsp_bottleneck
    next_city = [j for j in range(len(cities)) if pulp.value(x[tour[-1],j]) == 1][0]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/10/city_10_instance_4/0/0/solution_r0.py", line 48, in <listcomp>
    next_city = [j for j in range(len(cities)) if pulp.value(x[tour[-1],j]) == 1][0]
                                                             ~^^^^^^^^^^^^
KeyError: (0, 0)


