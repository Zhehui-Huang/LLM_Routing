OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/db663f7e8d9c48168c71962acb7ab05b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/db663f7e8d9c48168c71962acb7ab05b-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 581 COLUMNS
At line 10267 RHS
At line 10844 BOUNDS
At line 10936 ENDATA
Problem MODEL has 576 rows, 91 columns and 9504 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 8.96858 - 0.00 seconds
Cgl0004I processed model has 576 rows, 91 columns (90 integer (90 of which binary)) and 9504 elements
Cbc0038I Initial state - 63 integers unsatisfied sum - 10
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 86.4002 iterations 75
Cbc0038I Solution found of 86.4002
Cbc0038I Relaxing continuous gives 86.4002
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 576 rows 91 columns, reduced to 534 rows 65 columns - 5 fixed gives 37, 12 - ok now
Cbc0038I Full problem 576 rows 91 columns, reduced to 37 rows 12 columns
Cbc0038I Mini branch and bound improved solution from 86.4002 to 78.1601 (0.01 seconds)
Cbc0038I Round again with cutoff of 71.2409
Cbc0038I Pass   2: suminf.    1.23616 (17) obj. 71.2409 iterations 4
Cbc0038I Pass   3: suminf.    0.87887 (9) obj. 71.2409 iterations 29
Cbc0038I Pass   4: suminf.    1.85998 (9) obj. 71.2409 iterations 27
Cbc0038I Pass   5: suminf.    1.61720 (13) obj. 71.2409 iterations 14
Cbc0038I Pass   6: suminf.    0.70355 (9) obj. 71.2409 iterations 27
Cbc0038I Pass   7: suminf.    0.41157 (15) obj. 71.2409 iterations 23
Cbc0038I Pass   8: suminf.    2.52094 (8) obj. 71.2409 iterations 36
Cbc0038I Pass   9: suminf.    1.61138 (9) obj. 71.2409 iterations 21
Cbc0038I Pass  10: suminf.    2.47998 (8) obj. 71.2409 iterations 24
Cbc0038I Pass  11: suminf.    1.41704 (15) obj. 71.2409 iterations 24
Cbc0038I Pass  12: suminf.    3.69000 (11) obj. 71.2409 iterations 31
Cbc0038I Pass  13: suminf.    1.89071 (6) obj. 71.2409 iterations 13
Cbc0038I Pass  14: suminf.    1.43752 (9) obj. 71.2409 iterations 13
Cbc0038I Pass  15: suminf.    0.75433 (10) obj. 71.2409 iterations 23
Cbc0038I Pass  16: suminf.    0.57490 (13) obj. 71.2409 iterations 16
Cbc0038I Pass  17: suminf.    1.88608 (10) obj. 71.2409 iterations 25
Cbc0038I Pass  18: suminf.    0.75443 (4) obj. 71.2409 iterations 18
Cbc0038I Pass  19: suminf.    0.44821 (4) obj. 71.2409 iterations 18
Cbc0038I Pass  20: suminf.    1.89071 (6) obj. 71.2409 iterations 12
Cbc0038I Pass  21: suminf.    1.61138 (16) obj. 71.2409 iterations 19
Cbc0038I Pass  22: suminf.    3.90389 (11) obj. 71.2409 iterations 23
Cbc0038I Pass  23: suminf.    1.05273 (6) obj. 71.2409 iterations 9
Cbc0038I Pass  24: suminf.    0.89955 (11) obj. 71.2409 iterations 11
Cbc0038I Pass  25: suminf.    4.00000 (8) obj. 71.2409 iterations 18
Cbc0038I Pass  26: suminf.    1.89071 (6) obj. 71.2409 iterations 7
Cbc0038I Pass  27: suminf.    1.63769 (12) obj. 71.2409 iterations 10
Cbc0038I Pass  28: suminf.    0.98866 (10) obj. 71.2409 iterations 25
Cbc0038I Pass  29: suminf.    0.57251 (12) obj. 71.2409 iterations 13
Cbc0038I Pass  30: suminf.    3.05599 (11) obj. 71.2409 iterations 24
Cbc0038I Pass  31: suminf.    1.73624 (10) obj. 71.2409 iterations 13
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 576 rows 91 columns, reduced to 561 rows 77 columns - 8 fixed gives 1, 2 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of 58.7865
Cbc0038I Pass  31: suminf.    4.37159 (19) obj. 58.7865 iterations 7
Cbc0038I Pass  32: suminf.    1.84704 (14) obj. 58.7865 iterations 33
Cbc0038I Pass  33: suminf.    3.86216 (10) obj. 58.7865 iterations 22
Cbc0038I Pass  34: suminf.    2.36170 (12) obj. 58.7865 iterations 8
Cbc0038I Pass  35: suminf.    4.21824 (13) obj. 58.7865 iterations 21
Cbc0038I Pass  36: suminf.    3.00000 (9) obj. 58.7865 iterations 8
Cbc0038I Pass  37: suminf.    3.00000 (9) obj. 58.7865 iterations 1
Cbc0038I Pass  38: suminf.    4.00000 (8) obj. 58.7865 iterations 13
Cbc0038I Pass  39: suminf.    1.77415 (10) obj. 58.7865 iterations 17
Cbc0038I Pass  40: suminf.    1.77415 (10) obj. 58.7865 iterations 0
Cbc0038I Pass  41: suminf.    4.00000 (8) obj. 58.7865 iterations 22
Cbc0038I Pass  42: suminf.    1.91762 (6) obj. 58.7865 iterations 17
Cbc0038I Pass  43: suminf.    4.50426 (13) obj. 58.7865 iterations 20
Cbc0038I Pass  44: suminf.    3.50489 (13) obj. 58.7865 iterations 16
Cbc0038I Pass  45: suminf.    3.11634 (10) obj. 58.7865 iterations 17
Cbc0038I Pass  46: suminf.    3.11634 (10) obj. 58.7865 iterations 2
Cbc0038I Pass  47: suminf.    3.86779 (8) obj. 58.7865 iterations 15
Cbc0038I Pass  48: suminf.    2.82055 (14) obj. 58.7865 iterations 12
Cbc0038I Pass  49: suminf.    2.88212 (13) obj. 58.7865 iterations 27
Cbc0038I Pass  50: suminf.    2.15773 (14) obj. 58.7865 iterations 13
Cbc0038I Pass  51: suminf.    2.93798 (11) obj. 58.7865 iterations 19
Cbc0038I Pass  52: suminf.    2.26858 (14) obj. 58.7865 iterations 11
Cbc0038I Pass  53: suminf.    3.19072 (11) obj. 58.7865 iterations 26
Cbc0038I Pass  54: suminf.    2.68111 (14) obj. 58.7865 iterations 7
Cbc0038I Pass  55: suminf.    2.40770 (11) obj. 58.7865 iterations 28
Cbc0038I Pass  56: suminf.    2.40770 (11) obj. 58.7865 iterations 6
Cbc0038I Pass  57: suminf.    3.54661 (8) obj. 58.7865 iterations 20
Cbc0038I Pass  58: suminf.    2.39054 (14) obj. 58.7865 iterations 12
Cbc0038I Pass  59: suminf.    3.77567 (12) obj. 58.7865 iterations 18
Cbc0038I Pass  60: suminf.    2.90597 (10) obj. 58.7865 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 19 integers at bound fixed and 0 continuous
Cbc0038I Full problem 576 rows 91 columns, reduced to 552 rows 72 columns - 8 fixed gives 1, 2 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.17 seconds)
Cbc0038I After 0.17 seconds - Feasibility pump exiting with objective of 78.1601 - took 0.16 seconds
Cbc0012I Integer solution of 78.160092 found by feasibility pump after 0 iterations and 0 nodes (0.17 seconds)
Cbc0038I Full problem 576 rows 91 columns, reduced to 539 rows 66 columns - 5 fixed gives 162, 20 - ok now
Cbc0031I 4 added rows had average density of 34.75
Cbc0013I At root node, 4 cuts changed objective from 8.9685764 to 65.108318 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 260 row cuts average 3.0 elements, 3 column cuts (3 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 73 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 182 row cuts average 29.7 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 78.160092 best solution, best possible 65.108318 (0.22 seconds)
Cbc0004I Integer solution of 67.119297 found after 229 iterations and 1 nodes (0.22 seconds)
Cbc0001I Search completed - best objective 67.1192967782, took 238 iterations and 2 nodes (0.22 seconds)
Cbc0032I Strong branching done 50 times (566 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 8.96858 to 65.1083
Probing was tried 12 times and created 275 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 12 times and created 73 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Knapsack was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
FlowCover was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 12 times and created 282 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                67.11929678
Enumerated nodes:               2
Total iterations:               238
Time (CPU seconds):             0.22
Time (Wallclock seconds):       0.23

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.22   (Wallclock seconds):       0.23



ERROR:


