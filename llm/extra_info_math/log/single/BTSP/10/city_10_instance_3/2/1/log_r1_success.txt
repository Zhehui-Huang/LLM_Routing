OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/2f5f7d4e36b341abb342ebe166045495-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/2f5f7d4e36b341abb342ebe166045495-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 617 COLUMNS
At line 10375 RHS
At line 10988 BOUNDS
At line 11079 ENDATA
Problem MODEL has 612 rows, 91 columns and 9576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7.34482 - 0.00 seconds
Cgl0004I processed model has 612 rows, 91 columns (90 integer (90 of which binary)) and 9576 elements
Cbc0038I Initial state - 63 integers unsatisfied sum - 9.96129
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 91.3893 iterations 75
Cbc0038I Solution found of 91.3893
Cbc0038I Relaxing continuous gives 91.3893
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 554 rows 64 columns - 5 fixed gives 39, 17 - ok now
Cbc0038I Full problem 612 rows 91 columns, reduced to 39 rows 17 columns
Cbc0038I Mini branch and bound improved solution from 91.3893 to 79.8123 (0.02 seconds)
Cbc0038I Round again with cutoff of 72.5655
Cbc0038I Pass   2: suminf.    2.24133 (19) obj. 72.5655 iterations 4
Cbc0038I Pass   3: suminf.    1.20903 (13) obj. 72.5655 iterations 20
Cbc0038I Pass   4: suminf.    0.34125 (6) obj. 72.5655 iterations 24
Cbc0038I Pass   5: suminf.    0.24608 (24) obj. 72.5655 iterations 20
Cbc0038I Pass   6: suminf.    1.64779 (8) obj. 72.5655 iterations 25
Cbc0038I Pass   7: suminf.    0.87539 (27) obj. 72.5655 iterations 15
Cbc0038I Pass   8: suminf.    1.62316 (14) obj. 72.5655 iterations 33
Cbc0038I Pass   9: suminf.    0.99046 (20) obj. 72.5655 iterations 17
Cbc0038I Pass  10: suminf.    2.20414 (12) obj. 72.5655 iterations 35
Cbc0038I Pass  11: suminf.    1.03811 (15) obj. 72.5655 iterations 19
Cbc0038I Pass  12: suminf.    2.38920 (14) obj. 72.5655 iterations 25
Cbc0038I Pass  13: suminf.    1.09178 (16) obj. 72.5655 iterations 19
Cbc0038I Pass  14: suminf.    1.51356 (6) obj. 72.5655 iterations 22
Cbc0038I Pass  15: suminf.    1.19063 (15) obj. 72.5655 iterations 22
Cbc0038I Pass  16: suminf.    6.00000 (12) obj. 72.5655 iterations 23
Cbc0038I Pass  17: suminf.    1.44865 (13) obj. 72.5655 iterations 11
Cbc0038I Pass  18: suminf.    1.01296 (27) obj. 72.5655 iterations 12
Cbc0038I Pass  19: suminf.    0.30296 (12) obj. 72.5655 iterations 34
Cbc0038I Pass  20: suminf.    0.24608 (24) obj. 72.5655 iterations 11
Cbc0038I Pass  21: suminf.    4.15161 (20) obj. 72.5655 iterations 44
Cbc0038I Pass  22: suminf.    1.92842 (14) obj. 72.5655 iterations 7
Cbc0038I Pass  23: suminf.    0.93684 (13) obj. 72.5655 iterations 18
Cbc0038I Pass  24: suminf.    1.23584 (9) obj. 72.5655 iterations 24
Cbc0038I Pass  25: suminf.    1.00549 (12) obj. 72.5655 iterations 13
Cbc0038I Pass  26: suminf.    0.49970 (6) obj. 72.5655 iterations 20
Cbc0038I Pass  27: suminf.    0.35395 (27) obj. 72.5655 iterations 14
Cbc0038I Pass  28: suminf.    3.98257 (21) obj. 72.5655 iterations 32
Cbc0038I Pass  29: suminf.    1.29532 (12) obj. 72.5655 iterations 17
Cbc0038I Pass  30: suminf.    2.27545 (10) obj. 72.5655 iterations 16
Cbc0038I Pass  31: suminf.    0.96707 (27) obj. 72.5655 iterations 17
Cbc0038I Rounding solution of 72.5655 is better than previous of 79.8123

Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 604 rows 87 columns - 5 fixed gives 41, 18 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I Round again with cutoff of 59.5214
Cbc0038I Pass  31: suminf.    4.25939 (16) obj. 59.5214 iterations 1
Cbc0038I Pass  32: suminf.    2.33411 (11) obj. 59.5214 iterations 22
Cbc0038I Pass  33: suminf.    4.00000 (8) obj. 38.0821 iterations 20
Cbc0038I Pass  34: suminf.    1.47101 (11) obj. 59.5214 iterations 22
Cbc0038I Pass  35: suminf.    2.78964 (8) obj. 59.5214 iterations 18
Cbc0038I Pass  36: suminf.    1.65515 (16) obj. 59.5214 iterations 20
Cbc0038I Pass  37: suminf.    1.28039 (10) obj. 59.5214 iterations 10
Cbc0038I Pass  38: suminf.    2.32002 (6) obj. 59.5214 iterations 21
Cbc0038I Pass  39: suminf.    1.75041 (15) obj. 59.5214 iterations 13
Cbc0038I Pass  40: suminf.    3.77661 (14) obj. 59.5214 iterations 29
Cbc0038I Pass  41: suminf.    2.38328 (13) obj. 59.5214 iterations 13
Cbc0038I Pass  42: suminf.    1.45161 (6) obj. 59.5214 iterations 16
Cbc0038I Pass  43: suminf.    1.43218 (9) obj. 59.5214 iterations 17
Cbc0038I Pass  44: suminf.    1.23536 (9) obj. 59.5214 iterations 16
Cbc0038I Pass  45: suminf.    0.91485 (9) obj. 59.5214 iterations 15
Cbc0038I Pass  46: suminf.    1.35845 (9) obj. 59.5214 iterations 21
Cbc0038I Pass  47: suminf.    1.10936 (16) obj. 59.5214 iterations 17
Cbc0038I Pass  48: suminf.    4.35140 (12) obj. 59.5214 iterations 32
Cbc0038I Pass  49: suminf.    4.00000 (12) obj. 59.5214 iterations 14
Cbc0038I Pass  50: suminf.    1.48842 (6) obj. 59.5214 iterations 19
Cbc0038I Pass  51: suminf.    1.26611 (9) obj. 59.5214 iterations 17
Cbc0038I Pass  52: suminf.    2.84494 (9) obj. 59.5214 iterations 18
Cbc0038I Pass  53: suminf.    1.43218 (13) obj. 59.5214 iterations 16
Cbc0038I Pass  54: suminf.    1.48842 (6) obj. 59.5214 iterations 15
Cbc0038I Pass  55: suminf.    4.16902 (25) obj. 59.5214 iterations 34
Cbc0038I Pass  56: suminf.    2.16974 (15) obj. 59.5214 iterations 20
Cbc0038I Pass  57: suminf.    4.64101 (14) obj. 59.5214 iterations 34
Cbc0038I Pass  58: suminf.    2.92750 (13) obj. 59.5214 iterations 9
Cbc0038I Pass  59: suminf.    2.40649 (14) obj. 59.5214 iterations 10
Cbc0038I Pass  60: suminf.    1.67135 (14) obj. 59.5214 iterations 13
Cbc0038I Rounding solution of 70.8802 is better than previous of 72.5655

Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 608 rows 89 columns - 5 fixed gives 50, 21 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.22 seconds)
Cbc0038I Round again with cutoff of 43.8684
Cbc0038I Pass  60: suminf.    6.50020 (16) obj. 43.8684 iterations 0
Cbc0038I Pass  61: suminf.    4.56270 (16) obj. 43.8684 iterations 16
Cbc0038I Pass  62: suminf.    5.35791 (14) obj. 43.8684 iterations 20
Cbc0038I Pass  63: suminf.    2.98692 (14) obj. 43.8684 iterations 14
Cbc0038I Pass  64: suminf.    2.98692 (14) obj. 43.8684 iterations 0
Cbc0038I Pass  65: suminf.    4.72223 (12) obj. 43.8684 iterations 19
Cbc0038I Pass  66: suminf.    2.47389 (9) obj. 43.8684 iterations 17
Cbc0038I Pass  67: suminf.    2.28044 (13) obj. 43.8684 iterations 11
Cbc0038I Pass  68: suminf.    4.63023 (13) obj. 43.8684 iterations 19
Cbc0038I Pass  69: suminf.    3.67816 (10) obj. 43.8684 iterations 8
Cbc0038I Pass  70: suminf.    3.57961 (10) obj. 43.8684 iterations 12
Cbc0038I Pass  71: suminf.    2.90774 (6) obj. 43.8684 iterations 12
Cbc0038I Pass  72: suminf.    2.28044 (13) obj. 43.8684 iterations 11
Cbc0038I Pass  73: suminf.    4.63023 (13) obj. 43.8684 iterations 20
Cbc0038I Pass  74: suminf.    3.67816 (10) obj. 43.8684 iterations 9
Cbc0038I Pass  75: suminf.    3.57961 (10) obj. 43.8684 iterations 13
Cbc0038I Pass  76: suminf.    2.90774 (6) obj. 43.8684 iterations 12
Cbc0038I Pass  77: suminf.    2.28044 (13) obj. 43.8684 iterations 12
Cbc0038I Pass  78: suminf.    4.63023 (13) obj. 43.8684 iterations 19
Cbc0038I Pass  79: suminf.    3.67816 (10) obj. 43.8684 iterations 8
Cbc0038I Pass  80: suminf.    3.57961 (10) obj. 43.8684 iterations 12
Cbc0038I Pass  81: suminf.    2.90774 (6) obj. 43.8684 iterations 11
Cbc0038I Pass  82: suminf.    2.28044 (13) obj. 43.8684 iterations 11
Cbc0038I Pass  83: suminf.    4.63023 (13) obj. 43.8684 iterations 19
Cbc0038I Pass  84: suminf.    3.67816 (10) obj. 43.8684 iterations 8
Cbc0038I Pass  85: suminf.    3.57961 (10) obj. 43.8684 iterations 11
Cbc0038I Pass  86: suminf.    2.90774 (6) obj. 43.8684 iterations 12
Cbc0038I Pass  87: suminf.    2.28044 (13) obj. 43.8684 iterations 12
Cbc0038I Pass  88: suminf.    4.63023 (13) obj. 43.8684 iterations 20
Cbc0038I Pass  89: suminf.    3.67816 (10) obj. 43.8684 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 612 rows 91 columns, reduced to 575 rows 71 columns - 5 fixed gives 39, 17 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.35 seconds)
Cbc0038I After 0.35 seconds - Feasibility pump exiting with objective of 70.8802 - took 0.34 seconds
Cbc0012I Integer solution of 70.880181 found by feasibility pump after 0 iterations and 0 nodes (0.35 seconds)
Cbc0038I Full problem 612 rows 91 columns, reduced to 555 rows 65 columns - 5 fixed gives 39, 17 - ok now
Cbc0012I Integer solution of 68.264193 found by DiveCoefficient after 80 iterations and 0 nodes (0.37 seconds)
Cbc0031I 3 added rows had average density of 2.6666667
Cbc0013I At root node, 3 cuts changed objective from 7.3448222 to 68.264193 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 164 row cuts average 2.8 elements, 5 column cuts (5 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 10 row cuts average 6.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 25 row cuts average 10.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0001I Search completed - best objective 68.2641926635, took 80 iterations and 0 nodes (0.37 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 7.34482 to 68.2642
Probing was tried 2 times and created 169 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Gomory was tried 2 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 2 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 2 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                68.26419266
Enumerated nodes:               0
Total iterations:               80
Time (CPU seconds):             0.37
Time (Wallclock seconds):       0.37

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.37   (Wallclock seconds):       0.37

Failed to find an optimal solution.


ERROR:


