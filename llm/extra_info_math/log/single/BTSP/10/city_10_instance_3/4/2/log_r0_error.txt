OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/58530f5040be4c208150d9c0a024589c-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/58530f5040be4c208150d9c0a024589c-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 187 COLUMNS
At line 963 RHS
At line 1146 BOUNDS
At line 1246 ENDATA
Problem MODEL has 182 rows, 100 columns and 576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7.34482 - 0.00 seconds
Cgl0004I processed model has 182 rows, 100 columns (99 integer (90 of which binary)) and 576 elements
Cbc0038I Initial state - 60 integers unsatisfied sum - 9.92257
Cbc0038I Pass   1: suminf.    0.88889 (4) obj. 97.0464 iterations 102
Cbc0038I Pass   2: suminf.    0.88889 (4) obj. 97.0464 iterations 10
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 102.883 iterations 15
Cbc0038I Solution found of 102.883
Cbc0038I Relaxing continuous gives 102.883
Cbc0038I Cleaned solution of 102.883
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 149 rows 75 columns - 4 fixed gives 40, 26 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 20 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of 93.3296
Cbc0038I Pass   4: suminf.    3.02611 (19) obj. 93.3296 iterations 2
Cbc0038I Pass   5: suminf.    2.84686 (15) obj. 93.3296 iterations 18
Cbc0038I Pass   6: suminf.    2.65349 (13) obj. 93.3296 iterations 25
Cbc0038I Pass   7: suminf.    2.22636 (14) obj. 93.3296 iterations 10
Cbc0038I Pass   8: suminf.    3.50000 (11) obj. 93.3296 iterations 23
Cbc0038I Pass   9: suminf.    0.66667 (6) obj. 93.3296 iterations 11
Cbc0038I Pass  10: suminf.    0.66667 (6) obj. 93.3296 iterations 11
Cbc0038I Pass  11: suminf.    2.33333 (7) obj. 93.3296 iterations 33
Cbc0038I Pass  12: suminf.    2.00000 (6) obj. 93.3296 iterations 18
Cbc0038I Pass  13: suminf.    1.33333 (4) obj. 93.3296 iterations 17
Cbc0038I Pass  14: suminf.    1.33333 (4) obj. 93.3296 iterations 12
Cbc0038I Pass  15: suminf.    1.33333 (6) obj. 93.3296 iterations 20
Cbc0038I Pass  16: suminf.    2.22222 (7) obj. 93.3296 iterations 37
Cbc0038I Pass  17: suminf.    1.33333 (6) obj. 93.3296 iterations 16
Cbc0038I Pass  18: suminf.    1.33333 (8) obj. 93.3296 iterations 20
Cbc0038I Pass  19: suminf.    1.33333 (7) obj. 93.3296 iterations 18
Cbc0038I Pass  20: suminf.    1.33333 (7) obj. 93.3296 iterations 16
Cbc0038I Pass  21: suminf.    2.00000 (6) obj. 93.3296 iterations 43
Cbc0038I Pass  22: suminf.    1.33333 (4) obj. 93.3296 iterations 25
Cbc0038I Pass  23: suminf.    1.33333 (4) obj. 93.3296 iterations 25
Cbc0038I Pass  24: suminf.    4.66591 (20) obj. 93.3296 iterations 29
Cbc0038I Pass  25: suminf.    1.33333 (6) obj. 93.3296 iterations 20
Cbc0038I Pass  26: suminf.    1.33333 (4) obj. 93.3296 iterations 13
Cbc0038I Pass  27: suminf.    1.33333 (4) obj. 93.3296 iterations 5
Cbc0038I Pass  28: suminf.    3.11111 (19) obj. 93.3296 iterations 19
Cbc0038I Pass  29: suminf.    1.77778 (8) obj. 93.3296 iterations 15
Cbc0038I Pass  30: suminf.    1.77778 (10) obj. 93.3296 iterations 13
Cbc0038I Pass  31: suminf.    2.27778 (13) obj. 93.3296 iterations 16
Cbc0038I Pass  32: suminf.    1.77778 (8) obj. 93.3296 iterations 21
Cbc0038I Pass  33: suminf.    2.00000 (6) obj. 93.3296 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 176 rows 94 columns - 4 fixed gives 84, 41 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of 102.883 - took 0.01 seconds
Cbc0012I Integer solution of 102.88343 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 182 rows 100 columns, reduced to 149 rows 75 columns - 10 fixed gives 7, 6 - ok now
Cbc0031I 8 added rows had average density of 58.5
Cbc0013I At root node, 8 cuts changed objective from 7.3448222 to 47.741713 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4327 row cuts average 3.8 elements, 2 column cuts (2 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1740 row cuts average 51.2 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 84 row cuts average 9.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 8 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 440 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 102.88343 best solution, best possible 47.741713 (0.18 seconds)
Cbc0012I Integer solution of 74.545288 found by DiveCoefficient after 5059 iterations and 4 nodes (0.21 seconds)
Cbc0012I Integer solution of 73.24616 found by DiveCoefficient after 5078 iterations and 5 nodes (0.21 seconds)
Cbc0016I Integer solution of 68.264193 found by strong branching after 5216 iterations and 9 nodes (0.21 seconds)
Cbc0001I Search completed - best objective 68.2641926635, took 5326 iterations and 12 nodes (0.22 seconds)
Cbc0032I Strong branching done 296 times (3045 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 5, 1 variables fixed on reduced cost
Cuts at root node changed objective from 7.34482 to 47.7417
Probing was tried 133 times and created 4720 cuts of which 0 were active after adding rounds of cuts (0.035 seconds)
Gomory was tried 132 times and created 1802 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 84 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
FlowCover was tried 100 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
TwoMirCuts was tried 132 times and created 652 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                68.26419266
Enumerated nodes:               12
Total iterations:               5326
Time (CPU seconds):             0.21
Time (Wallclock seconds):       0.22

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.21   (Wallclock seconds):       0.22



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/10/city_10_instance_3/4/2/solution_r0.py", line 77, in <module>
    dist = euclidean_transform(mat=coordinates)(tour[i], tour[i+1])
           ^^^^^^^^^^^^^^^^^^^
NameError: name 'euclidean_transform' is not defined


