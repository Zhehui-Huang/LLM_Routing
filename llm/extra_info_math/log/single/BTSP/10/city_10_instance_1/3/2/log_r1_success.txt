OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/b54401fdd1c44644995c6dd63dd0412f-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/b54401fdd1c44644995c6dd63dd0412f-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 1127 COLUMNS
At line 24619 RHS
At line 25742 BOUNDS
At line 25833 ENDATA
Problem MODEL has 1122 rows, 91 columns and 23310 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 6.11349 - 0.01 seconds
Cgl0004I processed model has 1122 rows, 91 columns (90 integer (90 of which binary)) and 23310 elements
Cbc0038I Initial state - 67 integers unsatisfied sum - 9.02523
Cbc0038I Pass   1: suminf.    4.00000 (8) obj. 41.839 iterations 76
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. 82.7103 iterations 8
Cbc0038I Solution found of 82.7103
Cbc0038I Relaxing continuous gives 82.7103
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1122 rows 91 columns, reduced to 1067 rows 69 columns - 5 fixed gives 131, 17 - ok now
Cbc0038I Full problem 1122 rows 91 columns, reduced to 131 rows 17 columns
Cbc0038I Mini branch and bound improved solution from 82.7103 to 82.7103 (0.04 seconds)
Cbc0038I Round again with cutoff of 75.0506
Cbc0038I Pass   3: suminf.    4.00000 (8) obj. 41.839 iterations 0
Cbc0038I Pass   4: suminf.    0.55565 (6) obj. 75.0506 iterations 8
Cbc0038I Pass   5: suminf.    0.48724 (9) obj. 75.0506 iterations 12
Cbc0038I Pass   6: suminf.    0.61861 (6) obj. 75.0506 iterations 20
Cbc0038I Pass   7: suminf.    0.56507 (13) obj. 75.0506 iterations 12
Cbc0038I Pass   8: suminf.    0.88401 (13) obj. 75.0506 iterations 21
Cbc0038I Pass   9: suminf.    0.53987 (11) obj. 75.0506 iterations 25
Cbc0038I Pass  10: suminf.    4.00000 (8) obj. 50.1199 iterations 22
Cbc0038I Pass  11: suminf.    0.82444 (6) obj. 75.0506 iterations 15
Cbc0038I Pass  12: suminf.    0.66643 (13) obj. 75.0506 iterations 8
Cbc0038I Pass  13: suminf.    1.31019 (12) obj. 75.0506 iterations 26
Cbc0038I Pass  14: suminf.    0.72308 (11) obj. 75.0506 iterations 13
Cbc0038I Pass  15: suminf.    4.00000 (8) obj. 71.4493 iterations 23
Cbc0038I Pass  16: suminf.    0.73392 (6) obj. 75.0506 iterations 13
Cbc0038I Pass  17: suminf.    0.68502 (10) obj. 75.0506 iterations 13
Cbc0038I Pass  18: suminf.    0.55565 (6) obj. 75.0506 iterations 26
Cbc0038I Pass  19: suminf.    0.39359 (27) obj. 75.0506 iterations 13
Cbc0038I Pass  20: suminf.    1.44469 (21) obj. 75.0506 iterations 49
Cbc0038I Pass  21: suminf.    0.71483 (15) obj. 75.0506 iterations 17
Cbc0038I Pass  22: suminf.    0.47743 (12) obj. 75.0506 iterations 13
Cbc0038I Pass  23: suminf.    0.38866 (10) obj. 75.0506 iterations 13
Cbc0038I Pass  24: suminf.    0.51012 (6) obj. 75.0506 iterations 24
Cbc0038I Pass  25: suminf.    0.36134 (27) obj. 75.0506 iterations 16
Cbc0038I Pass  26: suminf.    0.54371 (8) obj. 75.0506 iterations 20
Cbc0038I Pass  27: suminf.    0.28884 (27) obj. 75.0506 iterations 16
Cbc0038I Pass  28: suminf.    1.30967 (22) obj. 75.0506 iterations 39
Cbc0038I Pass  29: suminf.    0.81646 (18) obj. 75.0506 iterations 15
Cbc0038I Pass  30: suminf.    1.02451 (14) obj. 75.0506 iterations 14
Cbc0038I Pass  31: suminf.    0.38866 (14) obj. 75.0506 iterations 17
Cbc0038I Pass  32: suminf.    5.00000 (10) obj. 51.3517 iterations 20
Cbc0038I Rounding solution of 78.6448 is better than previous of 82.7103

Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1122 rows 91 columns, reduced to 1118 rows 89 columns - 6 fixed gives 44, 13 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.20 seconds)
Cbc0038I Round again with cutoff of 61.2632
Cbc0038I Pass  32: suminf.    4.00000 (8) obj. 41.839 iterations 0
Cbc0038I Pass  33: suminf.    1.55582 (6) obj. 61.2632 iterations 8
Cbc0038I Pass  34: suminf.    1.49998 (9) obj. 61.2632 iterations 12
Cbc0038I Pass  35: suminf.    1.60721 (6) obj. 61.2632 iterations 20
Cbc0038I Pass  36: suminf.    1.56351 (13) obj. 61.2632 iterations 12
Cbc0038I Pass  37: suminf.    3.00000 (9) obj. 61.2632 iterations 30
Cbc0038I Pass  38: suminf.    2.76120 (9) obj. 61.2632 iterations 9
Cbc0038I Pass  39: suminf.    1.46244 (10) obj. 61.2632 iterations 10
Cbc0038I Pass  40: suminf.    1.23588 (6) obj. 61.2632 iterations 21
Cbc0038I Pass  41: suminf.    0.87541 (27) obj. 61.2632 iterations 15
Cbc0038I Pass  42: suminf.    3.00000 (9) obj. 61.2632 iterations 19
Cbc0038I Pass  43: suminf.    3.00000 (9) obj. 61.2632 iterations 11
Cbc0038I Pass  44: suminf.    2.36697 (8) obj. 61.2632 iterations 14
Cbc0038I Pass  45: suminf.    1.64625 (12) obj. 61.2632 iterations 12
Cbc0038I Pass  46: suminf.    2.26846 (8) obj. 61.2632 iterations 24
Cbc0038I Pass  47: suminf.    1.41936 (13) obj. 61.2632 iterations 9
Cbc0038I Pass  48: suminf.    1.47610 (6) obj. 61.2632 iterations 23
Cbc0038I Pass  49: suminf.    1.43421 (10) obj. 61.2632 iterations 13
Cbc0038I Pass  50: suminf.    1.61441 (6) obj. 61.2632 iterations 13
Cbc0038I Pass  51: suminf.    1.56865 (13) obj. 61.2632 iterations 14
Cbc0038I Pass  52: suminf.    1.38829 (6) obj. 61.2632 iterations 13
Cbc0038I Pass  53: suminf.    0.98338 (27) obj. 61.2632 iterations 14
Cbc0038I Pass  54: suminf.    2.56692 (14) obj. 61.2632 iterations 31
Cbc0038I Pass  55: suminf.    1.57933 (13) obj. 61.2632 iterations 12
Cbc0038I Pass  56: suminf.    4.00000 (8) obj. 61.2632 iterations 22
Cbc0038I Pass  57: suminf.    1.38829 (6) obj. 61.2632 iterations 8
Cbc0038I Pass  58: suminf.    0.98338 (27) obj. 61.2632 iterations 17
Cbc0038I Pass  59: suminf.    4.89788 (20) obj. 61.2632 iterations 31
Cbc0038I Pass  60: suminf.    3.28618 (12) obj. 61.2632 iterations 17
Cbc0038I Pass  61: suminf.    1.41951 (12) obj. 61.2632 iterations 22
Cbc0038I Rounding solution of 77.1557 is better than previous of 78.6448

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1122 rows 91 columns, reduced to 1116 rows 88 columns - 6 fixed gives 44, 13 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.35 seconds)
Cbc0038I Round again with cutoff of 44.7183
Cbc0038I Pass  61: suminf.    4.00000 (8) obj. 41.839 iterations 0
Cbc0038I Pass  62: suminf.    3.05290 (10) obj. 44.7183 iterations 9
Cbc0038I Pass  63: suminf.    2.75603 (9) obj. 44.7183 iterations 7
Cbc0038I Pass  64: suminf.    2.71527 (10) obj. 44.7183 iterations 3
Cbc0038I Pass  65: suminf.    2.79354 (6) obj. 44.7183 iterations 20
Cbc0038I Pass  66: suminf.    2.76164 (16) obj. 44.7183 iterations 18
Cbc0038I Pass  67: suminf.    4.95337 (15) obj. 44.7183 iterations 33
Cbc0038I Pass  68: suminf.    4.01566 (16) obj. 44.7183 iterations 15
Cbc0038I Pass  69: suminf.    5.19209 (14) obj. 44.7183 iterations 25
Cbc0038I Pass  70: suminf.    4.18090 (14) obj. 44.7183 iterations 14
Cbc0038I Pass  71: suminf.    4.36332 (12) obj. 44.7183 iterations 19
Cbc0038I Pass  72: suminf.    2.88323 (10) obj. 44.7183 iterations 15
Cbc0038I Pass  73: suminf.    2.79880 (6) obj. 44.7183 iterations 23
Cbc0038I Pass  74: suminf.    2.75517 (9) obj. 44.7183 iterations 13
Cbc0038I Pass  75: suminf.    3.20411 (9) obj. 44.7183 iterations 17
Cbc0038I Pass  76: suminf.    2.31480 (16) obj. 44.7183 iterations 10
Cbc0038I Pass  77: suminf.    4.70356 (13) obj. 44.7183 iterations 21
Cbc0038I Pass  78: suminf.    3.89565 (13) obj. 44.7183 iterations 5
Cbc0038I Pass  79: suminf.    2.49786 (10) obj. 44.7183 iterations 23
Cbc0038I Pass  80: suminf.    5.99213 (24) obj. 44.7183 iterations 34
Cbc0038I Pass  81: suminf.    5.83415 (23) obj. 44.7183 iterations 12
Cbc0038I Pass  82: suminf.    5.82044 (22) obj. 44.7183 iterations 31
Cbc0038I Pass  83: suminf.    5.30581 (23) obj. 44.7183 iterations 12
Cbc0038I Pass  84: suminf.    6.81796 (22) obj. 44.7183 iterations 30
Cbc0038I Pass  85: suminf.    5.02032 (21) obj. 44.7183 iterations 19
Cbc0038I Pass  86: suminf.    4.55139 (20) obj. 44.7183 iterations 5
Cbc0038I Pass  87: suminf.    4.59833 (17) obj. 44.7183 iterations 23
Cbc0038I Pass  88: suminf.    4.09107 (16) obj. 44.7183 iterations 13
Cbc0038I Pass  89: suminf.    3.18784 (14) obj. 44.7183 iterations 11
Cbc0038I Pass  90: suminf.    4.68678 (12) obj. 44.7183 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1122 rows 91 columns, reduced to 1102 rows 81 columns - 6 fixed gives 44, 13 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.53 seconds)
Cbc0038I After 0.53 seconds - Feasibility pump exiting with objective of 77.1557 - took 0.50 seconds
Cbc0012I Integer solution of 77.155687 found by feasibility pump after 0 iterations and 0 nodes (0.53 seconds)
Cbc0038I Full problem 1122 rows 91 columns, reduced to 1074 rows 70 columns - 1 fixed gives 1001, 55 - still too large
Cbc0031I 12 added rows had average density of 6.0833333
Cbc0013I At root node, 12 cuts changed objective from 6.113489 to 48.989111 in 19 passes
Cbc0014I Cut generator 0 (Probing) - 712 row cuts average 3.7 elements, 3 column cuts (3 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 165 row cuts average 16.4 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 322 row cuts average 18.9 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 77.155687 best solution, best possible 48.989111 (0.71 seconds)
Cbc0004I Integer solution of 56.612719 found after 536 iterations and 1 nodes (0.72 seconds)
Cbc0001I Search completed - best objective 56.61271941887, took 550 iterations and 2 nodes (0.72 seconds)
Cbc0032I Strong branching done 60 times (1079 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 6.11349 to 48.9891
Probing was tried 23 times and created 748 cuts of which 0 were active after adding rounds of cuts (0.024 seconds)
Gomory was tried 22 times and created 165 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Knapsack was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
FlowCover was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 22 times and created 377 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)

Result - Optimal solution found

Objective value:                56.61271942
Enumerated nodes:               2
Total iterations:               550
Time (CPU seconds):             0.72
Time (Wallclock seconds):       0.73

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.72   (Wallclock seconds):       0.73

Tour: [0, 4, 8, 3, 5, 9, 2, 7, 1, 6, 0]
Total travel cost: 289.0753138987659
Maximum distance between consecutive cities: 56.61271941887264


ERROR:


