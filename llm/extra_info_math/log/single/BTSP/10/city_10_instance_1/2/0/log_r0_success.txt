OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/b4ff98a620554ee5ad3be21a8cdb3e05-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/b4ff98a620554ee5ad3be21a8cdb3e05-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 187 COLUMNS
At line 945 RHS
At line 1128 BOUNDS
At line 1228 ENDATA
Problem MODEL has 182 rows, 100 columns and 576 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 6.11349 - 0.00 seconds
Cgl0004I processed model has 182 rows, 100 columns (90 integer (90 of which binary)) and 576 elements
Cbc0038I Initial state - 50 integers unsatisfied sum - 7.84921
Cbc0038I Pass   1: suminf.    1.60000 (8) obj. 65.0022 iterations 55
Cbc0038I Pass   2: suminf.    1.20000 (6) obj. 81.2527 iterations 20
Cbc0038I Pass   3: suminf.    1.20000 (4) obj. 81.2527 iterations 17
Cbc0038I Pass   4: suminf.    1.20000 (9) obj. 81.2527 iterations 12
Cbc0038I Pass   5: suminf.    1.20000 (4) obj. 81.2527 iterations 19
Cbc0038I Pass   6: suminf.    1.20000 (4) obj. 81.2527 iterations 2
Cbc0038I Pass   7: suminf.    1.20000 (8) obj. 81.2527 iterations 8
Cbc0038I Pass   8: suminf.    1.20000 (8) obj. 81.2527 iterations 9
Cbc0038I Pass   9: suminf.    0.00000 (0) obj. 81.6088 iterations 28
Cbc0038I Solution found of 81.6088
Cbc0038I Relaxing continuous gives 81.6088
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 1 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 152 rows 69 columns - 4 fixed gives 58, 34 - ok now
Cbc0038I Full problem 182 rows 100 columns, reduced to 30 rows 22 columns
Cbc0038I Mini branch and bound improved solution from 81.6088 to 80.5233 (0.01 seconds)
Cbc0038I Round again with cutoff of 73.0823
Cbc0038I Pass  10: suminf.    1.60000 (8) obj. 65.0022 iterations 0
Cbc0038I Pass  11: suminf.    1.40111 (11) obj. 73.0823 iterations 13
Cbc0038I Pass  12: suminf.    1.07250 (13) obj. 73.0823 iterations 27
Cbc0038I Pass  13: suminf.    0.68798 (11) obj. 73.0823 iterations 11
Cbc0038I Pass  14: suminf.    0.45344 (6) obj. 73.0823 iterations 30
Cbc0038I Pass  15: suminf.    0.30230 (4) obj. 73.0823 iterations 3
Cbc0038I Pass  16: suminf.    0.80000 (4) obj. 73.0823 iterations 16
Cbc0038I Pass  17: suminf.    0.80000 (4) obj. 73.0823 iterations 5
Cbc0038I Pass  18: suminf.    2.87203 (15) obj. 73.0823 iterations 32
Cbc0038I Pass  19: suminf.    1.30871 (11) obj. 73.0823 iterations 13
Cbc0038I Pass  20: suminf.    1.33333 (8) obj. 71.4493 iterations 19
Cbc0038I Pass  21: suminf.    1.13648 (7) obj. 73.0823 iterations 19
Cbc0038I Pass  22: suminf.    1.80000 (6) obj. 73.0823 iterations 4
Cbc0038I Pass  23: suminf.    1.13648 (12) obj. 73.0823 iterations 18
Cbc0038I Pass  24: suminf.    1.50932 (11) obj. 73.0823 iterations 19
Cbc0038I Pass  25: suminf.    0.97704 (10) obj. 73.0823 iterations 18
Cbc0038I Pass  26: suminf.    1.40000 (9) obj. 69.4401 iterations 23
Cbc0038I Pass  27: suminf.    2.20913 (18) obj. 73.0823 iterations 31
Cbc0038I Pass  28: suminf.    1.65611 (21) obj. 73.0823 iterations 21
Cbc0038I Pass  29: suminf.    0.74069 (12) obj. 73.0823 iterations 36
Cbc0038I Pass  30: suminf.    0.46275 (8) obj. 73.0823 iterations 9
Cbc0038I Pass  31: suminf.    0.00000 (0) obj. 71.4493 iterations 26
Cbc0038I Solution found of 71.4493
Cbc0038I Relaxing continuous gives 71.4493
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 166 rows 84 columns - 1 fixed gives 115, 72 - still too large
Cbc0038I Full problem 182 rows 100 columns, reduced to 115 rows 72 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 58.3821
Cbc0038I Pass  32: suminf.    1.92590 (9) obj. 58.3821 iterations 1
Cbc0038I Pass  33: suminf.    1.76295 (10) obj. 58.3821 iterations 5
Cbc0038I Pass  34: suminf.    2.49996 (9) obj. 58.3821 iterations 15
Cbc0038I Pass  35: suminf.    1.59673 (8) obj. 58.3821 iterations 10
Cbc0038I Pass  36: suminf.    1.92590 (9) obj. 58.3821 iterations 18
Cbc0038I Pass  37: suminf.    1.76295 (10) obj. 58.3821 iterations 18
Cbc0038I Pass  38: suminf.    2.38583 (8) obj. 58.3821 iterations 10
Cbc0038I Pass  39: suminf.    1.39646 (8) obj. 58.3821 iterations 5
Cbc0038I Pass  40: suminf.    1.26900 (7) obj. 58.3821 iterations 14
Cbc0038I Pass  41: suminf.    1.26900 (7) obj. 58.3821 iterations 6
Cbc0038I Pass  42: suminf.    1.52294 (7) obj. 58.3821 iterations 23
Cbc0038I Pass  43: suminf.    1.30044 (8) obj. 58.3821 iterations 3
Cbc0038I Pass  44: suminf.    1.33506 (8) obj. 58.3821 iterations 16
Cbc0038I Pass  45: suminf.    1.33506 (8) obj. 58.3821 iterations 10
Cbc0038I Pass  46: suminf.    1.26900 (4) obj. 58.3821 iterations 19
Cbc0038I Pass  47: suminf.    1.26900 (4) obj. 58.3821 iterations 6
Cbc0038I Pass  48: suminf.    0.80000 (4) obj. 58.3821 iterations 9
Cbc0038I Pass  49: suminf.    0.00000 (0) obj. 58.3821 iterations 18
Cbc0038I Solution found of 58.3821
Cbc0038I Relaxing continuous gives 56.6127
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 148 rows 66 columns - 2 fixed gives 94, 46 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 41.4629
Cbc0038I Pass  50: suminf.    3.47030 (14) obj. 41.4629 iterations 2
Cbc0038I Pass  51: suminf.    3.12486 (12) obj. 41.4629 iterations 3
Cbc0038I Pass  52: suminf.    3.86960 (13) obj. 41.4629 iterations 11
Cbc0038I Pass  53: suminf.    3.18482 (11) obj. 41.4629 iterations 6
Cbc0038I Pass  54: suminf.    2.74969 (9) obj. 41.4629 iterations 18
Cbc0038I Pass  55: suminf.    2.36455 (7) obj. 41.4629 iterations 7
Cbc0038I Pass  56: suminf.    1.91920 (4) obj. 41.4629 iterations 13
Cbc0038I Pass  57: suminf.    1.91920 (7) obj. 41.4629 iterations 5
Cbc0038I Pass  58: suminf.    2.06389 (7) obj. 41.4629 iterations 19
Cbc0038I Pass  59: suminf.    1.67875 (7) obj. 41.4629 iterations 8
Cbc0038I Pass  60: suminf.    2.51920 (7) obj. 41.4629 iterations 17
Cbc0038I Pass  61: suminf.    8.89234 (19) obj. 41.4629 iterations 22
Cbc0038I Pass  62: suminf.    4.85419 (19) obj. 41.4629 iterations 23
Cbc0038I Pass  63: suminf.    4.08083 (17) obj. 41.4629 iterations 6
Cbc0038I Pass  64: suminf.    2.89380 (7) obj. 41.4629 iterations 31
Cbc0038I Pass  65: suminf.    2.89119 (8) obj. 41.4629 iterations 7
Cbc0038I Pass  66: suminf.    2.89119 (8) obj. 41.4629 iterations 0
Cbc0038I Pass  67: suminf.    2.90933 (6) obj. 41.4629 iterations 16
Cbc0038I Pass  68: suminf.    1.07357 (10) obj. 41.4629 iterations 23
Cbc0038I Pass  69: suminf.    3.29663 (10) obj. 41.4629 iterations 18
Cbc0038I Pass  70: suminf.    3.23936 (11) obj. 41.4629 iterations 6
Cbc0038I Pass  71: suminf.    3.23936 (11) obj. 41.4629 iterations 0
Cbc0038I Pass  72: suminf.    2.99218 (9) obj. 41.4629 iterations 13
Cbc0038I Pass  73: suminf.    2.31170 (8) obj. 41.4629 iterations 12
Cbc0038I Pass  74: suminf.    2.48548 (7) obj. 41.4629 iterations 22
Cbc0038I Pass  75: suminf.    1.88548 (7) obj. 41.4629 iterations 8
Cbc0038I Pass  76: suminf.    2.88148 (8) obj. 41.4629 iterations 20
Cbc0038I Pass  77: suminf.    4.02688 (15) obj. 41.4629 iterations 12
Cbc0038I Pass  78: suminf.    3.88859 (10) obj. 41.4629 iterations 18
Cbc0038I Pass  79: suminf.    2.89119 (8) obj. 41.4629 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 1 continuous
Cbc0038I Full problem 182 rows 100 columns, reduced to 163 rows 83 columns - 2 fixed gives 72, 58 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of 56.6127 - took 0.02 seconds
Cbc0012I Integer solution of 56.612719 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 182 rows 100 columns, reduced to 141 rows 59 columns - 1 fixed gives 128, 51 - still too large
Cbc0038I Full problem 182 rows 100 columns, reduced to 128 rows 51 columns - too large
Cbc0031I 6 added rows had average density of 13.833333
Cbc0013I At root node, 64 cuts changed objective from 6.113489 to 45.044366 in 19 passes
Cbc0014I Cut generator 0 (Probing) - 627 row cuts average 3.9 elements, 4 column cuts (4 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 244 row cuts average 18.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 44 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 3 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 240 row cuts average 11.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0001I Search completed - best objective 56.61271941887, took 512 iterations and 0 nodes (0.04 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 6.11349 to 45.0444
Probing was tried 19 times and created 631 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Gomory was tried 19 times and created 244 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Knapsack was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 19 times and created 44 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
FlowCover was tried 19 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 19 times and created 240 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                56.61271942
Enumerated nodes:               0
Total iterations:               512
Time (CPU seconds):             0.04
Time (Wallclock seconds):       0.04

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.04

Status: Optimal
Tour: [0, 6, 1, 7, 9, 2, 5, 3, 4, 8, 0]
Total travel cost: 284.97459511381413
Maximum distance between consecutive cities: 56.61271941887264


ERROR:


