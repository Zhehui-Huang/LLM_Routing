OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/4654ed53807b4af6ad1b792acde00953-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/4654ed53807b4af6ad1b792acde00953-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 767 COLUMNS
At line 4075 RHS
At line 4838 BOUNDS
At line 5238 ENDATA
Problem MODEL has 762 rows, 400 columns and 2546 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.80466 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0004I processed model has 762 rows, 400 columns (380 integer (380 of which binary)) and 5624 elements
Cbc0038I Initial state - 253 integers unsatisfied sum - 19.8999
Cbc0038I Pass   1: suminf.    1.53846 (12) obj. 106.827 iterations 391
Cbc0038I Pass   2: suminf.    0.50000 (6) obj. 106.827 iterations 49
Cbc0038I Pass   3: suminf.    0.50000 (8) obj. 106.827 iterations 46
Cbc0038I Pass   4: suminf.    0.50000 (9) obj. 106.827 iterations 42
Cbc0038I Pass   5: suminf.    0.50847 (6) obj. 106.827 iterations 31
Cbc0038I Pass   6: suminf.    2.10526 (19) obj. 85.0412 iterations 120
Cbc0038I Pass   7: suminf.    1.60000 (15) obj. 85.0412 iterations 51
Cbc0038I Pass   8: suminf.    1.68136 (7) obj. 85.0412 iterations 52
Cbc0038I Pass   9: suminf.    1.60000 (8) obj. 85.0412 iterations 28
Cbc0038I Pass  10: suminf.    1.60000 (13) obj. 85.0412 iterations 49
Cbc0038I Pass  11: suminf.    1.60000 (11) obj. 106.827 iterations 78
Cbc0038I Pass  12: suminf.    1.60000 (13) obj. 90.8029 iterations 9
Cbc0038I Pass  13: suminf.    2.20000 (10) obj. 85.1469 iterations 115
Cbc0038I Pass  14: suminf.    1.60000 (13) obj. 85.0412 iterations 88
Cbc0038I Pass  15: suminf.    1.60000 (7) obj. 85.0412 iterations 48
Cbc0038I Pass  16: suminf.    1.60000 (7) obj. 85.0412 iterations 21
Cbc0038I Pass  17: suminf.    1.63737 (7) obj. 85.0412 iterations 43
Cbc0038I Pass  18: suminf.    1.60000 (8) obj. 85.0412 iterations 8
Cbc0038I Pass  19: suminf.    1.60000 (9) obj. 85.0412 iterations 18
Cbc0038I Pass  20: suminf.    1.61795 (12) obj. 87.6529 iterations 64
Cbc0038I Pass  21: suminf.    1.60000 (12) obj. 85.0412 iterations 45
Cbc0038I Pass  22: suminf.    1.95000 (6) obj. 96.1041 iterations 59
Cbc0038I Pass  23: suminf.    2.13333 (25) obj. 87.6641 iterations 155
Cbc0038I Pass  24: suminf.    1.80000 (9) obj. 89.0056 iterations 83
Cbc0038I Pass  25: suminf.    1.84211 (7) obj. 89.0056 iterations 61
Cbc0038I Pass  26: suminf.    1.80000 (13) obj. 89.0056 iterations 45
Cbc0038I Pass  27: suminf.    1.82564 (16) obj. 89.0056 iterations 63
Cbc0038I Pass  28: suminf.    1.80000 (15) obj. 89.0056 iterations 25
Cbc0038I Pass  29: suminf.    1.80000 (6) obj. 89.0056 iterations 66
Cbc0038I Pass  30: suminf.    1.80000 (6) obj. 89.0056 iterations 44
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 85 integers at bound fixed and 0 continuous
Cbc0038I Full problem 762 rows 400 columns, reduced to 677 rows 315 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I Full problem 763 rows 400 columns, reduced to 763 rows 400 columns - too large
Cbc0038I After 0.14 seconds - Feasibility pump exiting - took 0.06 seconds
Cbc0031I 54 added rows had average density of 51.259259
Cbc0013I At root node, 54 cuts changed objective from 2.8046607 to 24.771091 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4174 row cuts average 7.7 elements, 0 column cuts (0 active)  in 0.184 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 4083 row cuts average 73.2 elements, 0 column cuts (0 active)  in 0.078 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3966 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.060 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 54 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 1525 row cuts average 10.4 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 24.771091 (1.42 seconds)
Cbc0004I Integer solution of 84.005952 found after 18614 iterations and 22 nodes (2.08 seconds)
Cbc0012I Integer solution of 80.212219 found by DiveCoefficient after 19108 iterations and 23 nodes (2.10 seconds)
Cbc0004I Integer solution of 78.847955 found after 21560 iterations and 38 nodes (2.29 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 529 rows 167 columns - 3 fixed gives 362, 130 - ok now
Cbc0038I Full problem 762 rows 400 columns, reduced to 381 rows 35 columns
Cbc0004I Integer solution of 55.317267 found after 26108 iterations and 103 nodes (2.89 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 373 rows 41 columns
Cbc0004I Integer solution of 37.20215 found after 45207 iterations and 298 nodes (3.88 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 363 rows 41 columns
Cbc0004I Integer solution of 32.572995 found after 59843 iterations and 401 nodes (4.73 seconds)
Cbc0001I Search completed - best objective 32.5729949498, took 62438 iterations and 465 nodes (4.85 seconds)
Cbc0032I Strong branching done 2696 times (57979 iterations), fathomed 5 nodes and fixed 34 variables
Cbc0035I Maximum depth 60, 13 variables fixed on reduced cost
Cuts at root node changed objective from 2.80466 to 24.7711
Probing was tried 747 times and created 26035 cuts of which 0 were active after adding rounds of cuts (0.472 seconds)
Gomory was tried 731 times and created 5111 cuts of which 0 were active after adding rounds of cuts (0.169 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
MixedIntegerRounding2 was tried 731 times and created 6371 cuts of which 0 were active after adding rounds of cuts (0.190 seconds)
FlowCover was tried 100 times and created 54 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
TwoMirCuts was tried 731 times and created 2225 cuts of which 0 were active after adding rounds of cuts (0.085 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)

Result - Optimal solution found

Objective value:                32.57299495
Enumerated nodes:               465
Total iterations:               62438
Time (CPU seconds):             4.86
Time (Wallclock seconds):       4.87

Option for printingOptions changed from normal to all
Total time (CPU seconds):       4.86   (Wallclock seconds):       4.87

Tour: [0, 6, 2, 13, 12, 8, 1, 9, 15, 19, 18, 17, 16, 11, 10, 4, 7, 5, 14, 3, 0]
Total travel cost: 427.45
Maximum distance between consecutive cities: 32.57


ERROR:


