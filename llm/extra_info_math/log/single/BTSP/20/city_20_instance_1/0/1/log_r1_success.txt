OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/04ff5fb1571d458c887a26fc5538ceec-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/04ff5fb1571d458c887a26fc5538ceec-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 767 COLUMNS
At line 4075 RHS
At line 4838 BOUNDS
At line 5238 ENDATA
Problem MODEL has 762 rows, 400 columns and 2546 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.80466 - 0.00 seconds
Cgl0004I processed model has 762 rows, 400 columns (380 integer (380 of which binary)) and 2546 elements
Cbc0038I Initial state - 254 integers unsatisfied sum - 19.8999
Cbc0038I Pass   1: suminf.    0.80000 (8) obj. 85.3288 iterations 362
Cbc0038I Pass   2: suminf.    0.40000 (4) obj. 85.3288 iterations 30
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 85.3288 iterations 17
Cbc0038I Solution found of 85.3288
Cbc0038I Relaxing continuous gives 85.3288
Cbc0038I Before mini branch and bound, 117 integers at bound fixed and 0 continuous
Cbc0038I Full problem 762 rows 400 columns, reduced to 645 rows 283 columns - 6 fixed gives 381, 132 - ok now
Cbc0038I Full problem 762 rows 400 columns, reduced to 381 rows 132 columns
Cbc0038I Mini branch and bound improved solution from 85.3288 to 80.7775 (0.04 seconds)
Cbc0038I Round again with cutoff of 72.9802
Cbc0038I Pass   4: suminf.    2.64153 (26) obj. 72.9802 iterations 8
Cbc0038I Pass   5: suminf.    0.86766 (14) obj. 72.9802 iterations 46
Cbc0038I Pass   6: suminf.    1.59854 (9) obj. 72.9802 iterations 45
Cbc0038I Pass   7: suminf.    0.89149 (10) obj. 72.9802 iterations 26
Cbc0038I Pass   8: suminf.    1.05616 (9) obj. 72.9802 iterations 34
Cbc0038I Pass   9: suminf.    0.60488 (7) obj. 72.9802 iterations 17
Cbc0038I Pass  10: suminf.    1.80000 (6) obj. 72.9802 iterations 42
Cbc0038I Pass  11: suminf.    0.60000 (4) obj. 72.9802 iterations 18
Cbc0038I Pass  12: suminf.    0.60000 (4) obj. 72.9802 iterations 6
Cbc0038I Pass  13: suminf.    5.85368 (33) obj. 72.9802 iterations 100
Cbc0038I Pass  14: suminf.    1.94797 (28) obj. 72.9802 iterations 72
Cbc0038I Pass  15: suminf.    3.17502 (19) obj. 72.9802 iterations 87
Cbc0038I Pass  16: suminf.    2.63348 (28) obj. 72.9802 iterations 24
Cbc0038I Pass  17: suminf.    2.17502 (26) obj. 72.9802 iterations 22
Cbc0038I Pass  18: suminf.    2.73245 (17) obj. 72.9802 iterations 90
Cbc0038I Pass  19: suminf.    1.62123 (19) obj. 72.9802 iterations 43
Cbc0038I Pass  20: suminf.    1.38579 (15) obj. 72.9802 iterations 68
Cbc0038I Pass  21: suminf.    1.08543 (14) obj. 72.9802 iterations 33
Cbc0038I Pass  22: suminf.    2.13297 (9) obj. 72.9802 iterations 45
Cbc0038I Pass  23: suminf.    1.26735 (7) obj. 72.9802 iterations 31
Cbc0038I Pass  24: suminf.    0.14892 (4) obj. 72.9802 iterations 69
Cbc0038I Pass  25: suminf.    0.14892 (4) obj. 72.9802 iterations 23
Cbc0038I Pass  26: suminf.    0.50000 (4) obj. 72.9802 iterations 50
Cbc0038I Pass  27: suminf.    0.50000 (9) obj. 72.9802 iterations 39
Cbc0038I Pass  28: suminf.    0.50000 (4) obj. 72.9802 iterations 60
Cbc0038I Pass  29: suminf.    0.50000 (4) obj. 72.9802 iterations 5
Cbc0038I Pass  30: suminf.    0.50000 (9) obj. 72.9802 iterations 32
Cbc0038I Pass  31: suminf.    0.60000 (4) obj. 72.9802 iterations 42
Cbc0038I Pass  32: suminf.    0.50000 (9) obj. 72.9802 iterations 26
Cbc0038I Pass  33: suminf.    0.50000 (4) obj. 72.9802 iterations 18
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 96 integers at bound fixed and 0 continuous
Cbc0038I Full problem 762 rows 400 columns, reduced to 666 rows 304 columns - 7 fixed gives 381, 131 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of 80.7775 - took 0.07 seconds
Cbc0012I Integer solution of 80.777472 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 637 rows 275 columns - 7 fixed gives 379, 115 - ok now
Cbc0031I 45 added rows had average density of 89.177778
Cbc0013I At root node, 45 cuts changed objective from 2.8046607 to 29.067035 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 25212 row cuts average 18.1 elements, 3 column cuts (3 active)  in 0.378 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3452 row cuts average 71.8 elements, 0 column cuts (0 active)  in 0.065 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 605 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 80.777472 best solution, best possible 29.067035 (1.70 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 371 rows 58 columns
Cbc0038I Full problem 807 rows 400 columns, reduced to 640 rows 360 columns - too large
Cbc0004I Integer solution of 44.94441 found after 21700 iterations and 52 nodes (2.37 seconds)
Cbc0004I Integer solution of 36.400549 found after 22628 iterations and 82 nodes (2.51 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 403 rows 54 columns
Cbc0004I Integer solution of 32.572995 found after 23801 iterations and 107 nodes (2.61 seconds)
Cbc0001I Search completed - best objective 32.5729949498, took 24072 iterations and 114 nodes (2.62 seconds)
Cbc0032I Strong branching done 1362 times (28390 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 41, 0 variables fixed on reduced cost
Cuts at root node changed objective from 2.80466 to 29.067
Probing was tried 207 times and created 25541 cuts of which 0 were active after adding rounds of cuts (0.395 seconds)
Gomory was tried 207 times and created 3648 cuts of which 0 were active after adding rounds of cuts (0.080 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
MixedIntegerRounding2 was tried 207 times and created 608 cuts of which 0 were active after adding rounds of cuts (0.042 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
TwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)

Result - Optimal solution found

Objective value:                32.57299495
Enumerated nodes:               114
Total iterations:               24072
Time (CPU seconds):             2.64
Time (Wallclock seconds):       2.64

Option for printingOptions changed from normal to all
Total time (CPU seconds):       2.64   (Wallclock seconds):       2.65

Tour: [0, 5, 7, 4, 10, 11, 16, 17, 18, 19, 15, 1, 12, 13, 2, 8, 9, 6, 14, 3, 0]
Total travel cost: 427.8507212505633
Maximum distance between consecutive cities: 32.57299494980466


ERROR:


