OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/260758a81c5c4efeb7541208de79d95a-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/260758a81c5c4efeb7541208de79d95a-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 425 COLUMNS
At line 2707 RHS
At line 3128 BOUNDS
At line 3509 ENDATA
Problem MODEL has 420 rows, 381 columns and 1520 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.80466 - 0.00 seconds
Cgl0004I processed model has 420 rows, 381 columns (380 integer (380 of which binary)) and 1520 elements
Cbc0038I Initial state - 250 integers unsatisfied sum - 19.8044
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 100.424 iterations 313
Cbc0038I Solution found of 100.424
Cbc0038I Relaxing continuous gives 100.424
Cbc0038I Before mini branch and bound, 126 integers at bound fixed and 0 continuous
Cbc0038I Full problem 420 rows 381 columns, reduced to 294 rows 255 columns - 5 fixed gives 34, 145 - ok now
Cbc0038I Full problem 420 rows 381 columns, reduced to 34 rows 145 columns
Cbc0038I Mini branch and bound improved solution from 100.424 to 90.7579 (0.02 seconds)
Cbc0038I Round again with cutoff of 81.9626
Cbc0038I Pass   2: suminf.    2.05214 (14) obj. 81.9626 iterations 2
Cbc0038I Pass   3: suminf.    0.73534 (13) obj. 81.9626 iterations 36
Cbc0038I Pass   4: suminf.    0.20598 (6) obj. 81.9626 iterations 43
Cbc0038I Pass   5: suminf.    0.13732 (4) obj. 81.9626 iterations 27
Cbc0038I Solution found of 81.9626
Cbc0038I Relaxing continuous gives 76.5506
Cbc0038I Before mini branch and bound, 124 integers at bound fixed and 0 continuous
Cbc0038I Full problem 420 rows 381 columns, reduced to 296 rows 257 columns - 4 fixed gives 79, 174 - ok now
Cbc0038I Full problem 420 rows 381 columns, reduced to 79 rows 174 columns
Cbc0038I Mini branch and bound improved solution from 76.5506 to 72.4431 (0.03 seconds)
Cbc0038I Round again with cutoff of 58.5154
Cbc0038I Pass   6: suminf.    8.23288 (34) obj. 58.5154 iterations 5
Cbc0038I Pass   7: suminf.    4.40969 (26) obj. 58.5154 iterations 40
Cbc0038I Pass   8: suminf.    4.11476 (20) obj. 58.5154 iterations 52
Cbc0038I Pass   9: suminf.    2.70583 (22) obj. 58.5154 iterations 12
Cbc0038I Pass  10: suminf.    2.33732 (23) obj. 58.5154 iterations 23
Cbc0038I Pass  11: suminf.    2.59039 (14) obj. 58.5154 iterations 57
Cbc0038I Pass  12: suminf.    1.46610 (14) obj. 58.5154 iterations 23
Cbc0038I Pass  13: suminf.    1.24348 (10) obj. 58.5154 iterations 42
Cbc0038I Pass  14: suminf.    1.24232 (10) obj. 58.5154 iterations 18
Cbc0038I Pass  15: suminf.    1.63060 (7) obj. 58.5154 iterations 43
Cbc0038I Pass  16: suminf.    1.62944 (7) obj. 58.5154 iterations 20
Cbc0038I Pass  17: suminf.    1.37026 (7) obj. 58.5154 iterations 27
Cbc0038I Pass  18: suminf.   10.52256 (40) obj. 58.5154 iterations 56
Cbc0038I Pass  19: suminf.    4.52200 (31) obj. 58.5154 iterations 54
Cbc0038I Pass  20: suminf.    3.23016 (17) obj. 58.5154 iterations 53
Cbc0038I Pass  21: suminf.    2.41340 (16) obj. 58.5154 iterations 21
Cbc0038I Pass  22: suminf.    3.45950 (14) obj. 58.5154 iterations 48
Cbc0038I Pass  23: suminf.    2.69497 (16) obj. 58.5154 iterations 19
Cbc0038I Pass  24: suminf.    2.34402 (17) obj. 58.5154 iterations 14
Cbc0038I Pass  25: suminf.    2.00773 (8) obj. 58.5154 iterations 53
Cbc0038I Pass  26: suminf.    1.61074 (7) obj. 58.5154 iterations 24
Cbc0038I Pass  27: suminf.    2.21949 (10) obj. 58.5154 iterations 18
Cbc0038I Pass  28: suminf.    1.77162 (8) obj. 58.5154 iterations 20
Cbc0038I Pass  29: suminf.    2.00386 (7) obj. 58.5154 iterations 22
Cbc0038I Pass  30: suminf.    2.00386 (7) obj. 58.5154 iterations 26
Cbc0038I Pass  31: suminf.    1.44382 (6) obj. 58.5154 iterations 22
Cbc0038I Pass  32: suminf.    1.35953 (9) obj. 58.5154 iterations 25
Cbc0038I Pass  33: suminf.    1.86349 (6) obj. 58.5154 iterations 57
Cbc0038I Pass  34: suminf.    1.24232 (10) obj. 58.5154 iterations 27
Cbc0038I Pass  35: suminf.    0.96254 (4) obj. 58.5154 iterations 42
Cbc0038I Rounding solution of 58.5154 is better than previous of 72.4431

Cbc0038I Before mini branch and bound, 92 integers at bound fixed and 0 continuous
Cbc0038I Full problem 420 rows 381 columns, reduced to 328 rows 289 columns - 4 fixed gives 83, 190 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of 41.8022
Cbc0038I Pass  35: suminf.   12.29349 (37) obj. 41.8022 iterations 5
Cbc0038I Pass  36: suminf.    6.23207 (28) obj. 41.8022 iterations 37
Cbc0038I Pass  37: suminf.    6.09615 (29) obj. 41.8022 iterations 6
Cbc0038I Pass  38: suminf.    5.83917 (22) obj. 41.8022 iterations 46
Cbc0038I Pass  39: suminf.    4.99391 (22) obj. 41.8022 iterations 16
Cbc0038I Pass  40: suminf.    4.64428 (23) obj. 41.8022 iterations 9
Cbc0038I Pass  41: suminf.    6.51138 (20) obj. 41.8022 iterations 33
Cbc0038I Pass  42: suminf.    4.04988 (20) obj. 41.8022 iterations 35
Cbc0038I Pass  43: suminf.    4.04988 (20) obj. 41.8022 iterations 0
Cbc0038I Pass  44: suminf.    4.55957 (19) obj. 41.8022 iterations 33
Cbc0038I Pass  45: suminf.    3.89247 (18) obj. 41.8022 iterations 13
Cbc0038I Pass  46: suminf.    3.89247 (18) obj. 41.8022 iterations 0
Cbc0038I Pass  47: suminf.    2.97089 (14) obj. 41.8022 iterations 44
Cbc0038I Pass  48: suminf.    2.97089 (14) obj. 41.8022 iterations 0
Cbc0038I Pass  49: suminf.    4.01992 (11) obj. 41.8022 iterations 44
Cbc0038I Pass  50: suminf.    2.42922 (7) obj. 41.8022 iterations 17
Cbc0038I Pass  51: suminf.    1.54245 (7) obj. 41.8022 iterations 30
Cbc0038I Pass  52: suminf.    1.44606 (8) obj. 41.8022 iterations 5
Cbc0038I Pass  53: suminf.    2.70004 (7) obj. 41.8022 iterations 55
Cbc0038I Pass  54: suminf.    1.83011 (7) obj. 41.8022 iterations 12
Cbc0038I Pass  55: suminf.    3.08375 (9) obj. 41.8022 iterations 21
Cbc0038I Pass  56: suminf.    2.13007 (7) obj. 41.8022 iterations 3
Cbc0038I Pass  57: suminf.    2.04603 (7) obj. 41.8022 iterations 34
Cbc0038I Pass  58: suminf.   10.77060 (40) obj. 41.8022 iterations 62
Cbc0038I Pass  59: suminf.    5.29450 (27) obj. 41.8022 iterations 50
Cbc0038I Pass  60: suminf.    4.95829 (25) obj. 41.8022 iterations 3
Cbc0038I Pass  61: suminf.    6.01929 (25) obj. 41.8022 iterations 26
Cbc0038I Pass  62: suminf.    5.75946 (26) obj. 41.8022 iterations 5
Cbc0038I Pass  63: suminf.    5.70886 (22) obj. 41.8022 iterations 46
Cbc0038I Pass  64: suminf.    5.41582 (22) obj. 41.8022 iterations 21
Cbc0038I Rounding solution of 58.0086 is better than previous of 58.5154

Cbc0038I Before mini branch and bound, 91 integers at bound fixed and 0 continuous
Cbc0038I Full problem 420 rows 381 columns, reduced to 329 rows 290 columns - 4 fixed gives 82, 191 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of 30.1029
Cbc0038I Pass  64: suminf.   14.74105 (46) obj. 30.1029 iterations 11
Cbc0038I Pass  65: suminf.    9.83294 (34) obj. 30.1029 iterations 40
Cbc0038I Pass  66: suminf.    6.98166 (31) obj. 30.1029 iterations 23
Cbc0038I Pass  67: suminf.    6.98166 (31) obj. 30.1029 iterations 2
Cbc0038I Pass  68: suminf.    7.53088 (28) obj. 30.1029 iterations 34
Cbc0038I Pass  69: suminf.    5.73708 (23) obj. 30.1029 iterations 13
Cbc0038I Pass  70: suminf.    5.46510 (24) obj. 30.1029 iterations 10
Cbc0038I Pass  71: suminf.    6.71238 (23) obj. 30.1029 iterations 28
Cbc0038I Pass  72: suminf.    6.46938 (24) obj. 30.1029 iterations 8
Cbc0038I Pass  73: suminf.    6.19739 (24) obj. 30.1029 iterations 15
Cbc0038I Pass  74: suminf.    5.71014 (16) obj. 30.1029 iterations 30
Cbc0038I Pass  75: suminf.    4.47981 (20) obj. 30.1029 iterations 30
Cbc0038I Pass  76: suminf.    6.29155 (21) obj. 30.1029 iterations 47
Cbc0038I Pass  77: suminf.    6.29155 (22) obj. 30.1029 iterations 17
Cbc0038I Pass  78: suminf.    6.27708 (22) obj. 30.1029 iterations 16
Cbc0038I Pass  79: suminf.    6.18871 (22) obj. 30.1029 iterations 1
Cbc0038I Pass  80: suminf.    6.18871 (22) obj. 30.1029 iterations 0
Cbc0038I Pass  81: suminf.    3.43850 (16) obj. 30.1029 iterations 49
Cbc0038I Pass  82: suminf.    3.06429 (14) obj. 30.1029 iterations 20
Cbc0038I Pass  83: suminf.    3.89060 (12) obj. 30.1029 iterations 53
Cbc0038I Pass  84: suminf.    2.77626 (13) obj. 30.1029 iterations 34
Cbc0038I Pass  85: suminf.    2.24281 (14) obj. 30.1029 iterations 26
Cbc0038I Pass  86: suminf.    3.35669 (14) obj. 30.1029 iterations 62
Cbc0038I Pass  87: suminf.    3.35669 (14) obj. 30.1029 iterations 5
Cbc0038I Pass  88: suminf.    4.43227 (13) obj. 30.1029 iterations 48
Cbc0038I Pass  89: suminf.    3.11661 (14) obj. 30.1029 iterations 31
Cbc0038I Pass  90: suminf.    3.89060 (11) obj. 30.1029 iterations 41
Cbc0038I Pass  91: suminf.    2.60772 (14) obj. 30.1029 iterations 15
Cbc0038I Pass  92: suminf.    2.20741 (12) obj. 30.1029 iterations 36
Cbc0038I Pass  93: suminf.    1.98047 (13) obj. 30.1029 iterations 22
Cbc0038I Rounding solution of 53.6004 is better than previous of 58.0086

Cbc0038I Before mini branch and bound, 113 integers at bound fixed and 0 continuous
Cbc0038I Full problem 420 rows 381 columns, reduced to 307 rows 268 columns - 4 fixed gives 80, 180 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I Round again with cutoff of 19.1836
Cbc0038I Pass  93: suminf.   15.44165 (65) obj. 19.1836 iterations 19
Cbc0038I Pass  94: suminf.   12.83381 (59) obj. 19.1836 iterations 40
Cbc0038I Pass  95: suminf.   11.41753 (50) obj. 19.1836 iterations 25
Cbc0038I Pass  96: suminf.   10.66641 (51) obj. 19.1836 iterations 28
Cbc0038I Pass  97: suminf.    9.94649 (52) obj. 19.1836 iterations 25
Cbc0038I Pass  98: suminf.   10.26914 (50) obj. 19.1836 iterations 13
Cbc0038I Pass  99: suminf.   17.03262 (64) obj. 19.1836 iterations 98
Cbc0038I Pass 100: suminf.   16.13467 (59) obj. 19.1836 iterations 80
Cbc0038I Pass 101: suminf.   14.69057 (58) obj. 19.1836 iterations 15
Cbc0038I Pass 102: suminf.   13.51936 (53) obj. 19.1836 iterations 12
Cbc0038I Pass 103: suminf.   12.76019 (51) obj. 19.1836 iterations 22
Cbc0038I Pass 104: suminf.   11.87760 (51) obj. 19.1836 iterations 20
Cbc0038I Pass 105: suminf.   12.61806 (57) obj. 19.1836 iterations 34
Cbc0038I Pass 106: suminf.   11.35048 (53) obj. 19.1836 iterations 24
Cbc0038I Pass 107: suminf.   11.55131 (52) obj. 19.1836 iterations 24
Cbc0038I Pass 108: suminf.   10.06799 (49) obj. 19.1836 iterations 30
Cbc0038I Pass 109: suminf.   10.06923 (47) obj. 19.1836 iterations 39
Cbc0038I Pass 110: suminf.    8.98080 (44) obj. 19.1836 iterations 23
Cbc0038I Pass 111: suminf.   10.89070 (44) obj. 19.1836 iterations 32
Cbc0038I Pass 112: suminf.    9.84062 (47) obj. 19.1836 iterations 28
Cbc0038I Pass 113: suminf.    9.15996 (46) obj. 19.1836 iterations 14
Cbc0038I Pass 114: suminf.   10.42258 (44) obj. 19.1836 iterations 34
Cbc0038I Pass 115: suminf.    9.04557 (42) obj. 19.1836 iterations 27
Cbc0038I Pass 116: suminf.    9.04557 (43) obj. 19.1836 iterations 24
Cbc0038I Pass 117: suminf.   16.16686 (60) obj. 19.1836 iterations 93
Cbc0038I Pass 118: suminf.   12.83949 (54) obj. 19.1836 iterations 101
Cbc0038I Pass 119: suminf.   12.13408 (51) obj. 19.1836 iterations 7
Cbc0038I Pass 120: suminf.   12.21257 (50) obj. 19.1836 iterations 33
Cbc0038I Pass 121: suminf.   11.04809 (47) obj. 19.1836 iterations 34
Cbc0038I Pass 122: suminf.   10.65153 (48) obj. 19.1836 iterations 22
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Full problem 420 rows 381 columns, reduced to 356 rows 317 columns - 4 fixed gives 86, 211 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of 53.6004 - took 0.09 seconds
Cbc0012I Integer solution of 53.600373 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 420 rows 381 columns, reduced to 290 rows 251 columns - 2 fixed gives 165, 220 - ok now
Cbc0038I Full problem 420 rows 381 columns, reduced to 165 rows 220 columns
Cbc0012I Integer solution of 24.758837 found by DiveCoefficient after 2494 iterations and 0 nodes (0.21 seconds)
Cbc0031I 34 added rows had average density of 6.7941176
Cbc0013I At root node, 34 cuts changed objective from 2.8046607 to 24.758837 in 16 passes
Cbc0014I Cut generator 0 (Probing) - 6573 row cuts average 4.1 elements, 3 column cuts (3 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 560 row cuts average 28.2 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 23 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 617 row cuts average 23.3 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0001I Search completed - best objective 24.75883680628, took 2494 iterations and 0 nodes (0.21 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 2.80466 to 24.7588
Probing was tried 16 times and created 6576 cuts of which 0 were active after adding rounds of cuts (0.023 seconds)
Gomory was tried 16 times and created 560 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Knapsack was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 16 times and created 23 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
FlowCover was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 16 times and created 617 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                24.75883681
Enumerated nodes:               0
Total iterations:               2494
Time (CPU seconds):             0.22
Time (Wallclock seconds):       0.22

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.22   (Wallclock seconds):       0.22



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/20/city_20_instance_1/0/0/solution_r2.py", line 52, in <module>
    tour.append((current_InitStruct_location(), next_city))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'current_InitStruct_location' is not defined


