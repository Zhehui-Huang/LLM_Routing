OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/c3bf0ca0674a4351b2c7240048335e0d-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/c3bf0ca0674a4351b2c7240048335e0d-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 767 COLUMNS
At line 4075 RHS
At line 4838 BOUNDS
At line 5238 ENDATA
Problem MODEL has 762 rows, 400 columns and 2546 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.80466 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 342 strengthened rows, 0 substitutions
Cgl0004I processed model has 762 rows, 400 columns (380 integer (380 of which binary)) and 5624 elements
Cbc0038I Initial state - 252 integers unsatisfied sum - 19.9884
Cbc0038I Pass   1: suminf.    1.53846 (12) obj. 106.827 iterations 368
Cbc0038I Pass   2: suminf.    0.50000 (6) obj. 106.827 iterations 36
Cbc0038I Pass   3: suminf.    0.50000 (8) obj. 106.827 iterations 42
Cbc0038I Pass   4: suminf.    0.50000 (9) obj. 106.827 iterations 54
Cbc0038I Pass   5: suminf.    0.50847 (6) obj. 106.827 iterations 31
Cbc0038I Pass   6: suminf.    2.10526 (19) obj. 85.0412 iterations 131
Cbc0038I Pass   7: suminf.    1.60000 (15) obj. 85.0412 iterations 52
Cbc0038I Pass   8: suminf.    1.60000 (7) obj. 85.7963 iterations 65
Cbc0038I Pass   9: suminf.    1.60000 (12) obj. 85.0412 iterations 38
Cbc0038I Pass  10: suminf.    1.60000 (11) obj. 85.0412 iterations 53
Cbc0038I Pass  11: suminf.    1.60000 (13) obj. 90.8029 iterations 66
Cbc0038I Pass  12: suminf.    1.60000 (11) obj. 101.486 iterations 21
Cbc0038I Pass  13: suminf.    2.21053 (6) obj. 96.1041 iterations 51
Cbc0038I Pass  14: suminf.    1.60000 (11) obj. 86.4937 iterations 85
Cbc0038I Pass  15: suminf.    1.62105 (15) obj. 96.1443 iterations 101
Cbc0038I Pass  16: suminf.    1.60000 (11) obj. 96.1443 iterations 35
Cbc0038I Pass  17: suminf.    1.80000 (6) obj. 96.1041 iterations 78
Cbc0038I Pass  18: suminf.    1.60000 (12) obj. 99.7052 iterations 30
Cbc0038I Pass  19: suminf.    1.60000 (8) obj. 85.0412 iterations 100
Cbc0038I Pass  20: suminf.    1.60000 (11) obj. 85.0412 iterations 33
Cbc0038I Pass  21: suminf.    1.68421 (4) obj. 96.1041 iterations 38
Cbc0038I Pass  22: suminf.    1.60000 (8) obj. 85.0412 iterations 26
Cbc0038I Pass  23: suminf.    1.60000 (13) obj. 85.7963 iterations 57
Cbc0038I Pass  24: suminf.    2.70000 (6) obj. 96.1041 iterations 55
Cbc0038I Pass  25: suminf.    1.60000 (9) obj. 96.1041 iterations 54
Cbc0038I Pass  26: suminf.    1.60256 (7) obj. 96.1041 iterations 49
Cbc0038I Pass  27: suminf.    1.60000 (9) obj. 96.1041 iterations 26
Cbc0038I Pass  28: suminf.    1.60000 (10) obj. 96.1041 iterations 50
Cbc0038I Pass  29: suminf.    1.60000 (7) obj. 96.1041 iterations 14
Cbc0038I Pass  30: suminf.    1.70000 (13) obj. 96.1041 iterations 42
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 94 integers at bound fixed and 1 continuous
Cbc0038I Full problem 762 rows 400 columns, reduced to 522 rows 282 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I Full problem 763 rows 400 columns, reduced to 763 rows 400 columns - too large
Cbc0038I After 0.14 seconds - Feasibility pump exiting - took 0.06 seconds
Cbc0031I 42 added rows had average density of 62.690476
Cbc0013I At root node, 42 cuts changed objective from 2.8046607 to 24.669996 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5082 row cuts average 7.6 elements, 0 column cuts (0 active)  in 0.169 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 4484 row cuts average 69.4 elements, 0 column cuts (0 active)  in 0.070 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3359 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 40 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 1558 row cuts average 11.8 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 24.669996 (1.42 seconds)
Cbc0004I Integer solution of 76.236474 found after 19240 iterations and 32 nodes (2.30 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 413 rows 63 columns
Cbc0038I Full problem 762 rows 400 columns, reduced to 372 rows 35 columns
Cbc0004I Integer solution of 47.423623 found after 20909 iterations and 47 nodes (2.43 seconds)
Cbc0038I Full problem 762 rows 400 columns, reduced to 410 rows 49 columns
Cbc0012I Integer solution of 33.136083 found by rounding after 33346 iterations and 167 nodes (3.17 seconds)
Cbc0004I Integer solution of 32.572995 found after 34352 iterations and 194 nodes (3.21 seconds)
Cbc0001I Search completed - best objective 32.5729949498, took 34778 iterations and 207 nodes (3.23 seconds)
Cbc0032I Strong branching done 1672 times (40345 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 53, 11 variables fixed on reduced cost
Cuts at root node changed objective from 2.80466 to 24.67
Probing was tried 356 times and created 10372 cuts of which 0 were active after adding rounds of cuts (0.246 seconds)
Gomory was tried 353 times and created 4798 cuts of which 0 were active after adding rounds of cuts (0.107 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
MixedIntegerRounding2 was tried 353 times and created 4293 cuts of which 0 were active after adding rounds of cuts (0.104 seconds)
FlowCover was tried 100 times and created 40 cuts of which 0 were active after adding rounds of cuts (0.024 seconds)
TwoMirCuts was tried 353 times and created 1957 cuts of which 0 were active after adding rounds of cuts (0.050 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)

Result - Optimal solution found

Objective value:                32.57299495
Enumerated nodes:               207
Total iterations:               34778
Time (CPU seconds):             3.22
Time (Wallclock seconds):       3.24

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3.22   (Wallclock seconds):       3.24

Tour: [0, 3, 14, 5, 7, 4, 10, 11, 16, 17, 15, 19, 18, 2, 8, 12, 1, 13, 9, 6, 0]
Total travel cost: 443.69753810251024
Maximum distance between consecutive cities: 32.57299494980466


ERROR:


