OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/4ca81d8f604c4aac9c57c299576cf6c7-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/4ca81d8f604c4aac9c57c299576cf6c7-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 427 COLUMNS
At line 2053 RHS
At line 2476 BOUNDS
At line 2687 ENDATA
Problem MODEL has 422 rows, 211 columns and 1204 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 5.05972 - 0.00 seconds
Cgl0004I processed model has 331 rows, 211 columns (210 integer (210 of which binary)) and 1022 elements
Cbc0038I Initial state - 111 integers unsatisfied sum - 15
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 96.2549 iterations 164
Cbc0038I Solution found of 96.2549
Cbc0038I Relaxing continuous gives 96.2549
Cbc0038I Before mini branch and bound, 94 integers at bound fixed and 0 continuous
Cbc0038I Full problem 331 rows 211 columns, reduced to 185 rows 117 columns - 3 fixed gives 56, 74 - ok now
Cbc0038I Full problem 331 rows 211 columns, reduced to 56 rows 74 columns
Cbc0038I Mini branch and bound improved solution from 96.2549 to 68.4471 (0.01 seconds)
Cbc0038I Round again with cutoff of 62.1083
Cbc0038I Pass   2: suminf.    3.50576 (19) obj. 62.1083 iterations 7
Cbc0038I Pass   3: suminf.    2.10321 (17) obj. 62.1083 iterations 33
Cbc0038I Pass   4: suminf.    3.29786 (12) obj. 62.1083 iterations 32
Cbc0038I Pass   5: suminf.    2.29786 (12) obj. 62.1083 iterations 15
Cbc0038I Pass   6: suminf.    2.10375 (15) obj. 62.1083 iterations 7
Cbc0038I Pass   7: suminf.    0.92590 (7) obj. 62.1083 iterations 35
Cbc0038I Pass   8: suminf.    0.89859 (9) obj. 62.1083 iterations 23
Cbc0038I Pass   9: suminf.    1.18512 (7) obj. 62.1083 iterations 33
Cbc0038I Pass  10: suminf.    1.09954 (9) obj. 62.1083 iterations 21
Cbc0038I Pass  11: suminf.    0.92590 (7) obj. 62.1083 iterations 30
Cbc0038I Pass  12: suminf.    4.76092 (22) obj. 62.1083 iterations 48
Cbc0038I Pass  13: suminf.    1.97735 (14) obj. 62.1083 iterations 41
Cbc0038I Pass  14: suminf.    1.53352 (6) obj. 62.1083 iterations 42
Cbc0038I Pass  15: suminf.    1.50071 (10) obj. 62.1083 iterations 27
Cbc0038I Pass  16: suminf.    1.62503 (7) obj. 62.1083 iterations 37
Cbc0038I Pass  17: suminf.    1.14369 (7) obj. 62.1083 iterations 22
Cbc0038I Pass  18: suminf.    1.53352 (6) obj. 62.1083 iterations 42
Cbc0038I Pass  19: suminf.    1.02235 (7) obj. 62.1083 iterations 19
Cbc0038I Pass  20: suminf.    1.62503 (7) obj. 62.1083 iterations 39
Cbc0038I Pass  21: suminf.    3.38978 (13) obj. 62.1083 iterations 53
Cbc0038I Pass  22: suminf.    2.26848 (10) obj. 62.1083 iterations 19
Cbc0038I Pass  23: suminf.    0.48134 (4) obj. 62.1083 iterations 34
Cbc0038I Pass  24: suminf.    0.48134 (4) obj. 62.1083 iterations 18
Cbc0038I Pass  25: suminf.    0.85628 (7) obj. 62.1083 iterations 14
Cbc0038I Pass  26: suminf.    0.48134 (4) obj. 62.1083 iterations 25
Cbc0038I Pass  27: suminf.    0.48134 (4) obj. 62.1083 iterations 19
Cbc0038I Pass  28: suminf.    0.05463 (4) obj. 62.1083 iterations 17
Cbc0038I Pass  29: suminf.    5.39256 (19) obj. 62.1083 iterations 42
Cbc0038I Pass  30: suminf.    1.78881 (10) obj. 62.1083 iterations 26
Cbc0038I Pass  31: suminf.    1.49102 (7) obj. 62.1083 iterations 36
Cbc0038I Rounding solution of 62.9682 is better than previous of 68.4471

Cbc0038I Before mini branch and bound, 58 integers at bound fixed and 0 continuous
Cbc0038I Full problem 331 rows 211 columns, reduced to 238 rows 153 columns - 3 fixed gives 72, 100 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 50.6986
Cbc0038I Pass  31: suminf.    6.23859 (24) obj. 50.6986 iterations 4
Cbc0038I Pass  32: suminf.    4.52090 (21) obj. 50.6986 iterations 23
Cbc0038I Pass  33: suminf.    4.48828 (22) obj. 50.6986 iterations 2
Cbc0038I Pass  34: suminf.    5.61130 (19) obj. 50.6986 iterations 39
Cbc0038I Pass  35: suminf.    3.09269 (14) obj. 50.6986 iterations 29
Cbc0038I Pass  36: suminf.    3.47692 (12) obj. 50.6986 iterations 31
Cbc0038I Pass  37: suminf.    2.83169 (13) obj. 50.6986 iterations 16
Cbc0038I Pass  38: suminf.    2.13428 (14) obj. 50.6986 iterations 21
Cbc0038I Pass  39: suminf.    4.52868 (11) obj. 50.6986 iterations 30
Cbc0038I Pass  40: suminf.    1.97206 (7) obj. 50.6986 iterations 10
Cbc0038I Pass  41: suminf.    1.97206 (10) obj. 50.6986 iterations 7
Cbc0038I Pass  42: suminf.    1.56936 (4) obj. 50.6986 iterations 25
Cbc0038I Pass  43: suminf.    1.56936 (7) obj. 50.6986 iterations 11
Cbc0038I Pass  44: suminf.    0.00000 (0) obj. 50.6986 iterations 24
Cbc0038I Solution found of 50.6986
Cbc0038I Relaxing continuous gives 50.2195
Cbc0038I Before mini branch and bound, 79 integers at bound fixed and 0 continuous
Cbc0038I Full problem 331 rows 211 columns, reduced to 206 rows 132 columns - 2 fixed gives 95, 98 - ok now
Cbc0038I Full problem 331 rows 211 columns, reduced to 95 rows 98 columns
Cbc0038I Mini branch and bound improved solution from 50.2195 to 50.2195 (0.03 seconds)
Cbc0038I Round again with cutoff of 36.6716
Cbc0038I Pass  45: suminf.    8.96546 (30) obj. 36.6716 iterations 4
Cbc0038I Pass  46: suminf.    6.91677 (27) obj. 36.6716 iterations 30
Cbc0038I Pass  47: suminf.    6.44967 (28) obj. 36.6716 iterations 10
Cbc0038I Pass  48: suminf.    6.29240 (26) obj. 36.6716 iterations 14
Cbc0038I Pass  49: suminf.    4.79634 (22) obj. 36.6716 iterations 6
Cbc0038I Pass  50: suminf.    4.79634 (22) obj. 36.6716 iterations 0
Cbc0038I Pass  51: suminf.    5.44261 (23) obj. 36.6716 iterations 26
Cbc0038I Pass  52: suminf.    5.13913 (23) obj. 36.6716 iterations 15
Cbc0038I Pass  53: suminf.    6.08176 (22) obj. 36.6716 iterations 27
Cbc0038I Pass  54: suminf.    5.22305 (22) obj. 36.6716 iterations 22
Cbc0038I Pass  55: suminf.    5.44946 (23) obj. 36.6716 iterations 35
Cbc0038I Pass  56: suminf.    5.13409 (24) obj. 36.6716 iterations 14
Cbc0038I Pass  57: suminf.    6.26151 (17) obj. 36.6716 iterations 41
Cbc0038I Pass  58: suminf.    4.44365 (19) obj. 36.6716 iterations 14
Cbc0038I Pass  59: suminf.    4.44365 (19) obj. 36.6716 iterations 0
Cbc0038I Pass  60: suminf.    4.95170 (17) obj. 36.6716 iterations 35
Cbc0038I Pass  61: suminf.    3.15708 (16) obj. 36.6716 iterations 14
Cbc0038I Pass  62: suminf.    4.20889 (14) obj. 36.6716 iterations 34
Cbc0038I Pass  63: suminf.    2.68440 (17) obj. 36.6716 iterations 25
Cbc0038I Pass  64: suminf.    2.97718 (12) obj. 36.6716 iterations 34
Cbc0038I Pass  65: suminf.    2.48767 (13) obj. 36.6716 iterations 12
Cbc0038I Pass  66: suminf.    2.65289 (11) obj. 36.6716 iterations 31
Cbc0038I Pass  67: suminf.    2.14505 (7) obj. 36.6716 iterations 22
Cbc0038I Pass  68: suminf.    1.61106 (7) obj. 36.6716 iterations 9
Cbc0038I Pass  69: suminf.    1.34508 (9) obj. 36.6716 iterations 8
Cbc0038I Pass  70: suminf.    2.53540 (9) obj. 36.6716 iterations 15
Cbc0038I Pass  71: suminf.    1.90038 (12) obj. 36.6716 iterations 7
Cbc0038I Pass  72: suminf.    3.26880 (11) obj. 36.6716 iterations 27
Cbc0038I Pass  73: suminf.    2.23884 (12) obj. 36.6716 iterations 15
Cbc0038I Pass  74: suminf.    3.10126 (9) obj. 36.6716 iterations 27
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Full problem 331 rows 211 columns, reduced to 217 rows 138 columns - 2 fixed gives 98, 100 - ok now
Cbc0038I Full problem 331 rows 211 columns, reduced to 98 rows 100 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of 50.2195 - took 0.04 seconds
Cbc0012I Integer solution of 50.219518 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 331 rows 211 columns, reduced to 180 rows 112 columns - 2 fixed gives 73, 78 - ok now
Cbc0038I Full problem 331 rows 211 columns, reduced to 73 rows 78 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from 5.0597212 to 5.0597212 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective 50.21951811796, took 0 iterations and 0 nodes (0.05 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 5.05972 to 5.05972
Probing was tried 1 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                50.21951812
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.05
Time (Wallclock seconds):       0.05

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.05

Tour: [0, 9, 7, 6, 14, 8, 1, 13, 5, 3, 10, 4, 0, 9, 7, 0]
Total travel cost: 476.75634402505204
Maximum distance between consecutive cities: 50.21951811795888


ERROR:


