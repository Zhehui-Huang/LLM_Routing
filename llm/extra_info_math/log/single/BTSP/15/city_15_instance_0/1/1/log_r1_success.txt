OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/d5313a9c2c414e8ea1aea270995fe027-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/d5313a9c2c414e8ea1aea270995fe027-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 427 COLUMNS
At line 2235 RHS
At line 2658 BOUNDS
At line 2869 ENDATA
Problem MODEL has 422 rows, 225 columns and 1386 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 4.20461 - 0.00 seconds
Cgl0004I processed model has 422 rows, 225 columns (210 integer (210 of which binary)) and 1386 elements
Cbc0038I Initial state - 134 integers unsatisfied sum - 15
Cbc0038I Pass   1: suminf.    0.85714 (6) obj. 92.6553 iterations 180
Cbc0038I Pass   2: suminf.    0.57143 (4) obj. 92.6553 iterations 24
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 92.6553 iterations 26
Cbc0038I Solution found of 92.6553
Cbc0038I Relaxing continuous gives 92.6553
Cbc0038I Before mini branch and bound, 70 integers at bound fixed and 1 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 319 rows 154 columns - 4 fixed gives 174, 95 - ok now
Cbc0038I Full problem 422 rows 225 columns, reduced to 95 rows 79 columns
Cbc0038I Mini branch and bound improved solution from 92.6553 to 71.8053 (0.01 seconds)
Cbc0038I Round again with cutoff of 65.0452
Cbc0038I Pass   4: suminf.    4.97453 (25) obj. 65.0452 iterations 10
Cbc0038I Pass   5: suminf.    2.33617 (13) obj. 65.0452 iterations 42
Cbc0038I Pass   6: suminf.    1.72677 (14) obj. 65.0452 iterations 16
Cbc0038I Pass   7: suminf.    1.15066 (7) obj. 65.0452 iterations 33
Cbc0038I Pass   8: suminf.    0.76362 (10) obj. 65.0452 iterations 11
Cbc0038I Pass   9: suminf.    2.35608 (12) obj. 65.0452 iterations 21
Cbc0038I Pass  10: suminf.    1.84674 (10) obj. 65.0452 iterations 3
Cbc0038I Pass  11: suminf.    1.28571 (6) obj. 65.0452 iterations 34
Cbc0038I Pass  12: suminf.    0.62800 (9) obj. 65.0452 iterations 22
Cbc0038I Pass  13: suminf.    1.53325 (7) obj. 65.0452 iterations 24
Cbc0038I Pass  14: suminf.    1.53325 (7) obj. 65.0452 iterations 0
Cbc0038I Pass  15: suminf.    1.05657 (7) obj. 65.0452 iterations 35
Cbc0038I Pass  16: suminf.    0.62800 (9) obj. 65.0452 iterations 22
Cbc0038I Pass  17: suminf.    2.02067 (9) obj. 65.0452 iterations 30
Cbc0038I Pass  18: suminf.    1.53325 (7) obj. 65.0452 iterations 3
Cbc0038I Pass  19: suminf.    1.25600 (7) obj. 65.0452 iterations 40
Cbc0038I Pass  20: suminf.    0.62800 (9) obj. 65.0452 iterations 22
Cbc0038I Pass  21: suminf.    1.53325 (7) obj. 65.0452 iterations 25
Cbc0038I Pass  22: suminf.    1.53325 (7) obj. 65.0452 iterations 0
Cbc0038I Pass  23: suminf.    1.05657 (7) obj. 65.0452 iterations 32
Cbc0038I Pass  24: suminf.    0.62800 (9) obj. 65.0452 iterations 18
Cbc0038I Pass  25: suminf.    2.02067 (9) obj. 65.0452 iterations 33
Cbc0038I Pass  26: suminf.    1.53325 (7) obj. 65.0452 iterations 3
Cbc0038I Pass  27: suminf.    1.25600 (7) obj. 65.0452 iterations 38
Cbc0038I Pass  28: suminf.    0.62800 (9) obj. 65.0452 iterations 21
Cbc0038I Pass  29: suminf.    1.53325 (7) obj. 65.0452 iterations 23
Cbc0038I Pass  30: suminf.    1.53325 (7) obj. 65.0452 iterations 0
Cbc0038I Pass  31: suminf.    1.05657 (7) obj. 65.0452 iterations 31
Cbc0038I Pass  32: suminf.    0.62800 (9) obj. 65.0452 iterations 24
Cbc0038I Pass  33: suminf.    2.02067 (9) obj. 65.0452 iterations 30
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 356 rows 159 columns - 5 fixed gives 218, 81 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 71.8053 - took 0.02 seconds
Cbc0012I Integer solution of 71.805292 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 347 rows 150 columns - 5 fixed gives 216, 74 - ok now
Cbc0031I 17 added rows had average density of 30.352941
Cbc0013I At root node, 17 cuts changed objective from 4.2046106 to 42.379169 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7839 row cuts average 4.9 elements, 3 column cuts (3 active)  in 0.087 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1801 row cuts average 62.1 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 494 row cuts average 2.7 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 832 row cuts average 17.2 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 71.805292 best solution, best possible 42.379169 (0.45 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 202 rows 24 columns
Cbc0004I Integer solution of 42.37924 found after 7329 iterations and 43 nodes (0.66 seconds)
Cbc0001I Search completed - best objective 42.37924020083, took 7581 iterations and 49 nodes (0.67 seconds)
Cbc0032I Strong branching done 792 times (15140 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 24, 13 variables fixed on reduced cost
Cuts at root node changed objective from 4.20461 to 42.3792
Probing was tried 152 times and created 8092 cuts of which 0 were active after adding rounds of cuts (0.093 seconds)
Gomory was tried 151 times and created 1841 cuts of which 0 were active after adding rounds of cuts (0.023 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
MixedIntegerRounding2 was tried 151 times and created 657 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 151 times and created 980 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                42.37924020
Enumerated nodes:               49
Total iterations:               7581
Time (CPU seconds):             0.67
Time (Wallclock seconds):       0.67

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.67   (Wallclock seconds):       0.67

Tour: [0, 8, 9, 14, 1, 11, 12, 4, 7, 3, 6, 2, 5, 13, 10, 0]
Total travel cost: 402.64620334163334
Maximum distance between consecutive cities: 42.37924020083418


ERROR:


