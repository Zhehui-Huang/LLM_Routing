OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/827843b2bd3b4e0ba6d9ac7e665b8d71-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/827843b2bd3b4e0ba6d9ac7e665b8d71-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 427 COLUMNS
At line 2235 RHS
At line 2658 BOUNDS
At line 2883 ENDATA
Problem MODEL has 422 rows, 225 columns and 1386 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 4.20461 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0004I processed model has 422 rows, 225 columns (210 integer (210 of which binary)) and 3024 elements
Cbc0038I Initial state - 135 integers unsatisfied sum - 15
Cbc0038I Pass   1: suminf.    0.85714 (6) obj. 92.6553 iterations 225
Cbc0038I Pass   2: suminf.    0.53333 (4) obj. 92.6553 iterations 27
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 92.6553 iterations 23
Cbc0038I Solution found of 92.6553
Cbc0038I Relaxing continuous gives 92.6553
Cbc0038I Before mini branch and bound, 69 integers at bound fixed and 1 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 348 rows 155 columns - 4 fixed gives 180, 95 - ok now
Cbc0038I Full problem 422 rows 225 columns, reduced to 166 rows 78 columns
Cbc0038I Mini branch and bound improved solution from 92.6553 to 72.2496 (0.05 seconds)
Cbc0038I Round again with cutoff of 65.4451
Cbc0038I Pass   4: suminf.    4.86373 (25) obj. 65.4451 iterations 11
Cbc0038I Pass   5: suminf.    2.28906 (13) obj. 65.4451 iterations 33
Cbc0038I Pass   6: suminf.    1.66741 (14) obj. 65.4451 iterations 21
Cbc0038I Pass   7: suminf.    1.09154 (7) obj. 65.4451 iterations 47
Cbc0038I Pass   8: suminf.    0.72972 (10) obj. 65.4451 iterations 20
Cbc0038I Pass   9: suminf.    2.45401 (8) obj. 65.4451 iterations 31
Cbc0038I Pass  10: suminf.    1.22700 (10) obj. 65.4451 iterations 21
Cbc0038I Pass  11: suminf.    1.31064 (7) obj. 65.4451 iterations 39
Cbc0038I Pass  12: suminf.    1.03896 (10) obj. 65.4451 iterations 11
Cbc0038I Pass  13: suminf.    1.71429 (4) obj. 65.4451 iterations 52
Cbc0038I Pass  14: suminf.    0.83708 (7) obj. 65.4451 iterations 19
Cbc0038I Pass  15: suminf.    1.22700 (4) obj. 65.4451 iterations 16
Cbc0038I Pass  16: suminf.    1.22700 (7) obj. 65.4451 iterations 6
Cbc0038I Pass  17: suminf.    1.23376 (7) obj. 65.4451 iterations 53
Cbc0038I Pass  18: suminf.    0.96710 (7) obj. 65.4451 iterations 19
Cbc0038I Pass  19: suminf.    1.51809 (4) obj. 65.4451 iterations 41
Cbc0038I Pass  20: suminf.    1.51809 (4) obj. 65.4451 iterations 15
Cbc0038I Pass  21: suminf.    0.68966 (4) obj. 65.4451 iterations 42
Cbc0038I Pass  22: suminf.    0.69388 (7) obj. 65.4451 iterations 61
Cbc0038I Pass  23: suminf.    0.85714 (4) obj. 65.4451 iterations 43
Cbc0038I Pass  24: suminf.    0.70476 (7) obj. 65.4451 iterations 34
Cbc0038I Pass  25: suminf.    0.80000 (4) obj. 65.4451 iterations 44
Cbc0038I Pass  26: suminf.    0.68444 (7) obj. 65.4451 iterations 34
Cbc0038I Pass  27: suminf.    0.71096 (9) obj. 65.4451 iterations 46
Cbc0038I Pass  28: suminf.    2.18410 (22) obj. 65.4451 iterations 93
Cbc0038I Pass  29: suminf.    0.91479 (16) obj. 65.4451 iterations 41
Cbc0038I Pass  30: suminf.    0.99048 (9) obj. 65.4451 iterations 68
Cbc0038I Pass  31: suminf.    0.83678 (9) obj. 65.4451 iterations 24
Cbc0038I Pass  32: suminf.    2.04476 (7) obj. 65.4451 iterations 59
Cbc0038I Pass  33: suminf.    1.80380 (7) obj. 65.4451 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 379 rows 182 columns - 7 fixed gives 201, 64 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of 72.2496 - took 0.04 seconds
Cbc0012I Integer solution of 72.249567 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 349 rows 152 columns - 7 fixed gives 198, 55 - ok now
Cbc0031I 15 added rows had average density of 39.133333
Cbc0013I At root node, 15 cuts changed objective from 4.2046106 to 42.210075 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 10681 row cuts average 9.8 elements, 3 column cuts (3 active)  in 0.090 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2787 row cuts average 81.7 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 377 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 21 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 716 row cuts average 19.9 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 72.249567 best solution, best possible 42.210075 (0.63 seconds)
Cbc0012I Integer solution of 54.230987 found by DiveCoefficient after 8720 iterations and 17 nodes (0.81 seconds)
Cbc0004I Integer solution of 42.37924 found after 8874 iterations and 25 nodes (0.83 seconds)
Cbc0001I Search completed - best objective 42.37924020083, took 8903 iterations and 26 nodes (0.83 seconds)
Cbc0032I Strong branching done 524 times (11650 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 12, 6 variables fixed on reduced cost
Cuts at root node changed objective from 4.20461 to 42.2101
Probing was tried 141 times and created 11270 cuts of which 0 were active after adding rounds of cuts (0.095 seconds)
Gomory was tried 140 times and created 2799 cuts of which 0 were active after adding rounds of cuts (0.035 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
MixedIntegerRounding2 was tried 140 times and created 454 cuts of which 0 were active after adding rounds of cuts (0.032 seconds)
FlowCover was tried 100 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
TwoMirCuts was tried 140 times and created 978 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                42.37924020
Enumerated nodes:               26
Total iterations:               8903
Time (CPU seconds):             0.83
Time (Wallclock seconds):       0.84

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.83   (Wallclock seconds):       0.84

{'Tour': [0, 8, 11, 14, 9, 10, 13, 5, 2, 6, 3, 7, 4, 12, 1, 0], 'Total travel cost': 413.9209288321361, 'Maximum distance between consecutive cities': 42.37924020083418}


ERROR:


