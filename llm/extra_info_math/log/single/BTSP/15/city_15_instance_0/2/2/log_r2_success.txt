OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/ee4451d456f74f66bb7b9a21a24ffd47-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/ee4451d456f74f66bb7b9a21a24ffd47-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 427 COLUMNS
At line 2235 RHS
At line 2658 BOUNDS
At line 2883 ENDATA
Problem MODEL has 422 rows, 225 columns and 1386 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 4.20461 - 0.00 seconds
Cgl0004I processed model has 422 rows, 225 columns (210 integer (210 of which binary)) and 1386 elements
Cbc0038I Initial state - 134 integers unsatisfied sum - 15
Cbc0038I Pass   1: suminf.    0.85714 (6) obj. 92.6553 iterations 180
Cbc0038I Pass   2: suminf.    0.57143 (4) obj. 92.6553 iterations 24
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 92.6553 iterations 26
Cbc0038I Solution found of 92.6553
Cbc0038I Relaxing continuous gives 92.6553
Cbc0038I Before mini branch and bound, 70 integers at bound fixed and 1 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 319 rows 154 columns - 4 fixed gives 174, 95 - ok now
Cbc0038I Full problem 422 rows 225 columns, reduced to 95 rows 79 columns
Cbc0038I Mini branch and bound improved solution from 92.6553 to 71.8053 (0.01 seconds)
Cbc0038I Round again with cutoff of 65.0452
Cbc0038I Pass   4: suminf.    4.97453 (25) obj. 65.0452 iterations 10
Cbc0038I Pass   5: suminf.    2.33617 (13) obj. 65.0452 iterations 42
Cbc0038I Pass   6: suminf.    1.72677 (14) obj. 65.0452 iterations 16
Cbc0038I Pass   7: suminf.    1.15066 (7) obj. 65.0452 iterations 33
Cbc0038I Pass   8: suminf.    0.76362 (10) obj. 65.0452 iterations 11
Cbc0038I Pass   9: suminf.    2.35608 (12) obj. 65.0452 iterations 21
Cbc0038I Pass  10: suminf.    1.84674 (10) obj. 65.0452 iterations 3
Cbc0038I Pass  11: suminf.    1.28571 (6) obj. 65.0452 iterations 34
Cbc0038I Pass  12: suminf.    0.62800 (9) obj. 65.0452 iterations 22
Cbc0038I Pass  13: suminf.    1.53325 (7) obj. 65.0452 iterations 29
Cbc0038I Pass  14: suminf.    1.53325 (7) obj. 65.0452 iterations 0
Cbc0038I Pass  15: suminf.    1.05657 (7) obj. 65.0452 iterations 35
Cbc0038I Pass  16: suminf.    0.62800 (9) obj. 65.0452 iterations 26
Cbc0038I Pass  17: suminf.    2.02067 (9) obj. 65.0452 iterations 27
Cbc0038I Pass  18: suminf.    1.53325 (7) obj. 65.0452 iterations 3
Cbc0038I Pass  19: suminf.    1.25600 (7) obj. 65.0452 iterations 43
Cbc0038I Pass  20: suminf.    0.62800 (9) obj. 65.0452 iterations 22
Cbc0038I Pass  21: suminf.    1.53325 (7) obj. 65.0452 iterations 26
Cbc0038I Pass  22: suminf.    1.53325 (7) obj. 65.0452 iterations 0
Cbc0038I Pass  23: suminf.    1.05657 (7) obj. 65.0452 iterations 41
Cbc0038I Pass  24: suminf.    0.62800 (9) obj. 65.0452 iterations 25
Cbc0038I Pass  25: suminf.    2.02067 (9) obj. 65.0452 iterations 30
Cbc0038I Pass  26: suminf.    1.53325 (7) obj. 65.0452 iterations 3
Cbc0038I Pass  27: suminf.    1.25600 (7) obj. 65.0452 iterations 37
Cbc0038I Pass  28: suminf.    0.62800 (9) obj. 65.0452 iterations 23
Cbc0038I Pass  29: suminf.    1.53325 (7) obj. 65.0452 iterations 23
Cbc0038I Pass  30: suminf.    1.53325 (7) obj. 65.0452 iterations 0
Cbc0038I Pass  31: suminf.    1.05657 (7) obj. 65.0452 iterations 35
Cbc0038I Pass  32: suminf.    0.62800 (9) obj. 65.0452 iterations 21
Cbc0038I Pass  33: suminf.    2.02067 (9) obj. 65.0452 iterations 31
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 356 rows 159 columns - 7 fixed gives 210, 62 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 71.8053 - took 0.02 seconds
Cbc0012I Integer solution of 71.805292 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 348 rows 151 columns - 7 fixed gives 209, 58 - ok now
Cbc0031I 22 added rows had average density of 34.590909
Cbc0013I At root node, 22 cuts changed objective from 4.2046106 to 42.346981 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8160 row cuts average 14.7 elements, 3 column cuts (3 active)  in 0.074 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2653 row cuts average 77.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 308 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 660 row cuts average 21.8 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 71.805292 best solution, best possible 42.346981 (0.45 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 49 rows 18 columns
Cbc0038I Full problem 444 rows 225 columns, reduced to 304 rows 177 columns
Cbc0044I Reduced cost fixing - 304 rows, 177 columns - restarting search
Cbc0038I Unable to insert previous solution - using cutoff of 71.8053
Cbc0038I Initial state - 34 integers unsatisfied sum - 1.85714
Cbc0038I Pass   1: suminf.    1.00000 (11) obj. 42 iterations 66
Cbc0038I Pass   2: suminf.    1.00000 (6) obj. 50.448 iterations 43
Cbc0038I Pass   3: suminf.    1.00000 (6) obj. 50.448 iterations 12
Cbc0038I Pass   4: suminf.    1.00000 (4) obj. 50.448 iterations 30
Cbc0038I Pass   5: suminf.    1.00000 (11) obj. 47.7454 iterations 23
Cbc0038I Pass   6: suminf.    1.00000 (9) obj. 45.0429 iterations 42
Cbc0038I Pass   7: suminf.    1.00000 (9) obj. 50.448 iterations 17
Cbc0038I Pass   8: suminf.    1.00000 (9) obj. 50.448 iterations 27
Cbc0038I Pass   9: suminf.    1.00000 (9) obj. 50.448 iterations 29
Cbc0038I Pass  10: suminf.    1.14286 (7) obj. 50.448 iterations 30
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 114 integers at bound fixed and 1 continuous
Cbc0038I Full problem 304 rows 177 columns, reduced to 84 rows 56 columns
Cbc0038I Mini branch and bound improved solution from 1.79769e+308 to 46.0652 (0.80 seconds)
Cbc0038I Round again with cutoff of 45.5818
Cbc0038I Pass  10: suminf.    1.00000 (11) obj. 42 iterations 0
Cbc0038I Pass  11: suminf.    1.00000 (9) obj. 45.5818 iterations 42
Cbc0038I Pass  12: suminf.    1.00000 (11) obj. 45.5818 iterations 12
Cbc0038I Pass  13: suminf.    1.00000 (9) obj. 45.5818 iterations 40
Cbc0038I Pass  14: suminf.    3.36003 (24) obj. 45.5818 iterations 51
Cbc0038I Pass  15: suminf.    2.04832 (18) obj. 45.5818 iterations 45
Cbc0038I Pass  16: suminf.    2.27048 (14) obj. 45.5818 iterations 46
Cbc0038I Pass  17: suminf.    2.27048 (16) obj. 45.5818 iterations 6
Cbc0038I Pass  18: suminf.    2.79118 (8) obj. 45.5818 iterations 37
Cbc0038I Pass  19: suminf.    1.68131 (12) obj. 45.5818 iterations 27
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 93 integers at bound fixed and 1 continuous
Cbc0038I Full problem 304 rows 177 columns, reduced to 118 rows 77 columns
Cbc0038I Mini branch and bound improved solution from 46.0652 to 43.8292 (0.81 seconds)
Cbc0038I Round again with cutoff of 43.3097
Cbc0038I Pass  19: suminf.    1.00000 (11) obj. 42 iterations 0
Cbc0038I Pass  20: suminf.    1.00000 (9) obj. 43.3097 iterations 43
Cbc0038I Pass  21: suminf.    1.00000 (11) obj. 43.3097 iterations 18
Cbc0038I Pass  22: suminf.    1.00000 (9) obj. 43.3097 iterations 40
Cbc0038I Pass  23: suminf.    3.83429 (25) obj. 43.3097 iterations 58
Cbc0038I Pass  24: suminf.    2.99323 (20) obj. 43.3097 iterations 24
Cbc0038I Pass  25: suminf.    2.88535 (8) obj. 43.3097 iterations 49
Cbc0038I Pass  26: suminf.    2.10597 (12) obj. 43.3097 iterations 26
Cbc0038I Pass  27: suminf.    2.93653 (12) obj. 43.3097 iterations 33
Cbc0038I Pass  28: suminf.    2.35324 (14) obj. 43.3097 iterations 29
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 98 integers at bound fixed and 0 continuous
Cbc0038I Full problem 304 rows 177 columns, reduced to 235 rows 77 columns
Cbc0038I Mini branch and bound did not improve solution (0.82 seconds)
Cbc0038I After 0.82 seconds - Feasibility pump exiting with objective of 43.8292 - took 0.05 seconds
Cbc0012I Integer solution of 43.829214 found by feasibility pump after 0 iterations and 0 nodes (0.82 seconds)
Cbc0038I Full problem 304 rows 177 columns, reduced to 211 rows 44 columns - 9 fixed gives 184, 18 - ok now
Cbc0031I 15 added rows had average density of 24.933333
Cbc0013I At root node, 15 cuts changed objective from 41.23159 to 42.347011 in 7 passes
Cbc0014I Cut generator 0 (Probing) - 147 row cuts average 3.7 elements, 3 column cuts (3 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 27 row cuts average 16.3 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 37 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 100 row cuts average 19.7 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 9 (Stored from first) - 16 row cuts average 30.6 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, 43.829214 best solution, best possible 42.347011 (0.84 seconds)
Cbc0012I Integer solution of 42.37924 found by DiveCoefficient after 344 iterations and 4 nodes (0.86 seconds)
Cbc0001I Search completed - best objective 42.37924020083, took 351 iterations and 5 nodes (0.86 seconds)
Cbc0032I Strong branching done 158 times (3205 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 3, 0 variables fixed on reduced cost
Cbc0038I Probing was tried 15 times and created 220 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I Gomory was tried 14 times and created 48 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I Knapsack was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Clique was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 14 times and created 53 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I FlowCover was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I TwoMirCuts was tried 14 times and created 137 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Cbc0038I ZeroHalf was tried 7 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I Stored from first was tried 14 times and created 19 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0012I Integer solution of 42.37924 found by Reduced search after 7955 iterations and 55 nodes (0.86 seconds)
Cbc0001I Search completed - best objective 42.37924020083, took 7955 iterations and 55 nodes (0.86 seconds)
Cbc0032I Strong branching done 912 times (15927 iterations), fathomed 0 nodes and fixed 4 variables
Cbc0035I Maximum depth 23, 0 variables fixed on reduced cost
Cuts at root node changed objective from 4.20461 to 42.347
Probing was tried 168 times and created 9134 cuts of which 0 were active after adding rounds of cuts (0.084 seconds)
Gomory was tried 168 times and created 2761 cuts of which 0 were active after adding rounds of cuts (0.030 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
MixedIntegerRounding2 was tried 168 times and created 494 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
TwoMirCuts was tried 168 times and created 933 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                42.37924020
Enumerated nodes:               55
Total iterations:               7955
Time (CPU seconds):             0.86
Time (Wallclock seconds):       0.87

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.86   (Wallclock seconds):       0.87

Tour: [0, 8, 9, 11, 12, 14, 1, 4, 7, 3, 5, 2, 6, 13, 10, 0]
Total travel cost: 402.42051026870894
Maximum distance between consecutive cities: 42.37924020083418


ERROR:


