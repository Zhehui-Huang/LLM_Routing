OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/f5363db085b24f36bfb2b753babd066e-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/f5363db085b24f36bfb2b753babd066e-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 427 COLUMNS
At line 2263 RHS
At line 2686 BOUNDS
At line 2911 ENDATA
Problem MODEL has 422 rows, 225 columns and 1386 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.79761 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 182 strengthened rows, 0 substitutions
Cgl0004I processed model has 422 rows, 225 columns (224 integer (210 of which binary)) and 3024 elements
Cbc0038I Initial state - 122 integers unsatisfied sum - 14.3733
Cbc0038I Pass   1: suminf.    2.49394 (25) obj. 59.8407 iterations 196
Cbc0038I Pass   2: suminf.    3.60000 (23) obj. 60.0507 iterations 32
Cbc0038I Pass   3: suminf.    2.01778 (16) obj. 63.1703 iterations 66
Cbc0038I Pass   4: suminf.    1.92857 (9) obj. 58.3095 iterations 98
Cbc0038I Pass   5: suminf.    3.10000 (12) obj. 68.6375 iterations 38
Cbc0038I Pass   6: suminf.    1.72867 (19) obj. 54.4252 iterations 76
Cbc0038I Pass   7: suminf.    1.60000 (9) obj. 65.437 iterations 35
Cbc0038I Pass   8: suminf.    2.89655 (10) obj. 65.437 iterations 34
Cbc0038I Pass   9: suminf.    1.60000 (4) obj. 65.437 iterations 26
Cbc0038I Pass  10: suminf.    1.60000 (8) obj. 65.437 iterations 14
Cbc0038I Pass  11: suminf.    3.20000 (21) obj. 65.437 iterations 31
Cbc0038I Pass  12: suminf.    4.00000 (19) obj. 65.437 iterations 37
Cbc0038I Pass  13: suminf.    0.00000 (0) obj. 86.5563 iterations 86
Cbc0038I Solution found of 86.5563
Cbc0038I Relaxing continuous gives 86.5563
Cbc0038I Cleaned solution of 86.5563
Cbc0038I Before mini branch and bound, 63 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 354 rows 162 columns - 5 fixed gives 183, 84 - ok now
Cbc0038I Full problem 422 rows 225 columns, reduced to 139 rows 77 columns
Cbc0038I Mini branch and bound improved solution from 86.5563 to 58.3095 (0.05 seconds)
Cbc0038I Round again with cutoff of 52.8583
Cbc0038I Pass  14: suminf.    4.90292 (23) obj. 52.8583 iterations 8
Cbc0038I Pass  15: suminf.    3.51247 (22) obj. 52.8583 iterations 30
Cbc0038I Pass  16: suminf.    5.57227 (24) obj. 52.8583 iterations 65
Cbc0038I Pass  17: suminf.    3.21142 (19) obj. 52.8583 iterations 45
Cbc0038I Pass  18: suminf.    3.73612 (14) obj. 52.8583 iterations 79
Cbc0038I Pass  19: suminf.    4.84194 (21) obj. 52.8583 iterations 18
Cbc0038I Pass  20: suminf.    2.54545 (13) obj. 52.8583 iterations 57
Cbc0038I Pass  21: suminf.    1.60000 (4) obj. 52.8583 iterations 21
Cbc0038I Pass  22: suminf.    2.66667 (10) obj. 52.8583 iterations 49
Cbc0038I Pass  23: suminf.    3.99668 (25) obj. 52.8583 iterations 43
Cbc0038I Pass  24: suminf.    6.20066 (18) obj. 52.8583 iterations 77
Cbc0038I Pass  25: suminf.    3.77871 (20) obj. 52.8583 iterations 21
Cbc0038I Pass  26: suminf.    3.64956 (24) obj. 52.8583 iterations 24
Cbc0038I Pass  27: suminf.    5.67619 (18) obj. 52.8583 iterations 70
Cbc0038I Pass  28: suminf.    3.44397 (24) obj. 52.8583 iterations 36
Cbc0038I Pass  29: suminf.    4.19877 (19) obj. 52.8583 iterations 59
Cbc0038I Pass  30: suminf.    3.01212 (18) obj. 52.8583 iterations 12
Cbc0038I Pass  31: suminf.    3.76640 (20) obj. 52.8583 iterations 27
Cbc0038I Pass  32: suminf.    3.02224 (15) obj. 52.8583 iterations 47
Cbc0038I Pass  33: suminf.    4.57340 (26) obj. 52.8583 iterations 37
Cbc0038I Pass  34: suminf.    3.49030 (22) obj. 52.8583 iterations 51
Cbc0038I Pass  35: suminf.    4.90228 (30) obj. 52.8583 iterations 36
Cbc0038I Pass  36: suminf.    3.91520 (21) obj. 52.8583 iterations 61
Cbc0038I Pass  37: suminf.    4.66512 (21) obj. 52.8583 iterations 27
Cbc0038I Pass  38: suminf.    2.84762 (12) obj. 52.8583 iterations 43
Cbc0038I Pass  39: suminf.    2.13333 (15) obj. 52.8583 iterations 28
Cbc0038I Pass  40: suminf.    3.53845 (19) obj. 52.8583 iterations 24
Cbc0038I Pass  41: suminf.    7.77878 (29) obj. 52.8583 iterations 45
Cbc0038I Pass  42: suminf.    2.21271 (15) obj. 52.8583 iterations 47
Cbc0038I Pass  43: suminf.    2.57143 (6) obj. 52.8583 iterations 38
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 369 rows 172 columns - 4 fixed gives 235, 96 - still too large
Cbc0038I Full problem 422 rows 225 columns, reduced to 212 rows 96 columns
Cbc0038I Mini branch and bound improved solution from 58.3095 to 42.9418 (0.12 seconds)
Cbc0038I Round again with cutoff of 35.113
Cbc0038I Pass  43: suminf.   11.86897 (43) obj. 35.113 iterations 22
Cbc0038I Pass  44: suminf.    7.76012 (39) obj. 35.113 iterations 49
Cbc0038I Pass  45: suminf.    7.76012 (39) obj. 35.113 iterations 0
Cbc0038I Pass  46: suminf.    8.12009 (33) obj. 35.113 iterations 73
Cbc0038I Pass  47: suminf.    9.19961 (32) obj. 35.113 iterations 45
Cbc0038I Pass  48: suminf.    7.32121 (29) obj. 35.113 iterations 11
Cbc0038I Pass  49: suminf.    6.05475 (25) obj. 35.113 iterations 41
Cbc0038I Pass  50: suminf.    5.36598 (28) obj. 35.113 iterations 16
Cbc0038I Pass  51: suminf.    5.15444 (26) obj. 35.113 iterations 7
Cbc0038I Pass  52: suminf.    7.59043 (24) obj. 35.113 iterations 54
Cbc0038I Pass  53: suminf.    7.07996 (24) obj. 35.113 iterations 28
Cbc0038I Pass  54: suminf.    5.89685 (22) obj. 35.113 iterations 47
Cbc0038I Pass  55: suminf.    5.15768 (20) obj. 35.113 iterations 16
Cbc0038I Pass  56: suminf.    5.87453 (19) obj. 35.113 iterations 43
Cbc0038I Pass  57: suminf.    5.39621 (19) obj. 35.113 iterations 11
Cbc0038I Pass  58: suminf.    5.22520 (20) obj. 35.113 iterations 7
Cbc0038I Pass  59: suminf.    5.88200 (15) obj. 35.113 iterations 33
Cbc0038I Pass  60: suminf.    4.01445 (16) obj. 35.113 iterations 31
Cbc0038I Pass  61: suminf.    5.28137 (15) obj. 35.113 iterations 36
Cbc0038I Pass  62: suminf.    5.16744 (20) obj. 35.113 iterations 30
Cbc0038I Pass  63: suminf.    5.16744 (20) obj. 35.113 iterations 0
Cbc0038I Pass  64: suminf.    4.20300 (14) obj. 35.113 iterations 63
Cbc0038I Pass  65: suminf.    5.95133 (22) obj. 35.113 iterations 35
Cbc0038I Pass  66: suminf.    5.26408 (17) obj. 35.113 iterations 55
Cbc0038I Pass  67: suminf.    3.35188 (20) obj. 35.113 iterations 35
Cbc0038I Pass  68: suminf.    5.00021 (13) obj. 35.113 iterations 44
Cbc0038I Pass  69: suminf.    3.45239 (13) obj. 35.113 iterations 14
Cbc0038I Pass  70: suminf.    3.91908 (19) obj. 35.113 iterations 16
Cbc0038I Pass  71: suminf.    5.52610 (17) obj. 35.113 iterations 28
Cbc0038I Pass  72: suminf.    3.82595 (11) obj. 35.113 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 67 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 355 rows 158 columns - 4 fixed gives 231, 90 - still too large
Cbc0038I Full problem 422 rows 225 columns, reduced to 208 rows 90 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of 42.9418 - took 0.12 seconds
Cbc0012I Integer solution of 42.941821 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 330 rows 139 columns - 4 fixed gives 211, 76 - ok now
Cbc0038I Full problem 422 rows 225 columns, reduced to 190 rows 76 columns
Cbc0031I 16 added rows had average density of 24.5625
Cbc0013I At root node, 16 cuts changed objective from 3.7976102 to 39.051107 in 52 passes
Cbc0014I Cut generator 0 (Probing) - 2088 row cuts average 4.1 elements, 5 column cuts (5 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 592 row cuts average 38.4 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 4 row cuts average 13.2 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 12 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 370 row cuts average 22.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 42.941821 best solution, best possible 39.051107 (0.30 seconds)
Cbc0016I Integer solution of 39.051248 found by strong branching after 2179 iterations and 18 nodes (0.40 seconds)
Cbc0001I Search completed - best objective 39.05124837953, took 2658 iterations and 36 nodes (0.42 seconds)
Cbc0032I Strong branching done 442 times (8392 iterations), fathomed 2 nodes and fixed 2 variables
Cbc0035I Maximum depth 12, 0 variables fixed on reduced cost
Cuts at root node changed objective from 3.79761 to 39.0511
Probing was tried 85 times and created 2282 cuts of which 0 were active after adding rounds of cuts (0.036 seconds)
Gomory was tried 74 times and created 597 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
Knapsack was tried 52 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 52 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 52 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 52 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
TwoMirCuts was tried 74 times and created 395 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                39.05124838
Enumerated nodes:               36
Total iterations:               2658
Time (CPU seconds):             0.42
Time (Wallclock seconds):       0.42

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.42   (Wallclock seconds):       0.42

Model solved successfully!
Tour: [0, 6, 2, 12, 10, 9, 7, 13, 3, 5, 4, 11, 8, 14, 1, 0, 0]
Total travel cost: 366.18016548742736
Maximum distance between consecutive cities: 39.05124837953327


ERROR:


