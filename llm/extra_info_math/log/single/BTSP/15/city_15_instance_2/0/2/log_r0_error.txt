OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/33503ae694e34e62aaef46ec3743f71b-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/33503ae694e34e62aaef46ec3743f71b-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 427 COLUMNS
At line 2235 RHS
At line 2658 BOUNDS
At line 2869 ENDATA
Problem MODEL has 422 rows, 225 columns and 1386 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.79761 - 0.00 seconds
Cgl0004I processed model has 422 rows, 225 columns (210 integer (210 of which binary)) and 1386 elements
Cbc0038I Initial state - 123 integers unsatisfied sum - 14.4683
Cbc0038I Pass   1: suminf.    1.33333 (10) obj. 86.5563 iterations 180
Cbc0038I Pass   2: suminf.    0.53333 (4) obj. 86.5563 iterations 27
Cbc0038I Pass   3: suminf.    0.53333 (4) obj. 86.5563 iterations 6
Cbc0038I Pass   4: suminf.    2.40000 (6) obj. 63.2851 iterations 78
Cbc0038I Pass   5: suminf.    0.80000 (4) obj. 63.2851 iterations 35
Cbc0038I Pass   6: suminf.    0.80000 (4) obj. 63.2851 iterations 19
Cbc0038I Pass   7: suminf.    0.00000 (0) obj. 70.0071 iterations 75
Cbc0038I Solution found of 70.0071
Cbc0038I Relaxing continuous gives 70.0071
Cbc0038I Before mini branch and bound, 70 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 352 rows 155 columns - 1 fixed gives 244, 134 - still too large
Cbc0038I Full problem 422 rows 225 columns, reduced to 244 rows 134 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 63.3862
Cbc0038I Pass   8: suminf.    3.53907 (24) obj. 63.3862 iterations 9
Cbc0038I Pass   9: suminf.    1.36953 (15) obj. 63.3862 iterations 32
Cbc0038I Pass  10: suminf.    0.92169 (4) obj. 63.3862 iterations 44
Cbc0038I Pass  11: suminf.    0.92169 (7) obj. 63.3862 iterations 15
Cbc0038I Pass  12: suminf.    1.20000 (6) obj. 63.3862 iterations 27
Cbc0038I Pass  13: suminf.    0.66667 (9) obj. 63.3862 iterations 23
Cbc0038I Pass  14: suminf.    0.80000 (4) obj. 63.3862 iterations 38
Cbc0038I Pass  15: suminf.    0.66667 (9) obj. 63.3862 iterations 14
Cbc0038I Pass  16: suminf.    0.80000 (4) obj. 63.3862 iterations 39
Cbc0038I Pass  17: suminf.    2.80520 (27) obj. 63.3862 iterations 62
Cbc0038I Pass  18: suminf.    1.20345 (11) obj. 63.3862 iterations 47
Cbc0038I Pass  19: suminf.    0.53333 (4) obj. 63.3862 iterations 50
Cbc0038I Pass  20: suminf.    0.53333 (8) obj. 63.3862 iterations 23
Cbc0038I Pass  21: suminf.    0.92169 (7) obj. 63.3862 iterations 35
Cbc0038I Pass  22: suminf.    2.20333 (7) obj. 63.3862 iterations 30
Cbc0038I Pass  23: suminf.    1.53666 (7) obj. 63.3862 iterations 19
Cbc0038I Pass  24: suminf.    1.24108 (7) obj. 63.3862 iterations 37
Cbc0038I Pass  25: suminf.    3.94298 (15) obj. 63.3862 iterations 62
Cbc0038I Pass  26: suminf.    1.05410 (8) obj. 63.3862 iterations 29
Cbc0038I Pass  27: suminf.    1.73333 (7) obj. 50.2892 iterations 49
Cbc0038I Pass  28: suminf.    1.73333 (4) obj. 50.2892 iterations 13
Cbc0038I Pass  29: suminf.    1.73333 (9) obj. 48.3735 iterations 31
Cbc0038I Pass  30: suminf.    2.40000 (6) obj. 50.4357 iterations 26
Cbc0038I Pass  31: suminf.    1.73333 (9) obj. 57.4407 iterations 40
Cbc0038I Pass  32: suminf.    1.86667 (13) obj. 48.3735 iterations 44
Cbc0038I Pass  33: suminf.    1.73333 (12) obj. 48.3735 iterations 6
Cbc0038I Pass  34: suminf.    3.07332 (8) obj. 63.3862 iterations 35
Cbc0038I Pass  35: suminf.    1.96833 (9) obj. 63.3862 iterations 21
Cbc0038I Pass  36: suminf.    2.00000 (9) obj. 63.3862 iterations 31
Cbc0038I Pass  37: suminf.    1.57542 (10) obj. 63.3862 iterations 88
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous
Cbc0038I Full problem 422 rows 225 columns, reduced to 372 rows 175 columns - 6 fixed gives 206, 71 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 70.0071 - took 0.02 seconds
Cbc0012I Integer solution of 70.007142 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 340 rows 143 columns - 15 fixed gives 182, 14 - ok now
Cbc0031I 23 added rows had average density of 49.391304
Cbc0013I At root node, 23 cuts changed objective from 3.7976102 to 39.039445 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8746 row cuts average 5.8 elements, 3 column cuts (3 active)  in 0.076 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2530 row cuts average 78.9 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 639 row cuts average 2.3 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 779 row cuts average 18.1 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 70.007142 best solution, best possible 39.039445 (0.48 seconds)
Cbc0012I Integer solution of 65.436993 found by DiveCoefficient after 7648 iterations and 3 nodes (0.53 seconds)
Cbc0012I Integer solution of 49.648766 found by DiveCoefficient after 7668 iterations and 5 nodes (0.54 seconds)
Cbc0012I Integer solution of 41.10961 found by DiveCoefficient after 7725 iterations and 7 nodes (0.56 seconds)
Cbc0012I Integer solution of 40.024992 found by DiveCoefficient after 7866 iterations and 13 nodes (0.57 seconds)
Cbc0038I Full problem 422 rows 225 columns, reduced to 185 rows 20 columns
Cbc0038I Full problem 445 rows 225 columns, reduced to 344 rows 197 columns
Cbc0044I Reduced cost fixing - 344 rows, 197 columns - restarting search
Cbc0012I Integer solution of 40.024992 found by Previous solution after 0 iterations and 0 nodes (0.62 seconds)
Cbc0038I Full problem 344 rows 197 columns, reduced to 207 rows 38 columns - 6 fixed gives 182, 15 - ok now
Cbc0031I 11 added rows had average density of 38
Cbc0013I At root node, 11 cuts changed objective from 25.549568 to 39.039584 in 14 passes
Cbc0014I Cut generator 0 (Probing) - 69 row cuts average 2.7 elements, 3 column cuts (3 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 55 row cuts average 41.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 57 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 119 row cuts average 18.3 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 9 (Stored from first) - 20 row cuts average 52.4 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, 40.024992 best solution, best possible 39.039584 (0.66 seconds)
Cbc0004I Integer solution of 39.051248 found after 766 iterations and 15 nodes (0.73 seconds)
Cbc0001I Search completed - best objective 39.05124837953, took 828 iterations and 16 nodes (0.73 seconds)
Cbc0032I Strong branching done 360 times (7965 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 12, 2 variables fixed on reduced cost
Cbc0038I Probing was tried 41 times and created 91 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Cbc0038I Gomory was tried 40 times and created 112 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Cbc0038I Knapsack was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I Clique was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 40 times and created 128 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Cbc0038I FlowCover was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I TwoMirCuts was tried 40 times and created 182 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Cbc0038I ZeroHalf was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I Stored from first was tried 40 times and created 32 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0012I Integer solution of 39.051248 found by Reduced search after 9503 iterations and 66 nodes (0.73 seconds)
Cbc0001I Search completed - best objective 39.05124837953, took 9503 iterations and 66 nodes (0.73 seconds)
Cbc0032I Strong branching done 692 times (9292 iterations), fathomed 8 nodes and fixed 19 variables
Cbc0035I Maximum depth 15, 0 variables fixed on reduced cost
Cuts at root node changed objective from 3.79761 to 39.0394
Probing was tried 166 times and created 8868 cuts of which 0 were active after adding rounds of cuts (0.082 seconds)
Gomory was tried 165 times and created 2642 cuts of which 0 were active after adding rounds of cuts (0.027 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
MixedIntegerRounding2 was tried 165 times and created 810 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 165 times and created 1008 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ImplicationCuts was tried 28 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                39.05124838
Enumerated nodes:               66
Total iterations:               9503
Time (CPU seconds):             0.73
Time (Wallclock seconds):       0.74

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.73   (Wallclock seconds):       0.74



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/15/city_15_instance_2/0/2/solution_r0.py", line 71, in <module>
    tour, total_travel_cost, max_consecutive_distance = solve_tsp(cities)
                                                        ^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/15/city_15_instance_2/0/2/solution_r0.py", line 53, in solve_tsp
    next_city = next(j for j in range(n) if j != current_post and x[current_city][j].varValue == 1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/single/BTSP/15/city_15_instance_2/0/2/solution_r0.py", line 53, in <genexpr>
    next_city = next(j for j in range(n) if j != current_post and x[current_city][j].varValue == 1)
                                                 ^^^^^^^^^^^^
NameError: name 'current_post' is not defined


