OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/5e3631f3b7f94b5694c660b01f48df5e-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/5e3631f3b7f94b5694c660b01f48df5e-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 473 COLUMNS
At line 4170 RHS
At line 4639 BOUNDS
At line 5123 ENDATA
Problem MODEL has 468 rows, 483 columns and 2268 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 224.941 - 0.00 seconds
Cgl0004I processed model has 464 rows, 483 columns (483 integer (462 of which binary)) and 2184 elements
Cbc0038I Initial state - 44 integers unsatisfied sum - 2.85714
Cbc0038I Pass   1: suminf.    1.90476 (25) obj. 247.557 iterations 91
Cbc0038I Pass   2: suminf.    6.23810 (19) obj. 517.883 iterations 67
Cbc0038I Pass   3: suminf.   11.40476 (26) obj. 540.357 iterations 38
Cbc0038I Pass   4: suminf.    2.85714 (6) obj. 533.854 iterations 42
Cbc0038I Pass   5: suminf.    1.90476 (7) obj. 537.879 iterations 21
Cbc0038I Pass   6: suminf.    1.90476 (4) obj. 534.161 iterations 43
Cbc0038I Pass   7: suminf.    1.52381 (8) obj. 671.765 iterations 151
Cbc0038I Pass   8: suminf.    1.14286 (4) obj. 652.716 iterations 77
Cbc0038I Pass   9: suminf.    1.14286 (9) obj. 648.802 iterations 39
Cbc0038I Pass  10: suminf.    1.33333 (7) obj. 668.151 iterations 64
Cbc0038I Pass  11: suminf.    2.14286 (15) obj. 664.709 iterations 48
Cbc0038I Pass  12: suminf.    2.39683 (14) obj. 680.62 iterations 45
Cbc0038I Pass  13: suminf.    1.14286 (11) obj. 674.164 iterations 24
Cbc0038I Pass  14: suminf.    1.14286 (7) obj. 667.972 iterations 64
Cbc0038I Pass  15: suminf.    2.64286 (13) obj. 674.494 iterations 33
Cbc0038I Pass  16: suminf.    1.14286 (9) obj. 689.106 iterations 46
Cbc0038I Pass  17: suminf.    1.14286 (9) obj. 686.815 iterations 16
Cbc0038I Pass  18: suminf.    1.33333 (4) obj. 673.328 iterations 49
Cbc0038I Pass  19: suminf.    0.57143 (6) obj. 834.027 iterations 162
Cbc0038I Pass  20: suminf.    0.38095 (4) obj. 833.653 iterations 64
Cbc0038I Pass  21: suminf.    0.00000 (0) obj. 767.362 iterations 19
Cbc0038I Solution found of 767.362
Cbc0038I Cleaned solution of 767.362
Cbc0038I Before mini branch and bound, 350 integers at bound fixed and 0 continuous
Cbc0038I Full problem 464 rows 483 columns, reduced to 462 rows 131 columns - 4 fixed gives 451, 92 - still too large
Cbc0038I Full problem 464 rows 483 columns, reduced to 310 rows 92 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of 713.12
Cbc0038I Pass  22: suminf.    1.90476 (25) obj. 247.557 iterations 0
Cbc0038I Pass  23: suminf.    6.23810 (20) obj. 506.562 iterations 154
Cbc0038I Pass  24: suminf.    1.90476 (9) obj. 463.044 iterations 29
Cbc0038I Pass  25: suminf.    3.90476 (17) obj. 472.747 iterations 27
Cbc0038I Pass  26: suminf.    1.90476 (11) obj. 471.731 iterations 1
Cbc0038I Pass  27: suminf.    4.57143 (14) obj. 495.774 iterations 89
Cbc0038I Pass  28: suminf.    2.47619 (13) obj. 669.893 iterations 146
Cbc0038I Pass  29: suminf.    1.52381 (10) obj. 675.651 iterations 100
Cbc0038I Pass  30: suminf.    3.52381 (28) obj. 597.828 iterations 93
Cbc0038I Pass  31: suminf.    1.90476 (4) obj. 699.541 iterations 121
Cbc0038I Pass  32: suminf.    3.85714 (13) obj. 684.2 iterations 66
Cbc0038I Pass  33: suminf.    3.85714 (19) obj. 657.56 iterations 67
Cbc0038I Pass  34: suminf.    3.00000 (9) obj. 713.12 iterations 90
Cbc0038I Pass  35: suminf.    2.03172 (7) obj. 713.12 iterations 17
Cbc0038I Pass  36: suminf.    1.52381 (12) obj. 671.243 iterations 71
Cbc0038I Pass  37: suminf.    1.90476 (10) obj. 570.216 iterations 50
Cbc0038I Pass  38: suminf.    3.52381 (21) obj. 571.901 iterations 58
Cbc0038I Pass  39: suminf.    3.52381 (12) obj. 683.132 iterations 76
Cbc0038I Pass  40: suminf.    6.44689 (27) obj. 659.225 iterations 36
Cbc0038I Pass  41: suminf.    2.85714 (18) obj. 605.596 iterations 89
Cbc0038I Pass  42: suminf.    2.85714 (18) obj. 605.596 iterations 2
Cbc0038I Pass  43: suminf.    1.52381 (7) obj. 638.301 iterations 95
Cbc0038I Pass  44: suminf.    5.72381 (26) obj. 631.902 iterations 48
Cbc0038I Pass  45: suminf.    2.85714 (17) obj. 605.557 iterations 91
Cbc0038I Pass  46: suminf.    7.38997 (30) obj. 713.12 iterations 189
Cbc0038I Pass  47: suminf.    5.95208 (17) obj. 713.12 iterations 125
Cbc0038I Pass  48: suminf.    3.59909 (18) obj. 713.12 iterations 40
Cbc0038I Pass  49: suminf.    4.52381 (15) obj. 559.983 iterations 150
Cbc0038I Pass  50: suminf.    3.85714 (20) obj. 605.058 iterations 102
Cbc0038I Pass  51: suminf.    3.02381 (19) obj. 609.678 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 317 integers at bound fixed and 0 continuous
Cbc0038I Full problem 464 rows 483 columns, reduced to 462 rows 164 columns - 2 fixed gives 457, 141 - still too large
Cbc0038I Full problem 464 rows 483 columns, reduced to 419 rows 141 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of 767.362 - took 0.10 seconds
Cbc0012I Integer solution of 767.3618 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0031I 23 added rows had average density of 195.73913
Cbc0013I At root node, 23 cuts changed objective from 224.94091 to 274.30141 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.142 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1302 row cuts average 345.2 elements, 0 column cuts (0 active)  in 0.152 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 22 row cuts average 184.4 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 172 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 6 (TwoMirCuts) - 680 row cuts average 46.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 84 row cuts average 24.9 elements, 0 column cuts (0 active)  in 0.070 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 767.3618 best solution, best possible 274.30141 (1.20 seconds)
Cbc0016I Integer solution of 296.78331 found by strong branching after 5596 iterations and 13 nodes (1.44 seconds)
Cbc0016I Integer solution of 295.06142 found by strong branching after 5919 iterations and 20 nodes (1.47 seconds)
Cbc0016I Integer solution of 293.41749 found by strong branching after 6405 iterations and 25 nodes (1.52 seconds)
Cbc0038I Full problem 464 rows 483 columns, reduced to 424 rows 28 columns - 4 fixed gives 420, 23 - still too large
Cbc0038I Full problem 464 rows 483 columns, reduced to 33 rows 23 columns
Cbc0016I Integer solution of 289.15075 found by strong branching after 6968 iterations and 43 nodes (1.63 seconds)
Cbc0038I Full problem 487 rows 483 columns, reduced to 464 rows 253 columns - too large
Cbc0012I Integer solution of 284.49653 found by DiveCoefficient after 7803 iterations and 68 nodes (1.74 seconds)
Cbc0038I Full problem 464 rows 483 columns, reduced to 388 rows 29 columns - 7 fixed gives 343, 19 - ok now
Cbc0012I Integer solution of 281.55882 found by DiveCoefficient after 10156 iterations and 109 nodes (2.05 seconds)
Cbc0016I Integer solution of 280.71452 found by strong branching after 10427 iterations and 119 nodes (2.07 seconds)
Cbc0016I Integer solution of 279.853 found by strong branching after 13572 iterations and 187 nodes (2.47 seconds)
Cbc0038I Full problem 464 rows 483 columns, reduced to 143 rows 20 columns
Cbc0016I Integer solution of 278.43708 found by strong branching after 15450 iterations and 240 nodes (2.71 seconds)
Cbc0001I Search completed - best objective 278.437076958758, took 20430 iterations and 360 nodes (3.16 seconds)
Cbc0032I Strong branching done 2510 times (40287 iterations), fathomed 47 nodes and fixed 45 variables
Cbc0035I Maximum depth 13, 5122 variables fixed on reduced cost
Cuts at root node changed objective from 224.941 to 274.301
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.142 seconds)
Gomory was tried 508 times and created 1512 cuts of which 0 were active after adding rounds of cuts (0.236 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
MixedIntegerRounding2 was tried 100 times and created 22 cuts of which 0 were active after adding rounds of cuts (0.046 seconds)
FlowCover was tried 508 times and created 787 cuts of which 0 were active after adding rounds of cuts (0.101 seconds)
TwoMirCuts was tried 508 times and created 1486 cuts of which 0 were active after adding rounds of cuts (0.077 seconds)
ZeroHalf was tried 100 times and created 84 cuts of which 0 were active after adding rounds of cuts (0.070 seconds)

Result - Optimal solution found

Objective value:                278.43707696
Enumerated nodes:               360
Total iterations:               20430
Time (CPU seconds):             3.14
Time (Wallclock seconds):       3.17

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3.14   (Wallclock seconds):       3.17

Status: Optimal
Robot at Depot 0 Tour: [0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0]
Total Travel Cost for Robot at Depot 0: 1113.75
Robot at Depot 0 Tour: [0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0]
Total Travel Cost for Robot at Depot 0: 1113.75
Robot at Depot 0 Tour: [0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0]
Total Travel Cost for Robot at Depot 0: 1113.75
Robot at Depot 0 Tour: [0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0, 0, 14, 16, 19, 21, 17, 20, 18, 15, 12, 10, 8, 6, 9, 7, 5, 2, 1, 3, 4, 11, 13, 0]
Total Travel Cost for Robot at Depot 0: 1113.75


ERROR:


