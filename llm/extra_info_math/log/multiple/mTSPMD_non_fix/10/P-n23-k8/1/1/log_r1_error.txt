OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/bd7457b8fe664646b1e7cbd795241223-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/bd7457b8fe664646b1e7cbd795241223-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 535 COLUMNS
At line 4518 RHS
At line 5049 BOUNDS
At line 5556 ENDATA
Problem MODEL has 530 rows, 529 columns and 2464 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 152.741 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0004I processed model has 530 rows, 528 columns (506 integer (506 of which binary)) and 2640 elements
Cbc0038I Initial state - 30 integers unsatisfied sum - 2.78261
Cbc0038I Pass   1: suminf.    1.82609 (21) obj. 166.952 iterations 103
Cbc0038I Pass   2: suminf.    1.97101 (14) obj. 245.138 iterations 59
Cbc0038I Pass   3: suminf.    1.82609 (19) obj. 244.371 iterations 23
Cbc0038I Pass   4: suminf.    1.82609 (6) obj. 321.769 iterations 76
Cbc0038I Pass   5: suminf.    1.82609 (15) obj. 334.403 iterations 18
Cbc0038I Pass   6: suminf.    1.82609 (8) obj. 288.9 iterations 54
Cbc0038I Pass   7: suminf.    1.82609 (13) obj. 304.134 iterations 29
Cbc0038I Pass   8: suminf.    1.82609 (9) obj. 357.358 iterations 39
Cbc0038I Pass   9: suminf.    1.82609 (11) obj. 364.273 iterations 17
Cbc0038I Pass  10: suminf.    2.04348 (7) obj. 307.085 iterations 39
Cbc0038I Pass  11: suminf.    1.82609 (10) obj. 304.652 iterations 30
Cbc0038I Pass  12: suminf.    1.82609 (14) obj. 294.71 iterations 65
Cbc0038I Pass  13: suminf.    1.82609 (6) obj. 308.502 iterations 38
Cbc0038I Pass  14: suminf.    1.82609 (7) obj. 310.489 iterations 27
Cbc0038I Pass  15: suminf.    1.95652 (6) obj. 304.625 iterations 23
Cbc0038I Pass  16: suminf.    1.82609 (7) obj. 302.268 iterations 12
Cbc0038I Pass  17: suminf.    1.82609 (10) obj. 317.881 iterations 38
Cbc0038I Pass  18: suminf.    1.82609 (9) obj. 315.818 iterations 4
Cbc0038I Pass  19: suminf.    1.82609 (7) obj. 317.883 iterations 44
Cbc0038I Pass  20: suminf.    1.82609 (6) obj. 320.862 iterations 53
Cbc0038I Pass  21: suminf.    1.82609 (4) obj. 317.355 iterations 27
Cbc0038I Pass  22: suminf.    1.82609 (10) obj. 310.909 iterations 49
Cbc0038I Pass  23: suminf.    1.82609 (4) obj. 305.096 iterations 86
Cbc0038I Pass  24: suminf.    1.82609 (8) obj. 299.206 iterations 38
Cbc0038I Pass  25: suminf.    1.82609 (12) obj. 344.401 iterations 60
Cbc0038I Pass  26: suminf.    1.82609 (6) obj. 304.694 iterations 53
Cbc0038I Pass  27: suminf.    1.82609 (6) obj. 308.343 iterations 19
Cbc0038I Pass  28: suminf.    1.33913 (14) obj. 500.877 iterations 163
Cbc0038I Pass  29: suminf.    0.95652 (4) obj. 504.282 iterations 64
Cbc0038I Pass  30: suminf.    0.95652 (9) obj. 506.156 iterations 94
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 394 integers at bound fixed and 0 continuous
Cbc0038I Full problem 530 rows 528 columns, reduced to 522 rows 129 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Full problem 531 rows 528 columns, reduced to 531 rows 528 columns - too large
Cbc0038I After 0.06 seconds - Feasibility pump exiting - took 0.03 seconds
Cbc0031I 25 added rows had average density of 125.76
Cbc0013I At root node, 25 cuts changed objective from 152.74147 to 171.85004 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 129 row cuts average 240.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 85 row cuts average 2.3 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 251 row cuts average 115.3 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 171.85004 (0.14 seconds)
Cbc0004I Integer solution of 257.98064 found after 2011 iterations and 81 nodes (0.54 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 473 rows 36 columns - 7 fixed gives 462, 23 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 462 rows 23 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 466 rows 30 columns - 5 fixed gives 462, 24 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 462 rows 24 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 473 rows 37 columns - 5 fixed gives 465, 25 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 462 rows 22 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 472 rows 36 columns - 4 fixed gives 462, 23 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 462 rows 22 columns - too large
Cbc0004I Integer solution of 198.85522 found after 7383 iterations and 319 nodes (0.83 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 472 rows 34 columns - 5 fixed gives 469, 27 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 466 rows 26 columns - too large
Cbc0004I Integer solution of 195.4295 found after 10488 iterations and 428 nodes (0.95 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 466 rows 27 columns - 2 fixed gives 464, 23 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 23 columns - too large
Cbc0004I Integer solution of 192.07934 found after 17326 iterations and 656 nodes (1.12 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 470 rows 30 columns - 1 fixed gives 464, 25 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 25 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 468 rows 29 columns - 1 fixed gives 468, 28 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 468 rows 28 columns - too large
Cbc0004I Integer solution of 191.26766 found after 25780 iterations and 971 nodes (1.41 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 471 rows 32 columns - 3 fixed gives 464, 24 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 24 columns - too large
Cbc0010I After 1000 nodes, 73 on tree, 191.26766 best solution, best possible 171.85004 (1.46 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 469 rows 32 columns - 3 fixed gives 465, 26 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 465 rows 26 columns - too large
Cbc0010I After 2000 nodes, 82 on tree, 191.26766 best solution, best possible 171.85004 (2.75 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 487 rows 50 columns - 3 fixed gives 469, 29 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 26 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 470 rows 28 columns - 3 fixed gives 462, 22 - still too large
Cbc0010I After 3000 nodes, 78 on tree, 191.26766 best solution, best possible 171.85004 (3.94 seconds)
Cbc0016I Integer solution of 189.96252 found by strong branching after 92711 iterations and 3081 nodes (4.05 seconds)
Cbc0004I Integer solution of 186.39164 found after 101357 iterations and 3464 nodes (4.59 seconds)
Cbc0004I Integer solution of 185.57996 found after 101717 iterations and 3476 nodes (4.61 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 468 rows 29 columns - 1 fixed gives 462, 24 - still too large
Cbc0004I Integer solution of 185.33378 found after 110375 iterations and 3891 nodes (5.05 seconds)
Cbc0010I After 4000 nodes, 147 on tree, 185.33378 best solution, best possible 171.85004 (5.18 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 466 rows 27 columns - 1 fixed gives 464, 24 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 24 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 469 rows 28 columns - 2 fixed gives 464, 23 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 23 columns - too large
Cbc0010I After 5000 nodes, 249 on tree, 185.33378 best solution, best possible 171.85004 (6.29 seconds)
Cbc0010I After 6000 nodes, 139 on tree, 185.33378 best solution, best possible 171.85004 (6.98 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 479 rows 41 columns - 2 fixed gives 472, 30 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 470 rows 28 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 474 rows 35 columns - 2 fixed gives 470, 29 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 464 rows 24 columns - too large
Cbc0010I After 7000 nodes, 41 on tree, 185.33378 best solution, best possible 171.85004 (8.13 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 476 rows 37 columns - 1 fixed gives 470, 30 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 465 rows 26 columns - too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 488 rows 49 columns - 2 fixed gives 478, 34 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 466 rows 26 columns - too large
Cbc0010I After 8000 nodes, 18 on tree, 185.33378 best solution, best possible 171.85004 (9.28 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 480 rows 40 columns - 1 fixed gives 474, 34 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 474 rows 34 columns - too large
Cbc0010I After 9000 nodes, 9 on tree, 185.33378 best solution, best possible 171.85004 (10.23 seconds)
Cbc0010I After 10000 nodes, 10 on tree, 185.33378 best solution, best possible 171.85004 (11.43 seconds)
Cbc0038I Full problem 530 rows 528 columns, reduced to 475 rows 34 columns - 2 fixed gives 470, 27 - still too large
Cbc0038I Full problem 530 rows 528 columns, reduced to 466 rows 25 columns - too large
Cbc0010I After 11000 nodes, 10 on tree, 185.33378 best solution, best possible 171.85004 (12.48 seconds)
Cbc0010I After 12000 nodes, 246 on tree, 185.33378 best solution, best possible 181.72595 (13.87 seconds)
Cbc0010I After 13000 nodes, 239 on tree, 185.33378 best solution, best possible 183.70581 (14.83 seconds)
Cbc0001I Search completed - best objective 185.333778805715, took 429708 iterations and 13700 nodes (15.45 seconds)
Cbc0032I Strong branching done 11342 times (213810 iterations), fathomed 817 nodes and fixed 1248 variables
Cbc0035I Maximum depth 43, 80865 variables fixed on reduced cost
Cuts at root node changed objective from 152.741 to 171.85
Probing was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Gomory was tried 11098 times and created 4989 cuts of which 0 were active after adding rounds of cuts (0.972 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 11098 times and created 6319 cuts of which 0 were active after adding rounds of cuts (0.965 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 11098 times and created 5066 cuts of which 0 were active after adding rounds of cuts (0.700 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                185.33377881
Enumerated nodes:               13700
Total iterations:               429708
Time (CPU seconds):             15.38
Time (Wallclock seconds):       15.45

Option for printingOptions changed from normal to all
Total time (CPU seconds):       15.38   (Wallclock seconds):       15.45



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSPMD_non_fix/10/P-n23-k8/1/1/solution_r1.py", line 54, in <module>
    for robot in range(num_robots):
                       ^^^^^^^^^^
NameError: name 'num_robots' is not defined


