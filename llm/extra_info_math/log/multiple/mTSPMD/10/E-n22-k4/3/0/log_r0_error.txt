OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/f6529230606b4340a8f2955418d2a50c-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/f6529230606b4340a8f2955418d2a50c-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 469 COLUMNS
At line 4502 RHS
At line 4967 BOUNDS
At line 5451 ENDATA
Problem MODEL has 464 rows, 483 columns and 2604 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 266.777 - 0.00 seconds
Cgl0004I processed model has 464 rows, 483 columns (483 integer (462 of which binary)) and 2604 elements
Cbc0038I Initial state - 30 integers unsatisfied sum - 15
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 617.275 iterations 119
Cbc0038I Solution found of 617.275
Cbc0038I Cleaned solution of 617.275
Cbc0038I Before mini branch and bound, 421 integers at bound fixed and 0 continuous
Cbc0038I Full problem 464 rows 483 columns, reduced to 90 rows 53 columns
Cbc0038I Mini branch and bound improved solution from 617.275 to 330.775 (0.02 seconds)
Cbc0038I Round again with cutoff of 324.375
Cbc0038I Reduced cost fixing fixed 6 variables on major pass 2
Cbc0038I Pass   2: suminf.    5.93870 (21) obj. 324.375 iterations 217
Cbc0038I Pass   3: suminf.    4.57143 (28) obj. 324.375 iterations 122
Cbc0038I Pass   4: suminf.    6.10858 (24) obj. 324.375 iterations 78
Cbc0038I Pass   5: suminf.    1.90476 (13) obj. 321.895 iterations 120
Cbc0038I Pass   6: suminf.    6.60688 (35) obj. 324.375 iterations 56
Cbc0038I Pass   7: suminf.    7.28978 (22) obj. 324.375 iterations 82
Cbc0038I Pass   8: suminf.    3.10887 (10) obj. 324.375 iterations 36
Cbc0038I Pass   9: suminf.    4.12196 (10) obj. 324.375 iterations 131
Cbc0038I Pass  10: suminf.    3.61109 (24) obj. 324.375 iterations 35
Cbc0038I Pass  11: suminf.    4.03594 (18) obj. 324.375 iterations 64
Cbc0038I Pass  12: suminf.    4.05772 (26) obj. 324.375 iterations 110
Cbc0038I Pass  13: suminf.    3.85691 (27) obj. 324.375 iterations 65
Cbc0038I Pass  14: suminf.    5.51398 (17) obj. 324.375 iterations 76
Cbc0038I Pass  15: suminf.    3.13440 (24) obj. 324.375 iterations 22
Cbc0038I Pass  16: suminf.    4.05561 (31) obj. 324.375 iterations 33
Cbc0038I Pass  17: suminf.    2.85714 (9) obj. 320.191 iterations 137
Cbc0038I Pass  18: suminf.    4.40476 (26) obj. 319.746 iterations 119
Cbc0038I Pass  19: suminf.    3.57702 (18) obj. 324.375 iterations 112
Cbc0038I Pass  20: suminf.    3.38938 (21) obj. 324.375 iterations 69
Cbc0038I Pass  21: suminf.    7.19438 (31) obj. 324.375 iterations 87
Cbc0038I Pass  22: suminf.    3.88959 (25) obj. 324.375 iterations 114
Cbc0038I Pass  23: suminf.    3.79282 (29) obj. 324.375 iterations 62
Cbc0038I Pass  24: suminf.    7.10476 (24) obj. 315.655 iterations 127
Cbc0038I Pass  25: suminf.    3.71761 (20) obj. 324.375 iterations 83
Cbc0038I Pass  26: suminf.    3.48484 (16) obj. 324.375 iterations 89
Cbc0038I Pass  27: suminf.    3.49660 (28) obj. 324.375 iterations 72
Cbc0038I Pass  28: suminf.    4.76426 (22) obj. 324.375 iterations 146
Cbc0038I Pass  29: suminf.    4.96339 (42) obj. 324.375 iterations 62
Cbc0038I Pass  30: suminf.    4.72873 (37) obj. 324.375 iterations 65
Cbc0038I Pass  31: suminf.    2.94786 (28) obj. 324.375 iterations 51
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 349 integers at bound fixed and 0 continuous
Cbc0038I Full problem 464 rows 483 columns, reduced to 456 rows 126 columns - 11 fixed gives 437, 55 - still too large
Cbc0038I Full problem 464 rows 483 columns, reduced to 124 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of 330.775 - took 0.08 seconds
Cbc0012I Integer solution of 330.77525 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 464 rows 483 columns, reduced to 56 rows 26 columns
Cbc0031I 14 added rows had average density of 337.57143
Cbc0013I At root node, 14 cuts changed objective from 266.77709 to 274.78174 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.138 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 900 row cuts average 415.2 elements, 0 column cuts (0 active)  in 0.187 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 43.0 elements, 0 column cuts (0 active)  in 0.069 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 280 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 6 (TwoMirCuts) - 796 row cuts average 38.3 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 330.77525 best solution, best possible 274.78174 (1.15 seconds)
Cbc0016I Integer solution of 288.46487 found by strong branching after 6862 iterations and 13 nodes (1.41 seconds)
Cbc0038I Full problem 464 rows 483 columns, reduced to 426 rows 32 columns - 3 fixed gives 420, 24 - still too large
Cbc0038I Full problem 478 rows 483 columns, reduced to 464 rows 243 columns - too large
Cbc0016I Integer solution of 287.33526 found by strong branching after 8182 iterations and 72 nodes (1.58 seconds)
Cbc0038I Full problem 464 rows 483 columns, reduced to 68 rows 32 columns
Cbc0004I Integer solution of 278.43708 found after 10139 iterations and 126 nodes (1.71 seconds)
Cbc0001I Search completed - best objective 278.437076958758, took 14702 iterations and 238 nodes (2.02 seconds)
Cbc0032I Strong branching done 1906 times (26852 iterations), fathomed 22 nodes and fixed 8 variables
Cbc0035I Maximum depth 18, 4033 variables fixed on reduced cost
Cuts at root node changed objective from 266.777 to 274.782
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.138 seconds)
Gomory was tried 181 times and created 985 cuts of which 0 were active after adding rounds of cuts (0.199 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
MixedIntegerRounding2 was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.069 seconds)
FlowCover was tried 181 times and created 355 cuts of which 0 were active after adding rounds of cuts (0.055 seconds)
TwoMirCuts was tried 181 times and created 979 cuts of which 0 were active after adding rounds of cuts (0.058 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                278.43707696
Enumerated nodes:               238
Total iterations:               14702
Time (CPU seconds):             2.01
Time (Wallclock seconds):       2.02

Option for printingOptions changed from normal to all
Total time (CPU seconds):       2.02   (Wallclock seconds):       2.02



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSPMD/10/E-n22-k4/3/0/solution_r0.py", line 57, in <module>
    tours[k[0] // (n // 4)].append(k)
    ~~~~~^^^^^^^^^^^^^^^^^^
KeyError: 4


