OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/0d6c90f9725d4eb896ddfa1df0161a97-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/0d6c90f9725d4eb896ddfa1df0161a97-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 713 COLUMNS
At line 30106 RHS
At line 30815 BOUNDS
At line 39674 ENDATA
Problem MODEL has 708 rows, 8839 columns and 2932 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 167.685 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 684 strengthened rows, 0 substitutions
Cgl0004I processed model has 706 rows, 763 columns (744 integer (744 of which binary)) and 8992 elements
Cbc0038I Initial state - 32 integers unsatisfied sum - 1.77778
Cbc0038I Pass   1: suminf.    1.00000 (10) obj. 177.808 iterations 28
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. 268.923 iterations 11
Cbc0038I Solution found of 268.923
Cbc0038I Relaxing continuous gives 268.923
Cbc0038I Before mini branch and bound, 707 integers at bound fixed and 3 continuous
Cbc0038I Full problem 706 rows 763 columns, reduced to 267 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.30 seconds)
Cbc0038I Round again with cutoff of 258.799
Cbc0038I Pass   3: suminf.    1.00000 (10) obj. 177.808 iterations 0
Cbc0038I Pass   4: suminf.    0.54000 (2) obj. 258.799 iterations 33
Cbc0038I Pass   5: suminf.    0.20000 (2) obj. 235.176 iterations 10
Cbc0038I Pass   6: suminf.    1.09257 (6) obj. 258.799 iterations 82
Cbc0038I Pass   7: suminf.    0.20000 (2) obj. 254.053 iterations 22
Cbc0038I Pass   8: suminf.    0.45316 (2) obj. 258.799 iterations 21
Cbc0038I Pass   9: suminf.    0.61988 (4) obj. 258.799 iterations 73
Cbc0038I Pass  10: suminf.    0.20000 (2) obj. 258.146 iterations 42
Cbc0038I Pass  11: suminf.    0.70536 (2) obj. 258.799 iterations 41
Cbc0038I Pass  12: suminf.    0.00000 (0) obj. 250.616 iterations 22
Cbc0038I Solution found of 250.616
Cbc0038I Relaxing continuous gives 250.616
Cbc0038I Before mini branch and bound, 681 integers at bound fixed and 3 continuous
Cbc0038I Full problem 706 rows 763 columns, reduced to 296 rows 71 columns
Cbc0038I Mini branch and bound improved solution from 250.616 to 222.946 (0.34 seconds)
Cbc0038I Round again with cutoff of 211.894
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  13: suminf.    1.00000 (10) obj. 177.808 iterations 0
Cbc0038I Pass  14: suminf.    0.59449 (4) obj. 211.894 iterations 33
Cbc0038I Pass  15: suminf.    0.40000 (5) obj. 211.894 iterations 11
Cbc0038I Pass  16: suminf.    1.06468 (6) obj. 211.894 iterations 20
Cbc0038I Pass  17: suminf.    0.65963 (6) obj. 211.894 iterations 6
Cbc0038I Pass  18: suminf.    0.40000 (4) obj. 190.721 iterations 22
Cbc0038I Pass  19: suminf.    0.22418 (2) obj. 211.894 iterations 20
Cbc0038I Pass  20: suminf.    0.20000 (2) obj. 211.604 iterations 13
Cbc0038I Pass  21: suminf.    0.52897 (8) obj. 211.894 iterations 106
Cbc0038I Pass  22: suminf.    0.40000 (5) obj. 211.894 iterations 32
Cbc0038I Pass  23: suminf.    0.50696 (2) obj. 211.894 iterations 31
Cbc0038I Pass  24: suminf.    0.40000 (3) obj. 211.894 iterations 25
Cbc0038I Pass  25: suminf.    0.40540 (3) obj. 211.894 iterations 16
Cbc0038I Pass  26: suminf.    0.40000 (3) obj. 211.894 iterations 16
Cbc0038I Pass  27: suminf.    0.40540 (3) obj. 211.894 iterations 21
Cbc0038I Pass  28: suminf.    1.30378 (6) obj. 211.894 iterations 59
Cbc0038I Pass  29: suminf.    0.70000 (5) obj. 211.894 iterations 24
Cbc0038I Pass  30: suminf.    1.37891 (4) obj. 211.894 iterations 22
Cbc0038I Pass  31: suminf.    0.70000 (5) obj. 211.894 iterations 19
Cbc0038I Pass  32: suminf.    0.21497 (3) obj. 211.894 iterations 20
Cbc0038I Pass  33: suminf.    0.20000 (3) obj. 211.894 iterations 14
Cbc0038I Pass  34: suminf.    0.49790 (2) obj. 211.894 iterations 26
Cbc0038I Pass  35: suminf.    0.49790 (2) obj. 211.894 iterations 0
Cbc0038I Pass  36: suminf.    0.20000 (2) obj. 209.217 iterations 19
Cbc0038I Pass  37: suminf.    0.34276 (2) obj. 211.894 iterations 22
Cbc0038I Pass  38: suminf.    1.41593 (8) obj. 211.894 iterations 79
Cbc0038I Pass  39: suminf.    0.60000 (7) obj. 211.894 iterations 27
Cbc0038I Pass  40: suminf.    0.49093 (4) obj. 211.894 iterations 28
Cbc0038I Pass  41: suminf.    0.49093 (4) obj. 211.894 iterations 4
Cbc0038I Pass  42: suminf.    0.20000 (2) obj. 210.324 iterations 33
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 658 integers at bound fixed and 0 continuous
Cbc0038I Full problem 706 rows 763 columns, reduced to 331 rows 95 columns
Cbc0038I Mini branch and bound improved solution from 222.946 to 184.823 (0.39 seconds)
Cbc0038I Round again with cutoff of 179.682
Cbc0038I Reduced cost fixing fixed 437 variables on major pass 4
Cbc0038I Pass  42: suminf.    1.00000 (10) obj. 170.31 iterations 4
Cbc0038I Pass  43: suminf.    0.42366 (5) obj. 179.682 iterations 27
Cbc0038I Pass  44: suminf.    0.40000 (6) obj. 179.682 iterations 8
Cbc0038I Pass  45: suminf.    1.07271 (4) obj. 179.682 iterations 20
Cbc0038I Pass  46: suminf.    1.07271 (4) obj. 179.682 iterations 0
Cbc0038I Pass  47: suminf.    0.40000 (4) obj. 177.113 iterations 15
Cbc0038I Pass  48: suminf.    0.72140 (4) obj. 179.682 iterations 14
Cbc0038I Pass  49: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  50: suminf.    0.40000 (4) obj. 177.113 iterations 19
Cbc0038I Pass  51: suminf.    0.72140 (4) obj. 179.682 iterations 14
Cbc0038I Pass  52: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  53: suminf.    0.40000 (4) obj. 177.113 iterations 16
Cbc0038I Pass  54: suminf.    0.72140 (4) obj. 179.682 iterations 14
Cbc0038I Pass  55: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  56: suminf.    0.40000 (4) obj. 177.113 iterations 19
Cbc0038I Pass  57: suminf.    0.72140 (4) obj. 179.682 iterations 13
Cbc0038I Pass  58: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  59: suminf.    0.40000 (4) obj. 177.113 iterations 16
Cbc0038I Pass  60: suminf.    0.72140 (4) obj. 179.682 iterations 15
Cbc0038I Pass  61: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  62: suminf.    0.40000 (4) obj. 177.113 iterations 19
Cbc0038I Pass  63: suminf.    0.72140 (4) obj. 179.682 iterations 13
Cbc0038I Pass  64: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  65: suminf.    0.40000 (4) obj. 177.113 iterations 16
Cbc0038I Pass  66: suminf.    0.72140 (4) obj. 179.682 iterations 14
Cbc0038I Pass  67: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  68: suminf.    0.40000 (4) obj. 177.113 iterations 19
Cbc0038I Pass  69: suminf.    0.72140 (4) obj. 179.682 iterations 13
Cbc0038I Pass  70: suminf.    0.72140 (4) obj. 179.682 iterations 5
Cbc0038I Pass  71: suminf.    0.40000 (4) obj. 177.113 iterations 16
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 705 integers at bound fixed and 3 continuous
Cbc0038I Full problem 706 rows 763 columns, reduced to 270 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.44 seconds)
Cbc0038I After 0.44 seconds - Feasibility pump exiting with objective of 184.823 - took 0.18 seconds
Cbc0012I Integer solution of 184.82329 found by feasibility pump after 0 iterations and 0 nodes (0.44 seconds)
Cbc0038I Full problem 706 rows 763 columns, reduced to 269 rows 44 columns
Cbc0031I 17 added rows had average density of 42.529412
Cbc0013I At root node, 17 cuts changed objective from 167.68451 to 167.68451 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 55 row cuts average 2.4 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 93 row cuts average 38.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 32 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 202 row cuts average 35.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 184.82329 best solution, best possible 167.68451 (0.48 seconds)
Cbc0038I Full problem 706 rows 763 columns, reduced to 181 rows 29 columns
Cbc0038I Full problem 723 rows 763 columns, reduced to 557 rows 440 columns
Cbc0044I Reduced cost fixing - 557 rows, 440 columns - restarting search
Cbc0012I Integer solution of 184.82329 found by Previous solution after 0 iterations and 0 nodes (0.55 seconds)
Cbc0038I Full problem 557 rows 440 columns, reduced to 251 rows 36 columns
Cbc0031I 12 added rows had average density of 33.416667
Cbc0013I At root node, 12 cuts changed objective from 167.68451 to 172.35658 in 12 passes
Cbc0014I Cut generator 0 (Probing) - 37 row cuts average 7.8 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 93 row cuts average 36.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 25.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 28 row cuts average 11.1 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 127 row cuts average 31.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 9 (Stored from first) - 22 row cuts average 41.0 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, 184.82329 best solution, best possible 172.35658 (0.58 seconds)
Cbc0012I Integer solution of 182.05573 found by DiveCoefficient after 236 iterations and 4 nodes (0.60 seconds)
Cbc0038I Full problem 557 rows 440 columns, reduced to 71 rows 17 columns
Cbc0038I Full problem 557 rows 440 columns, reduced to 136 rows 29 columns
Cbc0004I Integer solution of 180.44371 found after 1706 iterations and 193 nodes (0.97 seconds)
Cbc0038I Full problem 557 rows 440 columns, reduced to 52 rows 18 columns
Cbc0038I Full problem 557 rows 440 columns, reduced to 68 rows 23 columns
Cbc0038I Full problem 557 rows 440 columns, reduced to 133 rows 25 columns
Cbc0038I Full problem 557 rows 440 columns, reduced to 112 rows 22 columns
Cbc0038I Full problem 557 rows 440 columns, reduced to 133 rows 28 columns
Cbc0010I After 1000 nodes, 9 on tree, 180.44371 best solution, best possible 172.48001 (2.04 seconds)
Cbc0010I After 2000 nodes, 7 on tree, 180.44371 best solution, best possible 175.19535 (3.14 seconds)
Cbc0038I Full problem 557 rows 440 columns, reduced to 87 rows 22 columns
Cbc0001I Search completed - best objective 180.443706432107, took 20065 iterations and 2175 nodes (3.47 seconds)
Cbc0032I Strong branching done 5114 times (11670 iterations), fathomed 538 nodes and fixed 1062 variables
Cbc0035I Maximum depth 16, 25725 variables fixed on reduced cost
Cbc0038I Probing was tried 1871 times and created 13796 cuts of which 0 were active after adding rounds of cuts (0.158 seconds)
Cbc0038I Gomory was tried 1820 times and created 1563 cuts of which 0 were active after adding rounds of cuts (0.112 seconds)
Cbc0038I Knapsack was tried 12 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I Clique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 1820 times and created 1859 cuts of which 0 were active after adding rounds of cuts (0.263 seconds)
Cbc0038I FlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I TwoMirCuts was tried 409 times and created 306 cuts of which 0 were active after adding rounds of cuts (0.029 seconds)
Cbc0038I ZeroHalf was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I Stored from first was tried 1820 times and created 232 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0012I Integer solution of 180.44371 found by Reduced search after 20442 iterations and 2225 nodes (3.47 seconds)
Cbc0001I Search completed - best objective 180.443706432107, took 20442 iterations and 2225 nodes (3.47 seconds)
Cbc0032I Strong branching done 362 times (676 iterations), fathomed 0 nodes and fixed 10 variables
Cbc0035I Maximum depth 17, 1879 variables fixed on reduced cost
Cuts at root node changed objective from 167.685 to 167.685
Probing was tried 30 times and created 80 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
Gomory was tried 30 times and created 115 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 30 times and created 38 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 10 times and created 202 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                180.44370643
Enumerated nodes:               2225
Total iterations:               20442
Time (CPU seconds):             3.42
Time (Wallclock seconds):       3.48

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3.43   (Wallclock seconds):       3.48



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP/10/P-n21-k2/4/0/solution_r2.py", line 54, in <module>
    if pulp.value(x[i, j, k]) == 1:
                  ~^^^^^^^^^
KeyError: (0, 0, 0)


