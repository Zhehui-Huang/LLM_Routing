OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/c68731d4613a45299a7c74a93770fe32-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/c68731d4613a45299a7c74a93770fe32-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 1844 COLUMNS
At line 18525 RHS
At line 20365 BOUNDS
At line 22286 ENDATA
Problem MODEL has 1839 rows, 1935 columns and 10920 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 385.079 - 0.00 seconds
Cgl0004I processed model has 1839 rows, 1935 columns (1920 integer (1920 of which binary)) and 10920 elements
Cbc0038I Initial state - 26 integers unsatisfied sum - 7.75
Cbc0038I Pass   1: suminf.    1.68750 (30) obj. 390.647 iterations 223
Cbc0038I Pass   2: suminf.    0.75000 (16) obj. 390.757 iterations 149
Cbc0038I Pass   3: suminf.    6.00000 (12) obj. 475.93 iterations 252
Cbc0038I Pass   4: suminf.    0.75000 (19) obj. 436.879 iterations 94
Cbc0038I Pass   5: suminf.    0.75000 (20) obj. 435.469 iterations 10
Cbc0038I Pass   6: suminf.    5.00000 (14) obj. 423.894 iterations 136
Cbc0038I Pass   7: suminf.    1.00000 (8) obj. 393.198 iterations 100
Cbc0038I Pass   8: suminf.    0.75000 (17) obj. 389.507 iterations 100
Cbc0038I Pass   9: suminf.    0.83333 (14) obj. 440.833 iterations 159
Cbc0038I Pass  10: suminf.    0.75000 (15) obj. 437.783 iterations 166
Cbc0038I Pass  11: suminf.    3.37500 (14) obj. 436.646 iterations 141
Cbc0038I Pass  12: suminf.    0.75000 (20) obj. 437.181 iterations 107
Cbc0038I Pass  13: suminf.    0.75000 (20) obj. 435.469 iterations 14
Cbc0038I Pass  14: suminf.    5.00000 (14) obj. 423.894 iterations 120
Cbc0038I Pass  15: suminf.    1.00000 (8) obj. 393.198 iterations 98
Cbc0038I Pass  16: suminf.    0.75000 (17) obj. 389.507 iterations 74
Cbc0038I Pass  17: suminf.    0.83333 (14) obj. 440.833 iterations 149
Cbc0038I Pass  18: suminf.    0.75000 (15) obj. 437.783 iterations 186
Cbc0038I Pass  19: suminf.    0.75000 (4) obj. 439.607 iterations 158
Cbc0038I Pass  20: suminf.    0.75000 (21) obj. 438.124 iterations 84
Cbc0038I Pass  21: suminf.    5.00000 (10) obj. 428.164 iterations 110
Cbc0038I Pass  22: suminf.    0.93750 (9) obj. 437.964 iterations 56
Cbc0038I Pass  23: suminf.    0.75000 (20) obj. 435.469 iterations 73
Cbc0038I Pass  24: suminf.    5.00000 (14) obj. 423.894 iterations 126
Cbc0038I Pass  25: suminf.    1.00000 (8) obj. 393.198 iterations 121
Cbc0038I Pass  26: suminf.    0.75000 (17) obj. 389.507 iterations 80
Cbc0038I Pass  27: suminf.    0.83333 (14) obj. 440.833 iterations 149
Cbc0038I Pass  28: suminf.    0.75000 (15) obj. 437.783 iterations 177
Cbc0038I Pass  29: suminf.    3.37500 (14) obj. 436.646 iterations 124
Cbc0038I Pass  30: suminf.    0.75000 (20) obj. 437.181 iterations 73
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1832 integers at bound fixed and 8 continuous
Cbc0038I Full problem 1839 rows 1935 columns, reduced to 89 rows 64 columns
Cbc0038I Mini branch and bound improved solution from 1.79769e+308 to 450.844 (0.12 seconds)
Cbc0038I Round again with cutoff of 444.268
Cbc0038I Pass  30: suminf.    1.68750 (30) obj. 390.647 iterations 0
Cbc0038I Pass  31: suminf.    0.75000 (19) obj. 390.679 iterations 178
Cbc0038I Pass  32: suminf.    4.42264 (16) obj. 444.268 iterations 208
Cbc0038I Pass  33: suminf.    2.35729 (12) obj. 444.268 iterations 201
Cbc0038I Pass  34: suminf.    0.75000 (19) obj. 433.392 iterations 162
Cbc0038I Pass  35: suminf.    3.80336 (13) obj. 444.268 iterations 209
Cbc0038I Pass  36: suminf.    3.00000 (9) obj. 440.53 iterations 87
Cbc0038I Pass  37: suminf.    3.00000 (9) obj. 440.53 iterations 207
Cbc0038I Pass  38: suminf.    7.09412 (37) obj. 444.268 iterations 255
Cbc0038I Pass  39: suminf.    3.00000 (17) obj. 444.268 iterations 194
Cbc0038I Pass  40: suminf.    3.59780 (11) obj. 444.268 iterations 350
Cbc0038I Pass  41: suminf.    0.75000 (11) obj. 420.91 iterations 135
Cbc0038I Pass  42: suminf.    0.75000 (16) obj. 420.227 iterations 62
Cbc0038I Pass  43: suminf.    1.21987 (6) obj. 444.268 iterations 236
Cbc0038I Pass  44: suminf.    1.21987 (6) obj. 444.268 iterations 48
Cbc0038I Pass  45: suminf.    0.75000 (15) obj. 419.923 iterations 198
Cbc0038I Pass  46: suminf.    3.93081 (11) obj. 444.268 iterations 201
Cbc0038I Pass  47: suminf.    3.00000 (17) obj. 444.268 iterations 117
Cbc0038I Pass  48: suminf.    3.93081 (11) obj. 444.268 iterations 276
Cbc0038I Pass  49: suminf.    6.65027 (39) obj. 444.268 iterations 233
Cbc0038I Pass  50: suminf.    0.75000 (13) obj. 421.948 iterations 244
Cbc0038I Pass  51: suminf.    0.75000 (19) obj. 421.817 iterations 82
Cbc0038I Pass  52: suminf.    3.42108 (17) obj. 444.268 iterations 231
Cbc0038I Pass  53: suminf.    3.00000 (16) obj. 444.268 iterations 75
Cbc0038I Pass  54: suminf.    3.00000 (14) obj. 444.268 iterations 299
Cbc0038I Pass  55: suminf.    3.00000 (15) obj. 444.268 iterations 118
Cbc0038I Pass  56: suminf.    3.29843 (13) obj. 444.268 iterations 287
Cbc0038I Pass  57: suminf.    0.75000 (17) obj. 421.129 iterations 126
Cbc0038I Pass  58: suminf.    4.27503 (11) obj. 444.268 iterations 226
Cbc0038I Pass  59: suminf.    0.75000 (12) obj. 420.909 iterations 246
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1750 integers at bound fixed and 7 continuous
Cbc0038I Full problem 1839 rows 1935 columns, reduced to 152 rows 121 columns
Cbc0038I Mini branch and bound improved solution from 450.844 to 442.799 (0.27 seconds)
Cbc0038I Round again with cutoff of 431.255
Cbc0038I Pass  59: suminf.    1.68750 (30) obj. 390.647 iterations 0
Cbc0038I Pass  60: suminf.    0.75000 (19) obj. 390.679 iterations 178
Cbc0038I Pass  61: suminf.    5.65721 (13) obj. 431.255 iterations 206
Cbc0038I Pass  62: suminf.    0.75000 (14) obj. 390.279 iterations 158
Cbc0038I Pass  63: suminf.    0.75000 (17) obj. 389.507 iterations 71
Cbc0038I Pass  64: suminf.    3.72441 (11) obj. 431.255 iterations 313
Cbc0038I Pass  65: suminf.    1.32846 (6) obj. 431.255 iterations 47
Cbc0038I Pass  66: suminf.    1.22995 (11) obj. 431.255 iterations 50
Cbc0038I Pass  67: suminf.    0.75000 (9) obj. 404.155 iterations 241
Cbc0038I Pass  68: suminf.    0.75000 (11) obj. 406.918 iterations 87
Cbc0038I Pass  69: suminf.    1.93824 (11) obj. 431.255 iterations 260
Cbc0038I Pass  70: suminf.    1.57497 (11) obj. 431.255 iterations 65
Cbc0038I Pass  71: suminf.    0.75000 (9) obj. 403.361 iterations 251
Cbc0038I Pass  72: suminf.    0.75000 (6) obj. 409.104 iterations 105
Cbc0038I Pass  73: suminf.    2.31281 (8) obj. 431.255 iterations 184
Cbc0038I Pass  74: suminf.    0.75000 (15) obj. 391.068 iterations 215
Cbc0038I Pass  75: suminf.    3.99825 (15) obj. 431.255 iterations 195
Cbc0038I Pass  76: suminf.    1.04307 (9) obj. 431.255 iterations 143
Cbc0038I Pass  77: suminf.    0.75000 (12) obj. 431.255 iterations 209
Cbc0038I Pass  78: suminf.    0.75000 (6) obj. 425.133 iterations 157
Cbc0038I Pass  79: suminf.    0.75000 (6) obj. 425.133 iterations 48
Cbc0038I Pass  80: suminf.    2.31281 (8) obj. 431.255 iterations 209
Cbc0038I Pass  81: suminf.    0.75000 (17) obj. 389.507 iterations 249
Cbc0038I Pass  82: suminf.    3.72441 (11) obj. 431.255 iterations 237
Cbc0038I Pass  83: suminf.    1.32846 (6) obj. 431.255 iterations 45
Cbc0038I Pass  84: suminf.    1.22995 (11) obj. 431.255 iterations 39
Cbc0038I Pass  85: suminf.    0.75000 (9) obj. 404.155 iterations 208
Cbc0038I Pass  86: suminf.    0.75000 (11) obj. 406.918 iterations 96
Cbc0038I Pass  87: suminf.    1.93824 (11) obj. 431.255 iterations 212
Cbc0038I Pass  88: suminf.    1.57497 (11) obj. 431.255 iterations 60
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1827 integers at bound fixed and 8 continuous
Cbc0038I Full problem 1839 rows 1935 columns, reduced to 96 rows 69 columns
Cbc0038I Mini branch and bound did not improve solution (0.38 seconds)
Cbc0038I After 0.38 seconds - Feasibility pump exiting with objective of 442.799 - took 0.36 seconds
Cbc0012I Integer solution of 442.79943 found by feasibility pump after 0 iterations and 0 nodes (0.38 seconds)
Cbc0038I Full problem 1839 rows 1935 columns, reduced to 240 rows 27 columns
Cbc0031I 23 added rows had average density of 322.69565
Cbc0013I At root node, 23 cuts changed objective from 385.07893 to 385.07893 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.148 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 99 row cuts average 291.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 46 row cuts average 28.6 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 128 row cuts average 137.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 442.79943 best solution, best possible 385.07893 (0.60 seconds)
Cbc0012I Integer solution of 412.85334 found by DiveCoefficient after 198 iterations and 9 nodes (0.69 seconds)
Cbc0016I Integer solution of 401.33336 found by strong branching after 226 iterations and 13 nodes (0.72 seconds)
Cbc0016I Integer solution of 400.99297 found by strong branching after 286 iterations and 18 nodes (0.76 seconds)
Cbc0016I Integer solution of 395.28504 found by strong branching after 531 iterations and 35 nodes (0.83 seconds)
Cbc0038I Full problem 1839 rows 1935 columns, reduced to 234 rows 23 columns
Cbc0038I Full problem 1839 rows 1935 columns, reduced to 675 rows 607 columns
Cbc0044I Reduced cost fixing - 675 rows, 607 columns - restarting search
Cbc0012I Integer solution of 395.28504 found by Previous solution after 0 iterations and 0 nodes (0.90 seconds)
Cbc0038I Full problem 675 rows 607 columns, reduced to 241 rows 27 columns
Cbc0031I 20 added rows had average density of 68.95
Cbc0013I At root node, 20 cuts changed objective from 385.07893 to 385.07893 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 87 row cuts average 107.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 76 row cuts average 6.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 116 row cuts average 58.8 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 395.28504 best solution, best possible 385.07893 (0.95 seconds)
Cbc0038I Full problem 675 rows 607 columns, reduced to 234 rows 24 columns
Cbc0038I Full problem 675 rows 607 columns, reduced to 233 rows 24 columns
Cbc0010I After 100 nodes, 9 on tree, 395.28504 best solution, best possible 385.07893 (1.21 seconds)
Cbc0001I Search completed - best objective 395.285041245467, took 2174 iterations and 144 nodes (1.32 seconds)
Cbc0032I Strong branching done 1574 times (10467 iterations), fathomed 69 nodes and fixed 97 variables
Cbc0035I Maximum depth 18, 5741 variables fixed on reduced cost
Cbc0038I Probing was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.021 seconds)
Cbc0038I Gomory was tried 10 times and created 87 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 10 times and created 76 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I TwoMirCuts was tried 10 times and created 116 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Cbc0038I ZeroHalf was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0001I Search completed - best objective 395.2850412454671, took 2890 iterations and 194 nodes (1.32 seconds)
Cbc0032I Strong branching done 632 times (4913 iterations), fathomed 18 nodes and fixed 29 variables
Cbc0035I Maximum depth 15, 8632 variables fixed on reduced cost
Cuts at root node changed objective from 385.079 to 385.079
Probing was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.148 seconds)
Gomory was tried 10 times and created 99 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 10 times and created 46 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 10 times and created 128 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                395.28504125
Enumerated nodes:               194
Total iterations:               2890
Time (CPU seconds):             1.29
Time (Wallclock seconds):       1.33

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.30   (Wallclock seconds):       1.33



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP/10/P-n16-k8/1/1/solution_r1.py", line 60, in <module>
    next_city = next(j for j in range(1, n) if x[i][j][k].varValue == 1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
StopIteration


