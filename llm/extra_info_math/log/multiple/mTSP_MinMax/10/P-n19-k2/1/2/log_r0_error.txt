OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/bda4b5f031154d6fb7b67ff00036b9ab-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/bda4b5f031154d6fb7b67ff00036b9ab-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 1359 COLUMNS
At line 7949 RHS
At line 9304 BOUNDS
At line 9990 ENDATA
Problem MODEL has 1354 rows, 703 columns and 5220 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.31654 - 0.01 seconds
Cgl0004I processed model has 1354 rows, 703 columns (684 integer (684 of which binary)) and 5220 elements
Cbc0038I Initial state - 245 integers unsatisfied sum - 20
Cbc0038I Pass   1: suminf.   14.88889 (45) obj. 26.0875 iterations 512
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. 48.7955 iterations 137
Cbc0038I Solution found of 48.7955
Cbc0038I Relaxing continuous gives 48.7955
Cbc0038I Before mini branch and bound, 411 integers at bound fixed and 2 continuous
Cbc0038I Full problem 1354 rows 703 columns, reduced to 492 rows 269 columns
Cbc0038I Mini branch and bound improved solution from 48.7955 to 29.8329 (0.12 seconds)
Cbc0038I Round again with cutoff of 26.9812
Cbc0038I Pass   3: suminf.   14.88889 (45) obj. 26.0875 iterations 0
Cbc0038I Pass   4: suminf.    6.26429 (46) obj. 26.9812 iterations 83
Cbc0038I Pass   5: suminf.    5.33408 (44) obj. 26.9812 iterations 51
Cbc0038I Pass   6: suminf.    6.20382 (34) obj. 26.9812 iterations 125
Cbc0038I Pass   7: suminf.    4.24294 (31) obj. 26.9812 iterations 44
Cbc0038I Pass   8: suminf.    3.47359 (29) obj. 26.9812 iterations 26
Cbc0038I Pass   9: suminf.    6.19117 (21) obj. 26.9812 iterations 74
Cbc0038I Pass  10: suminf.    3.25121 (22) obj. 26.9812 iterations 50
Cbc0038I Pass  11: suminf.    2.51342 (21) obj. 26.9812 iterations 38
Cbc0038I Pass  12: suminf.    1.72231 (44) obj. 26.9812 iterations 48
Cbc0038I Pass  13: suminf.    2.71206 (17) obj. 26.9812 iterations 69
Cbc0038I Pass  14: suminf.    1.80315 (44) obj. 26.9812 iterations 36
Cbc0038I Pass  15: suminf.    3.24612 (15) obj. 26.9812 iterations 67
Cbc0038I Pass  16: suminf.   12.09800 (39) obj. 26.9812 iterations 130
Cbc0038I Pass  17: suminf.    4.39816 (31) obj. 26.9812 iterations 99
Cbc0038I Pass  18: suminf.    3.72160 (38) obj. 26.9812 iterations 64
Cbc0038I Pass  19: suminf.    2.73559 (38) obj. 26.9812 iterations 34
Cbc0038I Pass  20: suminf.    2.68228 (27) obj. 26.9812 iterations 113
Cbc0038I Pass  21: suminf.    2.09408 (30) obj. 26.9812 iterations 32
Cbc0038I Pass  22: suminf.    4.62271 (20) obj. 26.9812 iterations 79
Cbc0038I Pass  23: suminf.    2.95159 (20) obj. 26.9812 iterations 67
Cbc0038I Pass  24: suminf.    3.60115 (20) obj. 26.9812 iterations 111
Cbc0038I Pass  25: suminf.    3.09891 (36) obj. 26.9812 iterations 39
Cbc0038I Pass  26: suminf.    2.39023 (20) obj. 26.9812 iterations 54
Cbc0038I Pass  27: suminf.    1.99279 (26) obj. 26.9812 iterations 34
Cbc0038I Pass  28: suminf.    3.39719 (16) obj. 26.9812 iterations 115
Cbc0038I Pass  29: suminf.    2.05952 (31) obj. 26.9812 iterations 73
Cbc0038I Pass  30: suminf.    5.48387 (21) obj. 26.9812 iterations 84
Cbc0038I Pass  31: suminf.    3.28761 (27) obj. 26.9812 iterations 67
Cbc0038I Pass  32: suminf.    3.08776 (27) obj. 26.9812 iterations 29
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 306 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1354 rows 703 columns, reduced to 960 rows 397 columns - 2 fixed gives 638, 313 - ok now
Cbc0038I Mini branch and bound did not improve solution (0.17 seconds)
Cbc0038I After 0.17 seconds - Feasibility pump exiting with objective of 29.8329 - took 0.16 seconds
Cbc0012I Integer solution of 29.832868 found by feasibility pump after 0 iterations and 0 nodes (0.17 seconds)
Cbc0038I Full problem 1354 rows 703 columns, reduced to 740 rows 264 columns - 2 fixed gives 497, 198 - ok now
Cbc0031I 51 added rows had average density of 12.490196
Cbc0013I At root node, 51 cuts changed objective from 1.3165406 to 13.892416 in 11 passes
Cbc0014I Cut generator 0 (Probing) - 8559 row cuts average 3.9 elements, 9 column cuts (9 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 777 row cuts average 113.6 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 232 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 753 row cuts average 30.9 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 29.832868 best solution, best possible 13.892416 (0.48 seconds)
Cbc0004I Integer solution of 18.601075 found after 4725 iterations and 31 nodes (1.02 seconds)
Cbc0038I Full problem 1354 rows 703 columns, reduced to 388 rows 52 columns
Cbc0038I Full problem 1405 rows 703 columns, reduced to 924 rows 471 columns
Cbc0044I Reduced cost fixing - 924 rows, 471 columns - restarting search
Cbc0012I Integer solution of 18.601075 found by Previous solution after 0 iterations and 0 nodes (1.12 seconds)
Cbc0038I Full problem 924 rows 471 columns, reduced to 441 rows 79 columns
Cbc0031I 28 added rows had average density of 7.6071429
Cbc0013I At root node, 28 cuts changed objective from 11.226044 to 13.892444 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 356 row cuts average 3.8 elements, 9 column cuts (9 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 37 row cuts average 9.3 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 120 row cuts average 2.9 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 142 row cuts average 36.7 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 9 (Stored from first) - 52 row cuts average 12.0 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, 18.601075 best solution, best possible 13.892444 (1.28 seconds)
Cbc0038I Full problem 924 rows 471 columns, reduced to 338 rows 31 columns
Cbc0038I Full problem 924 rows 471 columns, reduced to 352 rows 41 columns
Cbc0038I Full problem 924 rows 471 columns, reduced to 388 rows 43 columns
Cbc0038I Full problem 924 rows 471 columns, reduced to 366 rows 41 columns
Cbc0012I Integer solution of 16.763055 found by RINS after 40611 iterations and 800 nodes (3.76 seconds)
Cbc0038I Full problem 924 rows 471 columns, reduced to 366 rows 37 columns
Cbc0010I After 1000 nodes, 108 on tree, 16.763055 best solution, best possible 13.892444 (4.44 seconds)
Cbc0004I Integer solution of 16.643317 found after 55139 iterations and 1086 nodes (4.63 seconds)
Cbc0038I Full problem 924 rows 471 columns, reduced to 434 rows 74 columns
Cbc0004I Integer solution of 16.155494 found after 82519 iterations and 1634 nodes (6.09 seconds)
Cbc0016I Integer solution of 15.811388 found by strong branching after 85116 iterations and 1686 nodes (6.22 seconds)
Cbc0001I Search completed - best objective 15.81138830084, took 89407 iterations and 1842 nodes (6.39 seconds)
Cbc0032I Strong branching done 5384 times (86327 iterations), fathomed 118 nodes and fixed 297 variables
Cbc0035I Maximum depth 54, 1658 variables fixed on reduced cost
Cbc0038I Probing was tried 1485 times and created 12515 cuts of which 0 were active after adding rounds of cuts (0.248 seconds)
Cbc0038I Gomory was tried 1454 times and created 3983 cuts of which 0 were active after adding rounds of cuts (0.179 seconds)
Cbc0038I Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 1454 times and created 6748 cuts of which 0 were active after adding rounds of cuts (0.148 seconds)
Cbc0038I FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Cbc0038I TwoMirCuts was tried 1454 times and created 4530 cuts of which 0 were active after adding rounds of cuts (0.114 seconds)
Cbc0038I ZeroHalf was tried 10 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Cbc0038I Stored from first was tried 1454 times and created 821 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0012I Integer solution of 15.811388 found by Reduced search after 95305 iterations and 1892 nodes (6.39 seconds)
Cbc0001I Search completed - best objective 15.81138830084, took 95305 iterations and 1892 nodes (6.39 seconds)
Cbc0032I Strong branching done 970 times (16722 iterations), fathomed 4 nodes and fixed 6 variables
Cbc0035I Maximum depth 17, 24 variables fixed on reduced cost
Cuts at root node changed objective from 1.31654 to 13.8924
Probing was tried 63 times and created 8975 cuts of which 0 were active after adding rounds of cuts (0.054 seconds)
Gomory was tried 63 times and created 823 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
Knapsack was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Clique was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 63 times and created 585 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
FlowCover was tried 11 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
TwoMirCuts was tried 63 times and created 975 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                15.81138830
Enumerated nodes:               1892
Total iterations:               95305
Time (CPU seconds):             6.40
Time (Wallclock seconds):       6.40

Option for printingOptions changed from normal to all
Total time (CPU seconds):       6.40   (Wallclock seconds):       6.40



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n19-k2/1/2/solution_r0.py", line 69, in <module>
    next_city = [j for j in range(num_cities) if pulp.value(x[tour[-1], j, k]) == 1]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n19-k2/1/2/solution_r0.py", line 69, in <listcomp>
    next_city = [j for j in range(num_cities) if pulp.value(x[tour[-1], j, k]) == 1]
                                                            ~^^^^^^^^^^^^^^^^
KeyError: (0, 0, 0)


