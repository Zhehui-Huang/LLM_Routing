OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/f2e81f8e51da423f9a7a38b60f0e9cef-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/f2e81f8e51da423f9a7a38b60f0e9cef-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 71 COLUMNS
At line 5075 RHS
At line 5142 BOUNDS
At line 5984 ENDATA
Problem MODEL has 66 rows, 841 columns and 3322 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 86.2848 - 0.00 seconds
Cgl0004I processed model has 66 rows, 841 columns (840 integer (840 of which binary)) and 3322 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 1.28298
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 90.9106 iterations 111
Cbc0038I Solution found of 90.9106
Cbc0038I Relaxing continuous gives 90.9106
Cbc0038I Before mini branch and bound, 836 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 841 columns, reduced to 2 rows 2 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 90.448
Cbc0038I Reduced cost fixing fixed 602 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.11846 (4) obj. 90.448 iterations 31
Cbc0038I Pass   3: suminf.    1.59912 (4) obj. 90.448 iterations 49
Cbc0038I Pass   4: suminf.    0.45180 (4) obj. 90.448 iterations 46
Cbc0038I Pass   5: suminf.    3.05063 (11) obj. 90.448 iterations 59
Cbc0038I Pass   6: suminf.    2.65300 (8) obj. 90.448 iterations 38
Cbc0038I Pass   7: suminf.    0.11942 (4) obj. 90.448 iterations 59
Cbc0038I Pass   8: suminf.    0.11942 (4) obj. 90.448 iterations 11
Cbc0038I Pass   9: suminf.    1.32611 (4) obj. 90.448 iterations 52
Cbc0038I Pass  10: suminf.    0.72481 (4) obj. 90.448 iterations 50
Cbc0038I Pass  11: suminf.    2.45681 (12) obj. 90.448 iterations 39
Cbc0038I Pass  12: suminf.    2.06828 (8) obj. 90.448 iterations 41
Cbc0038I Pass  13: suminf.    0.41711 (4) obj. 90.448 iterations 48
Cbc0038I Pass  14: suminf.    0.41711 (4) obj. 90.448 iterations 12
Cbc0038I Pass  15: suminf.    1.32611 (4) obj. 90.448 iterations 51
Cbc0038I Pass  16: suminf.    0.72481 (4) obj. 90.448 iterations 54
Cbc0038I Pass  17: suminf.    1.79289 (8) obj. 90.448 iterations 47
Cbc0038I Pass  18: suminf.    1.75047 (8) obj. 90.448 iterations 32
Cbc0038I Pass  19: suminf.    1.24075 (4) obj. 90.448 iterations 40
Cbc0038I Pass  20: suminf.    0.81017 (4) obj. 90.448 iterations 47
Cbc0038I Pass  21: suminf.    4.74725 (21) obj. 90.448 iterations 37
Cbc0038I Pass  22: suminf.    0.81017 (4) obj. 90.448 iterations 31
Cbc0038I Pass  23: suminf.    4.71658 (17) obj. 90.448 iterations 41
Cbc0038I Pass  24: suminf.    1.91985 (8) obj. 90.448 iterations 28
Cbc0038I Pass  25: suminf.    5.38320 (21) obj. 90.448 iterations 47
Cbc0038I Pass  26: suminf.    0.74461 (4) obj. 90.448 iterations 39
Cbc0038I Pass  27: suminf.    1.30631 (4) obj. 90.448 iterations 38
Cbc0038I Pass  28: suminf.    1.71394 (12) obj. 90.448 iterations 49
Cbc0038I Pass  29: suminf.    1.05811 (4) obj. 90.448 iterations 45
Cbc0038I Pass  30: suminf.    0.99280 (4) obj. 90.448 iterations 44
Cbc0038I Pass  31: suminf.    5.90585 (34) obj. 90.448 iterations 72
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 743 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 841 columns, reduced to 46 rows 75 columns
Cbc0038I Mini branch and bound improved solution from 90.9106 to 86.9334 (0.04 seconds)
Cbc0038I Round again with cutoff of 86.8037
Cbc0038I Reduced cost fixing fixed 776 variables on major pass 3
Cbc0038I Pass  31: suminf.    1.05168 (4) obj. 86.8037 iterations 0
Cbc0038I Pass  32: suminf.    1.54781 (4) obj. 86.8037 iterations 20
Cbc0038I Pass  33: suminf.    1.30488 (4) obj. 86.8037 iterations 5
Cbc0038I Pass  34: suminf.    1.69898 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  35: suminf.    1.55307 (4) obj. 86.8037 iterations 3
Cbc0038I Pass  36: suminf.    1.79600 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  37: suminf.    0.88343 (4) obj. 86.8037 iterations 3
Cbc0038I Pass  38: suminf.    0.75878 (4) obj. 86.8037 iterations 2
Cbc0038I Pass  39: suminf.    1.28006 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  40: suminf.    1.03713 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  41: suminf.    1.63037 (4) obj. 86.8037 iterations 5
Cbc0038I Pass  42: suminf.    1.03713 (4) obj. 86.8037 iterations 5
Cbc0038I Pass  43: suminf.    0.31494 (4) obj. 86.8037 iterations 11
Cbc0038I Pass  44: suminf.    0.31494 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  45: suminf.    1.13276 (4) obj. 86.8037 iterations 7
Cbc0038I Pass  46: suminf.    0.88983 (4) obj. 86.8037 iterations 6
Cbc0038I Pass  47: suminf.    1.20209 (4) obj. 86.8037 iterations 2
Cbc0038I Pass  48: suminf.    0.88983 (4) obj. 86.8037 iterations 2
Cbc0038I Pass  49: suminf.    1.53028 (4) obj. 86.8037 iterations 6
Cbc0038I Pass  50: suminf.    0.79906 (4) obj. 86.8037 iterations 10
Cbc0038I Pass  51: suminf.    0.80671 (4) obj. 86.8037 iterations 3
Cbc0038I Pass  52: suminf.    1.54781 (4) obj. 86.8037 iterations 7
Cbc0038I Pass  53: suminf.    1.30488 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  54: suminf.    1.92821 (4) obj. 86.8037 iterations 5
Cbc0038I Pass  55: suminf.    1.92821 (4) obj. 86.8037 iterations 2
Cbc0038I Pass  56: suminf.    1.65093 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  57: suminf.    1.89387 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  58: suminf.    1.89387 (4) obj. 86.8037 iterations 3
Cbc0038I Pass  59: suminf.    1.65093 (4) obj. 86.8037 iterations 4
Cbc0038I Pass  60: suminf.    1.15256 (4) obj. 86.8037 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 796 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 841 columns, reduced to 2 rows 10 columns
Cbc0038I Mini branch and bound improved solution from 86.9334 to 86.7954 (0.05 seconds)
Cbc0038I Round again with cutoff of 86.6422
Cbc0038I Reduced cost fixing fixed 780 variables on major pass 4
Cbc0038I Pass  60: suminf.    1.09302 (4) obj. 86.6422 iterations 0
Cbc0038I Pass  61: suminf.    1.51001 (4) obj. 86.6422 iterations 15
Cbc0038I Pass  62: suminf.    1.34267 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  63: suminf.    1.87900 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  64: suminf.    1.46340 (4) obj. 86.6422 iterations 2
Cbc0038I Pass  65: suminf.    1.84858 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  66: suminf.    1.68124 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  67: suminf.    1.40344 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  68: suminf.    1.09302 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  69: suminf.    1.51001 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  70: suminf.    1.34267 (4) obj. 86.6422 iterations 2
Cbc0038I Pass  71: suminf.    1.59085 (4) obj. 86.6422 iterations 2
Cbc0038I Pass  72: suminf.    1.34267 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  73: suminf.    1.12085 (4) obj. 86.6422 iterations 6
Cbc0038I Pass  74: suminf.    0.92762 (4) obj. 86.6422 iterations 4
Cbc0038I Pass  75: suminf.    1.09496 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  76: suminf.    1.09496 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  77: suminf.    1.37503 (4) obj. 86.6422 iterations 4
Cbc0038I Pass  78: suminf.    0.99318 (4) obj. 86.6422 iterations 4
Cbc0038I Pass  79: suminf.    1.16052 (4) obj. 86.6422 iterations 3
Cbc0038I Pass  80: suminf.    1.13710 (4) obj. 86.6422 iterations 4
Cbc0038I Pass  81: suminf.    0.72544 (4) obj. 86.6422 iterations 4
Cbc0038I Pass  82: suminf.    0.89278 (4) obj. 86.6422 iterations 2
Cbc0038I Pass  83: suminf.    0.72544 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  84: suminf.    0.72544 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  85: suminf.    1.13710 (4) obj. 86.6422 iterations 4
Cbc0038I Pass  86: suminf.    1.64553 (4) obj. 86.6422 iterations 2
Cbc0038I Pass  87: suminf.    1.41334 (4) obj. 86.6422 iterations 1
Cbc0038I Pass  88: suminf.    1.80282 (4) obj. 86.6422 iterations 2
Cbc0038I Pass  89: suminf.    1.63548 (4) obj. 86.6422 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 796 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 841 columns, reduced to 2 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of 86.7954 - took 0.05 seconds
Cbc0012I Integer solution of 86.795384 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 66 rows 841 columns, reduced to 2 rows 6 columns
Cbc0013I At root node, 0 cuts changed objective from 86.284753 to 86.284753 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 16 column cuts (16 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 86.795384 best solution, best possible 86.284753 (0.06 seconds)
Cbc0038I Full problem 66 rows 841 columns, reduced to 2 rows 5 columns
Cbc0038I Full problem 66 rows 841 columns, reduced to 2 rows 10 columns
Cbc0044I Reduced cost fixing - 2 rows, 10 columns - restarting search
Cbc0012I Integer solution of 86.795384 found by Previous solution after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 2 rows 10 columns, reduced to 2 rows 6 columns
Cbc0031I 1 added rows had average density of 10
Cbc0013I At root node, 1 cuts changed objective from 86.284753 to 86.284753 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 15 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 86.795384 best solution, best possible 86.284753 (0.11 seconds)
Cbc0001I Search completed - best objective 86.79538429185398, took 139 iterations and 28 nodes (0.11 seconds)
Cbc0032I Strong branching done 66 times (128 iterations), fathomed 2 nodes and fixed 1 variables
Cbc0035I Maximum depth 4, 13 variables fixed on reduced cost
Cbc0038I Probing was tried 38 times and created 22 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Gomory was tried 28 times and created 34 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I TwoMirCuts was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0038I ZeroHalf was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I Search completed - best objective 86.79538429185399, took 297 iterations and 78 nodes (0.11 seconds)
Cbc0032I Strong branching done 244 times (293 iterations), fathomed 22 nodes and fixed 0 variables
Cbc0035I Maximum depth 6, 776 variables fixed on reduced cost
Cuts at root node changed objective from 86.2848 to 86.2848
Probing was tried 37 times and created 20 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Gomory was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                86.79538429
Enumerated nodes:               78
Total iterations:               297
Time (CPU seconds):             0.09
Time (Wallclock seconds):       0.11

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.11



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n21-k2/4/2/solution_r2.py", line 84, in <module>
    results = solve_mTSP(num_robots, coordinates)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n21-k2/4/2/solution_r2.py", line 58, in solve_mTSP
    next_city = next(j for j in range(1, n) if pulp.value(x[current_city, j, k]) == 1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n21-k2/4/2/solution_r2.py", line 58, in <genexpr>
    next_city = next(j for j in range(1, n) if pulp.value(x[current_city, j, k]) == 1)
                                                          ~^^^^^^^^^^^^^^^^^^^^
KeyError: (6, 6, 0)


