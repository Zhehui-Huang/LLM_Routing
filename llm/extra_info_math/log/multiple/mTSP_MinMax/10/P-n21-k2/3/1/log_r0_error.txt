OUTPUT:
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/ethan/miniconda3/envs/llm_routing/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/d29712f837b445d0aae518fd8217242c-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/d29712f837b445d0aae518fd8217242c-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 829 COLUMNS
At line 8110 RHS
At line 8935 BOUNDS
At line 9796 ENDATA
Problem MODEL has 824 rows, 860 columns and 4760 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 172.57 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 760 strengthened rows, 0 substitutions
Cgl0004I processed model has 824 rows, 860 columns (840 integer (840 of which binary)) and 11600 elements
Cbc0038I Initial state - 36 integers unsatisfied sum - 1.89474
Cbc0038I Pass   1: suminf.    1.72336 (42) obj. 185.655 iterations 166
Cbc0038I Pass   2: suminf.    1.72336 (19) obj. 290.899 iterations 98
Cbc0038I Pass   3: suminf.    1.71429 (30) obj. 299.063 iterations 94
Cbc0038I Pass   4: suminf.    2.41935 (10) obj. 364.553 iterations 187
Cbc0038I Pass   5: suminf.    1.71429 (19) obj. 361.326 iterations 96
Cbc0038I Pass   6: suminf.    1.71731 (14) obj. 378.033 iterations 186
Cbc0038I Pass   7: suminf.    1.71429 (17) obj. 381.519 iterations 89
Cbc0038I Pass   8: suminf.    1.90476 (4) obj. 439.334 iterations 152
Cbc0038I Pass   9: suminf.    1.71429 (6) obj. 437.277 iterations 97
Cbc0038I Pass  10: suminf.    1.71429 (4) obj. 430.396 iterations 19
Cbc0038I Pass  11: suminf.    1.71429 (10) obj. 431.026 iterations 77
Cbc0038I Pass  12: suminf.    1.71429 (4) obj. 439.049 iterations 44
Cbc0038I Pass  13: suminf.    1.71429 (10) obj. 438.03 iterations 48
Cbc0038I Pass  14: suminf.   16.60000 (57) obj. 417.485 iterations 263
Cbc0038I Pass  15: suminf.    1.20000 (8) obj. 428.702 iterations 190
Cbc0038I Pass  16: suminf.    0.29268 (7) obj. 432.526 iterations 141
Cbc0038I Pass  17: suminf.    0.30000 (7) obj. 432.526 iterations 83
Cbc0038I Pass  18: suminf.    0.29268 (7) obj. 432.526 iterations 43
Cbc0038I Pass  19: suminf.    0.30000 (7) obj. 432.526 iterations 116
Cbc0038I Pass  20: suminf.    0.57143 (4) obj. 477.974 iterations 279
Cbc0038I Pass  21: suminf.    0.28916 (7) obj. 478.135 iterations 168
Cbc0038I Pass  22: suminf.    0.29630 (7) obj. 478.135 iterations 117
Cbc0038I Pass  23: suminf.    0.29032 (6) obj. 478.135 iterations 107
Cbc0038I Pass  24: suminf.    0.28916 (7) obj. 478.135 iterations 115
Cbc0038I Pass  25: suminf.    3.00000 (6) obj. 478.135 iterations 80
Cbc0038I Pass  26: suminf.    0.29412 (8) obj. 478.135 iterations 49
Cbc0038I Pass  27: suminf.    0.28916 (7) obj. 478.135 iterations 27
Cbc0038I Pass  28: suminf.    0.29630 (7) obj. 478.135 iterations 113
Cbc0038I Pass  29: suminf.    0.29032 (6) obj. 478.135 iterations 85
Cbc0038I Pass  30: suminf.    0.28916 (7) obj. 478.135 iterations 107
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 666 integers at bound fixed and 0 continuous
Cbc0038I Full problem 824 rows 860 columns, reduced to 574 rows 193 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.41 seconds)
Cbc0038I Full problem 825 rows 860 columns, reduced to 825 rows 860 columns - too large
Cbc0038I After 0.42 seconds - Feasibility pump exiting - took 0.10 seconds
Cbc0031I 25 added rows had average density of 165
Cbc0013I At root node, 25 cuts changed objective from 172.56951 to 194.9896 in 16 passes
Cbc0014I Cut generator 0 (Probing) - 65 row cuts average 111.5 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 208 row cuts average 508.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 205 row cuts average 47.8 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 5 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 164 row cuts average 78.5 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 194.9896 (0.78 seconds)
Cbc0004I Integer solution of 241.50804 found after 2808 iterations and 28 nodes (1.22 seconds)
Cbc0038I Full problem 824 rows 860 columns, reduced to 359 rows 57 columns
Cbc0038I Full problem 824 rows 860 columns, reduced to 340 rows 50 columns
Cbc0038I Full problem 824 rows 860 columns, reduced to 290 rows 30 columns
Cbc0038I Full problem 824 rows 860 columns, reduced to 365 rows 54 columns
Cbc0038I Full problem 824 rows 860 columns, reduced to 334 rows 45 columns
Cbc0004I Integer solution of 231.68926 found after 12375 iterations and 396 nodes (2.28 seconds)
Cbc0038I Full problem 824 rows 860 columns, reduced to 313 rows 67 columns
Cbc0038I Full problem 824 rows 860 columns, reduced to 289 rows 60 columns
Cbc0004I Integer solution of 221.97069 found after 19173 iterations and 614 nodes (2.83 seconds)
Cbc0038I Full problem 824 rows 860 columns, reduced to 116 rows 28 columns
Cbc0038I Full problem 824 rows 860 columns, reduced to 242 rows 25 columns
Cbc0016I Integer solution of 221.11222 found by strong branching after 25245 iterations and 810 nodes (3.38 seconds)
Cbc0038I Full problem 824 rows 860 columns, reduced to 304 rows 53 columns
Cbc0016I Integer solution of 206.24322 found by strong branching after 30655 iterations and 928 nodes (3.93 seconds)
Cbc0010I After 1000 nodes, 99 on tree, 206.24322 best solution, best possible 194.9896 (4.32 seconds)
Cbc0004I Integer solution of 205.85844 found after 36558 iterations and 1041 nodes (4.43 seconds)
Cbc0004I Integer solution of 205.15948 found after 37971 iterations and 1052 nodes (4.50 seconds)
Cbc0004I Integer solution of 202.07655 found after 43709 iterations and 1102 nodes (4.78 seconds)
Cbc0004I Integer solution of 198.65082 found after 45485 iterations and 1123 nodes (4.87 seconds)
Cbc0001I Search completed - best objective 198.650824741322, took 87649 iterations and 1598 nodes (7.23 seconds)
Cbc0032I Strong branching done 3300 times (89106 iterations), fathomed 52 nodes and fixed 79 variables
Cbc0035I Maximum depth 50, 45966 variables fixed on reduced cost
Cuts at root node changed objective from 172.57 to 194.99
Probing was tried 1952 times and created 21495 cuts of which 0 were active after adding rounds of cuts (0.483 seconds)
Gomory was tried 1920 times and created 300 cuts of which 0 were active after adding rounds of cuts (0.342 seconds)
Knapsack was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 16 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 1920 times and created 4717 cuts of which 0 were active after adding rounds of cuts (0.562 seconds)
FlowCover was tried 16 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 1920 times and created 1593 cuts of which 0 were active after adding rounds of cuts (0.269 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                198.65082474
Enumerated nodes:               1598
Total iterations:               87649
Time (CPU seconds):             7.21
Time (Wallclock seconds):       7.24

Option for printingOptions changed from normal to all
Total time (CPU seconds):       7.21   (Wallclock seconds):       7.24



ERROR:
Traceback (most recent call last):
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n21-k2/3/1/solution_r0.py", line 59, in <module>
    next_cities = [j for j in range(1, n) if pulp.value(x[tour[-1], j, k]) == 1]
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ethan/repository/few-shot/LLM_Routing/llm/extra_info_math/solution/multiple/mTSP_MinMax/10/P-n21-k2/3/1/solution_r0.py", line 59, in <listcomp>
    next_cities = [j for j in range(1, n) if pulp.value(x[tour[-1], j, k]) == 1]
                                                        ~^^^^^^^^^^^^^^^^
KeyError: (16, 16, 0)


