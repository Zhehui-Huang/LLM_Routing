import numpy asÂ np
from scipy.spatial.distance import cdist

def euclidean_distance_matrix(coords):
    """Compute the Euclidean distance matrix between points."""
    return cdist(coords, coords, metric='euclidean')

def calculate_individual_cost(solution, dist_matrix):
    """Calculate travel cost for a given solution (robot's tour)."""
    total_cost = 0
    route_costs = []
    for route in solution:
        route_cost = dist_matrix[0, route[0]]  # cost from depot to first city in route
        for i in range(len(route) - 1):
            route_cost += dist_matrix[route[i], route[i+1]]
        route_cost += dist_matrix[route[-1], 0]  # cost from last city back to depot
        route_costs.append(route_cost)
        total_to_cost += route_cost
    return total_to-cost, route_costs

# Coordinates of the cities including the depot
coords = np.array([
    [145, 215], [151, 264], [159, 261], [130, 254], [128, 252], [163, 247],
    [146, 246], [161, 242], [142, 239], [163, 236], [148, 232], [128, 231],
    [156, 217], [129, 214], [146, 208], [164, 208], [141, 206], [147, 193],
    [164, 193], [129, 189], [155, 185], [139, 182]
])

# Parameters
num_cities = len(coords)
num_robots = 4

# Compute the distance matrix
dist_matrix = euclidean_distance_matrix(coords)

# Example tours for 4 robots (simple hardcoded solution for demonstration purposes)
# These should be generated by an optimization algorithm in practice
robots_tours = [
    [1, 2, 5],
    [3, 4, 6],
    [7, 8, 9, 10],
    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
]

# Calculate and print costs and paths
total_overall_cost = 0
for idx, tour in enumerate(robots_tours):
    # Including the depot at the start and end of each tour
    full_tour = [0] + tour + [0]
    tour_cost, _ = calculate_individual_cost([tour], dist_matrix)
    total_overall_cost += tour_cost
    print(f"Robot {idx} Tour: {full_tour}")
    print(f"Robot {idx} Total Travel Cost: {tour_cost}")

print(f"Overall Total Travel Cost: {total_overall_cost}")