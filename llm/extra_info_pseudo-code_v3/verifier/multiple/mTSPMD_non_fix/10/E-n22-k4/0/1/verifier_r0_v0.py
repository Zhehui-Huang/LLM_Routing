import math

def calculate_distance(city1, city2):
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

def test_solution(tours, city_positions, starts_at_depot):
    all_cities = set(range(len(city_positions)))
    visited_cities = set()
    total_cost = 0

    for i, tour in enumerate(tours):
        # Checking if each tour starts at the designated depot
        if starts_at_depot and tour[0] != i:
            return "FAIL", 0
        
        # Calculate tour costs and collect visited cities
        tour_cost = 0
        for j in range(1, len(tour)):
            tour_cost += calculate_distance(city_positions[tour[j-1]], city_positions[tour[j]])
            visited_cities.add(tour[j])
        
        # Add cost of the last city to the first city if needed
        if not starts_at_depot:
            tour_cost += calculate_distance(city_positions[tour[-1]], city_positions[tour[0]])
            visited_cities.add(tour[0])

        total_cost += tour_cost

    # Checking if all cities are visited exactly once
    if visited_cities != all_cities:
        return "FAIL", 0

    return "CORRECT", total_cost

# Example data setup
city_positions = [
    (145, 215), (151, 264), (159, 261), (130, 254), (128, 252), (163, 247),
    (146, 246), (161, 242), (142, 239), (163, 236), (148, 232), (128, 231),
    (156, 217), (129, 214), (146, 208), (164, 208), (141, 206), (147, 193),
    (164, 193), (129, 189), (155, 185), (139, 182)
]

# Assume some tours generated by an algorithm (to be replaced with actual output for real testing)
tours = [
    [0, 4, 13, 19],  # Tour for robot 0
    [1, 5, 9, 18],  # Tour for robot 1
    [2, 6, 10, 17],  # Tour for robot 2
    [3, 7, 11, 21]   # Tour for robot 3
]

result, total_travel_cost = test_solution(tours, city_positions, starts_at_depot=True)
print(result)
print("Overall Total Travel Cost:", total_travel_bhcost)