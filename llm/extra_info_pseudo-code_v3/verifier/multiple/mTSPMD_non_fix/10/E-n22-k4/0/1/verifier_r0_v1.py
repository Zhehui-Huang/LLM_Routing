import math

def calculate_distance(city1, city2):
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

def test_solution(tours, city_positions):
    all_cities = set(range(len(city_positions)))
    visited_cities = set()
    total_cost = 0

    for tour in tours:
        if not tour or tour[0] != tour[-1]:
            return "FAIL", 0  # Check if each tour starts and ends at its designated depot

        tour_cost = 0
        for j in range(1, len(tour)):
            tour_cost += calculate_distance(city_positions[tour[j-1]], city_positions[tour[j]])
            visited_cities.add(tour[j])

        total_cost += tour_cost

    if visited_cities != all_cities:
        return "FAIL", 0  # Check if all cities are visited exactly once

    return "CORRECT", total_cost

# Example city positions and tours setup
city_positions = [
    (145, 215), (151, 264), (159, 261), (130, 254), (128, 252), (163, 247),
    (146, 246), (161, 242), (142, 239), (163, 236), (148, 232), (128, 231),
    (156, 217), (129, 214), (146, 208), (164, 208), (141, 206), (147, 193),
    (164, 193), (129, 189), (155, 185), (139, 182)
]

# Assume tours generated by an algorithm
tours = [
    [0, 4, 13, 19, 0],      # Robot 0 tour
    [1, 5, 9, 18, 1],       # Robot 1 tour
    [2, 6, 10, 17, 2],      # Robot 2 tour
    [3, 7, 11, 21, 3]       # Robot 3 tour
]

result, total_travel_cost = test_solution(tours, city_positions)
print(result)
print("Overall Total Travel Cost:", total_travel_cost)