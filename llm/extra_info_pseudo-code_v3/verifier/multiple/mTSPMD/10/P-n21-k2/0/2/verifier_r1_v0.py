import math

def calculate_distance(city1, city2):
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

def verify_solution(tours, city_coordinates):
    total_cities_visited = set()
    total_travel_cost = 0
    expected_cities = set(range(21))  # Total 21 cities including depots

    # Check if there are exactly 21 cities including depots
    if len(city_coordinates) != 21:
        return "FAIL"

    for index, tour in enumerate(tours):
        # Check if each robot returns to its associated depot
        if tour[0] != tour[-1]:  # tour should start and end at the same depot
            return "FAIL"
        
        # Check if robot starts/ends at its correct depot
        if index == 0 and tour[0] != 0:
            return "FAIL"
        elif index == 1 and tour[0] != 1:
            return "FAIL"
        
        # Accumulate set of visited cities
        total_cities_visited.update(tour)

        # Calculate travel cost for each tour
        robot_travel_cost = 0
        for i in range(len(tour) - 1):
            robot_travel_cost += calculate_distance(city_coordinates[tour[i]], city_coordinates[tour[i+1]])
        total_travel_cost += robot_travel_cost

    # Check if all cities are visited exactly once
    if total_cities_visited != expected_cities:
        return "FAIL"

    # Travel cost is based on Euclidean distances
    # No specific check required beyond what is calculated
   
    return "CORRECT"

# Example Tours (Assuming provided as part of individual solution)
# You would input the actual tours generated by the algorithm here for verification.
tours = [
    [0, 2, 3, 0],  # Assuming robot 0 visits cities 2, 3 and returns to depot 0
    [1, 4, 5, 1]   # Assuming robot 1 visits cities 4, 5 and returns to depot 1
]

# City coordinates
city_coordinates = [
    (30, 40),  # Depot city 0
    (37, 52),  # Depot city 1
    (49, 49),  # City 2 and so on
    (52, 64),
    (31, 62),
    (52, 33),
    (42, 41),
    (52, 41),
    (57, 58),
    (62, 42),
    (42, 57),
    (27, 68),
    (43, 67),
    (58, 48),
    (58, 27),
    (37, 69),
    (38, 46),
    (61, 33),
    (62, 63),
    (63, 69),
    (45, 35)
]

result = verify_solution(tours, city_coordinates)
print(result)