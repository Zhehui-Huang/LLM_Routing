import random
import math
import sys

# Coordinates of all cities including the depot
coordinates = [
    (16, 90), (43, 99), (80, 21), (86, 92), (54, 93),
    (34, 73), (6, 61), (86, 69), (30, 50), (35, 73),
    (42, 64), (64, 30), (70, 95), (29, 64), (32, 79)
]

# Calculate Euclidean distance between two cities
def calculate_distance(city1, city2):
    return math.sqrt((coordinates[city1][0] - coordinates[city2][0]) ** 2 + (coordinates[city1][1] - coordinates[city2][1]) ** 2)

# Calculate total tour cost
def tour_cost(tour):
    return sum(calculate_distance(tour[i], tour[i + 1]) for i in range(len(tour) - 1))

# Generate a random initial solution (tour of 10 cities)
def generate_initial_solution():
    selected_cities = random.sample(range(1, 15), 9)
    selected_cities = [0] + selected_cities + [0]
    return selected_cities

# Shaking: generated by perturbing the existing solution
def shake(solution):
    idx1, idx2 = sorted(random.sample(range(1, 10), 2))
    new_solution = solution[:]
    new_solution[idx1], new_solution[idx2] = new_solution[idx2], new_solution[idx1]
    return new_solution

# Variable Neighborhood Descent (VND)
def vnd(solution):
    improved = True
    while improved:
        improved = False
        for i in range(1, 10):
            for j in range(i + 1, 10):
                candidate_solution = solution[:]
                candidate_solution[i], candidate_solution[j] = candidate_solution[j], candidate_solution[i]
                if tour_cost(candidate_solution) < tour_cost(solution):
                    solution = candidate_solution
                    improved = True
    return solution

# General Variable Neighborhood Search (GVNS)
def gvns(num_restarts):
    best_solution = None
    best_cost = float('inf')
    
    for _ in range(num_restarts):
        current_solution = generate_initial_solution()
        while True:
            new_solution = shake(current_solution)
            new_solution = vnd(new_solution)
            new_cost = tour_cost(new_solution)
            if new_cost < tour_cost(current_solution):
                current_solution = new_solution
            else:
                break
        
        if tour_cost(current_solution) < best_cost:
            best_solution = current_solution
            best_cost = tour_cost(best_solution)
    
    return best_solution

# Run GVNS algorithm
num_restarts = 100
best_tour = gvns(num_restarts)
best_tour_cost = tour_cost(best_tour)

# Output the result
print(f"Tour: {best_tour}")
print(f"Total travel cost: {best_tour_cost:.2f}")