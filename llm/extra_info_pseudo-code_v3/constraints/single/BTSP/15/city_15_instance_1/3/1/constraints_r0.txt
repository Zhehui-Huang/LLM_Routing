- [There are 15 cities, including the depot city 0.]
- [The coordinates of cities are given as: Depot city 0: (29, 51), City 1: (49, 20), City 2: (79, 69), City 3: (17, 20), City 4: (18, 61), City 5: (40, 57), City 6: (57, 30), City 7: (36, 12), City 8: (93, 43), City 9: (17, 36), City 10: (4, 60), City 11: (78, 82), City 12: (83, 96), City 13: (60, 50), City 14: (98, 1).]
- [There is one robot that can travel between any two cities.]
- [Travel cost is calculated as the Euclidean distance between the two cities.]
- [The robot must visit each city exactly once, starting and ending at depot city 0.]
- [The goal is to minimize the longest distance between any two consecutive cities in the tour of the robot.]
- [A heuristic algorithm is provided for solving the problem, which involves sorting edges and checking for Hamiltonian paths in bottleneck graphs.]
- [The output should be the tour as a list of city indices, total travel cost of the tour, and the maximum distance between any two consecutive cities in the tour.]
- [The output example format is: Tour: [0, 1, 2, 3, 0], Total travel cost: 100, Maximum distance between consecutive cities: 40.]