###
Environment information
===
There are 22 cities.
Cities and Coordinates:
Depot city 0: (145, 215)
Depot city 1: (151, 264)
Depot city 2: (159, 261)
Depot city 3: (130, 254)
City 4: (128, 252)
City 5: (163, 247)
City 6: (146, 246)
City 7: (161, 242)
City 8: (142, 239)
City 9: (163, 236)
City 10: (148, 232)
City 11: (128, 231)
City 12: (156, 217)
City 13: (129, 214)
City 14: (146, 208)
City 15: (164, 208)
City 16: (141, 206)
City 17: (147, 193)
City 18: (164, 193)
City 19: (129, 189)
City 20: (155, 185)
City 21: (139, 182)
###

###
Robot Information
===
- Number of robots: 4. Robot id starts from 0.
- Starting and Ending Locations:
Robot 0 starts and ends at depot city 0.
Robot 1 starts and ends at depot city 1.
Robot 2 starts and ends at depot city 2.
Robot 3 starts and ends at depot city 3.
- Travel Capability: Robots can travel between any two cities.
- Travel Cost: Calculated as the Euclidean distance between two cities.
###

###
Task Description
===
The robots must collectively visit all cities exactly once and then return to their respective depots.
Each robot starts and ends at its assigned depot.
The objective is to determine the shortest possible tours for each robot while minimizing the total travel cost for all robots combined.
Ensure that each city is visited exactly once, and each robot returns to its starting depot after completing its tour.
You can refer to the insights provided below to solve the problem.
****
Genetic Algorithm Approach for Fixed Destination Multi-depot mTSP

Authors: Kamran Kardel, Nikbakhsh Javadian, Fereydoun Adbesh
Institution: Department of Industrial Engineering, University of Science and Technology Mazandaran Babol, Iran

Abstract:
This paper explores a novel GA chromosome and related operators specifically designed for the MmTSP, where multiple salesmen depart from various depots and must return to their starting city. The approach is tested against optimal solutions obtained by Lingo 8 and shows promising theoretical properties and computational performance.

Key Insights:

1. GA Design:
   - A new chromosome structure for MmTSP includes two distinct parts: a permutation of city numbers and a segment defining the distribution of cities among salesmen, ensuring diversity and quality in initial solutions.

2. Crossover Techniques:
   - Four types of permutation-based crossover methods were evaluated: Ordered Crossover (OX), Partially Matched Crossover (PMX), Union Crossover#2 (UX2), and a newly proposed Modified Moon Crossover (new MX), with each showing varied strengths in solving the MmTSP.

3. Mutation and Selection:
   - The GA utilizes 1-bit and 2-opt mutation techniques to enhance solution diversity and employs elitism, roulette wheel, and binary tournament strategies for parent selection, optimizing the balance between exploration and exploitation.

4. Computational Efficiency:
   - Demonstrates the efficiency of the GA in reducing computational time compared to traditional methods, especially in large-scale problems where exact methods are impractical.

5. Practical Applications:
   - Suitable for complex logistics and distribution problems involving multiple depots and salesmen, where routing efficiency significantly impacts operational costs and service quality.

6. Future Research:
   - Potential enhancements include refining crossover and mutation operators and exploring their applicability to other complex routing problems beyond the MmTSP.

This detailed exploration of GA for the MmTSP provides a robust framework for addressing complex multi-depot routing issues, offering significant improvements over traditional methods.
****
###

###
Format requirements
===
1) Please output the tours for each robot as a list of city indices. Each tour should start and end at its assigned depot.
2) Please output the total travel cost for each tour and the overall total travel cost.

For example, if there are two robots with the following tours and costs:
Robot 0 (Depot 0): 0 -> 2 -> 3 -> 0 with a travel cost of 50
Robot 1 (Depot 1): 1 -> 4 -> 5 -> 1 with a travel cost of 60
then the output should be:

Robot 0 Tour: [0, 2, 3, 0]
Robot 0 Total Travel Cost: 50

Robot 1 Tour: [1, 4, 5, 1]
Robot 1 Total Travel Cost: 60

Overall Total Travel Cost: 110
###