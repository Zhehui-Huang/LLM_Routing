###
Environment information
===
There are 22 cities.
Cities and Coordinates:
Depot city 0: (145, 215)
City 1: (151, 264)
City 2: (159, 261)
City 3: (130, 254)
City 4: (128, 252)
City 5: (163, 247)
City 6: (146, 246)
City 7: (161, 242)
City 8: (142, 239)
City 9: (163, 236)
City 10: (148, 232)
City 11: (128, 231)
City 12: (156, 217)
City 13: (129, 214)
City 14: (146, 208)
City 15: (164, 208)
City 16: (141, 206)
City 17: (147, 193)
City 18: (164, 193)
City 19: (129, 189)
City 20: (155, 185)
City 21: (139, 182)
###

###
Robot Information
===
- Number of robots: 4. Robot id starts from 0.
- Starting location: All robots start at depot city 0.
- Travel capability: Robots can travel between any two cities.
- Travel cost: Calculated as the Euclidean distance between two cities.
###

###
Task Description
===
The robots must collectively visit all cities exactly once, excluding the depot city as a destination, and then return to the depot city after completing their tours.
Each robot starts and ends its tour at the depot.
The objective is to determine the shortest possible tours for the robots while minimizing the total travel cost.
Ensure that every city, except the depot, is visited exactly once.
You can use the following pseudocode to solve the problem:
****
\documentclass{article}
\usepackage{amsmath}

\begin{document}

\section*{Summary of the Generalized k-Opt Exchange Procedure}

\subsection*{Generalized k-Opt Exchange Procedure}

The generalized k-opt exchange procedure extends the classical k-opt exchange method used in the symmetric Multiple Traveling Salesmen Problem (MTSP) by allowing for the creation of multiple subtours from a single tour and then merging them back into an equivalent single tour. This increases the number of exchange opportunities and can lead to significant improvements in the solution.

\subsubsection*{Key Steps and Details}

\begin{enumerate}
    \item \textbf{Initial Solution Generation}:
    \begin{itemize}
        \item Start by generating an initial solution for the MTSP.
    \end{itemize}
    
    \item \textbf{Generalized k-Change}:
    \begin{itemize}
        \item Apply a generalized k-change to the tour. A k-change involves deleting k edges and replacing them with k other edges.
        \item Unlike the classical k-change, the generalized k-change considers exchanges that result in multiple subtours, as long as each subtour includes at least one copy of the depot.
    \end{itemize}

    \item \textbf{Regenerating a Single Tour}:
    \begin{itemize}
        \item If the k-change leads to multiple subtours, an equivalent single tour is regenerated by judiciously exchanging "equivalent edges" (edges connecting a node to each copy of the depot). Figure \ref{fig:single_tour} shows how an equivalent single tour can be produced with this simple technique.
    \end{itemize}
    \begin{figure}[h]
        \centering
        \includegraphics[width=0.5\textwidth]{single_tour}
        \caption{Regenerating a single tour}
        \label{fig:single_tour}
    \end{figure}

    \item \textbf{Iterative Improvement}:
    \begin{itemize}
        \item Repeat the process of applying generalized k-changes and regenerating a single tour until no further improvement is possible.
    \end{itemize}

    \item \textbf{Feasibility Check}:
    \begin{itemize}
        \item Ensure that the resulting tours are feasible. For MTSP, a tour with multiple subtours is feasible if each subtour includes at least one depot copy.
    \end{itemize}
    
    \item \textbf{Complexity}:
    \begin{itemize}
        \item The complexity of the generalized k-opt procedure is higher than the classical k-opt procedure. Specifically, the complexity of the generalized k-opt step is 
        \[
        \binom{n}{k} \times \left( (2k - 1) \times (2k - 3) \times \ldots \times 3 \times 1 - 1 \right),
        \]
        which simplifies to an order of \( n^k \) for both classical and generalized approaches, but with a higher constant factor for the generalized approach.
    \end{itemize}
\end{enumerate}

\subsubsection*{Results}

\textbf{Constraint-Free MTSP}:
\begin{itemize}
    \item The generalized k-opt procedure consistently found better solutions than the classical k-opt procedure in randomly generated networks.
\end{itemize}

\subsection*{Conclusion}

The generalized k-opt exchange procedure enhances the classical k-opt method by considering exchanges that result in multiple subtours, making it a powerful tool for solving constraint-free MTSPs. This method provides a better balance between solution quality and computational efficiency.

\end{document}

****
###

###
Format requirements
===
1) Please output the tours for each robot as a list of city indices. Each tour should start and end at the depot city 0.
2) Please output the total travel cost for each tour and the overall total travel cost.

For example, if there are two robots with the following tours and costs:
Robot 0: 0 -> 1 -> 2 -> 0 with a travel cost of 50
Robot 1: 0 -> 3 -> 4 -> 0 with a travel cost of 60
then the output should be:

Robot 0 Tour: [0, 1, 2, 0]
Robot 0 Total Travel Cost: 50

Robot 1 Tour: [0, 3, 4, 0]
Robot 1 Total Travel Cost: 60

Overall Total Travel Cost: 110
###