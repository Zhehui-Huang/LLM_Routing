###
Environment information
===
There are 10 cities.
Depot city 0: (79, 15)
City 1: (79, 55)
City 2: (4, 80)
City 3: (65, 26)
City 4: (92, 9)
City 5: (83, 61)
City 6: (22, 21)
City 7: (97, 70)
City 8: (20, 99)
City 9: (66, 62)
###

###
Robot information
===
There is one robot.
- The robot start at depot city 0. 
- The robot can travel between any two cities. 
- The travel cost is calculated as the Euclidean distance between the two cities.
###

###
Task
===
The robot needs to visit all cities exactly once, except the depot city, and then return to the depot city.
Please find the shortest tour for the robot.
You can refer to the pseudocode provided below to solve the problem:
****
Christofides algorithm

Input: Complete graph G with weights w satisfying the triangle inequality
Output: Approximate solution to the Traveling Salesman Problem

1. Compute a minimum spanning tree (MST) T of G.
2. Identify the set O of vertices with odd degree in T.
3. Find a minimum-weight perfect matching M in the subgraph induced by O.
4. Combine the edges of T and M to form a multigraph H where each vertex has even degree.
5. Find an Eulerian circuit in H.
6. Convert the Eulerian circuit into a Hamiltonian circuit by skipping repeated vertices.

Return the Hamiltonian circuit.

****
###

###
Format requirements
===
1) Please output the tour as a list of city indices. The tour should start and end at the depot city 0.
2) Please output the total travel cost of the tour.

For example, if the tour is 0 -> 1 -> 2 -> 3 -> 0 and the total travel cost is 100, then the output should be: 

Tour: [0, 1, 2, 3, 0]
Total travel cost: 100
###