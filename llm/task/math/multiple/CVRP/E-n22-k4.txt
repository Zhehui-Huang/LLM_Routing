###
Environment information
===
There are 22 cities.
Cities and Coordinates:
Depot city 0: (145, 215)
City 1: (151, 264)
City 2: (159, 261)
City 3: (130, 254)
City 4: (128, 252)
City 5: (163, 247)
City 6: (146, 246)
City 7: (161, 242)
City 8: (142, 239)
City 9: (163, 236)
City 10: (148, 232)
City 11: (128, 231)
City 12: (156, 217)
City 13: (129, 214)
City 14: (146, 208)
City 15: (164, 208)
City 16: (141, 206)
City 17: (147, 193)
City 18: (164, 193)
City 19: (129, 189)
City 20: (155, 185)
City 21: (139, 182)

Demand list:
City 0: 0
City 1: 1100
City 2: 700
City 3: 800
City 4: 1400
City 5: 2100
City 6: 400
City 7: 800
City 8: 100
City 9: 500
City 10: 600
City 11: 1200
City 12: 1300
City 13: 1300
City 14: 300
City 15: 900
City 16: 2100
City 17: 1000
City 18: 900
City 19: 2500
City 20: 1800
City 21: 700
###

###
Robot Information
===
- Number of robots: 4. Robot id starts from 0.
- The capacity of each robot: 6000
- Starting location: All robots start at depot city 0.
- Travel capability: Robots can travel between any two cities.
- Travel cost: Calculated as the Euclidean distance between two cities.
###

###
Task Description
===
The robots must collectively deliver goods to all cities, excluding the depot city, and then return to the depot city after completing their deliveries.
Each robot has a specified carrying capacity.
Each city has a specific demand that must be met.
The objective is to determine the shortest possible tours for the robots while ensuring that:
- The demand of each city is fully met.
- The capacity constraints of the robots are not exceeded.
Minimize the total travel cost for all tours.
You can refer to the mathematical formulation provided below to solve the problem:
****
The Capacitated Vehicle Routing Problem (CVRP) aims to find a set of minimum total cost routes for a fleet of capacitated vehicles based at a single depot, to serve a set of customers under the following constraints:
\begin{enumerate}
    \item Each route begins and ends at the depot.
    \item Each customer is visited exactly once.
    \item The total demand on each route does not exceed the capacity of the vehicle.
\end{enumerate}


Let \( G = (V, H, c) \) be a complete directed graph where:
\begin{itemize}
    \item \( V = \{0, 1, 2, \ldots, n\} \) is the set of nodes, with node 0 representing the depot and the remaining nodes representing customers.
    \item \( H = \{(i, j) : i, j \in V, i \neq j\} \) is the set of arcs.
    \item \( c_{ij} \) is the non-negative travel cost associated with arc \((i, j) \in H\), satisfying the triangle inequality \( c_{ij} + c_{jk} \geq c_{ik} \) for all \(i, j, k \in V\).
\end{itemize}

The minimum number of vehicles needed is \( \left\lceil \frac{\sum_{i=1}^n d_i}{Q} \right\rceil \), where \(d_i\) is the demand of customer \(i\) and \(Q\) is the vehicle capacity.

Define the binary decision variable \( x_{rij} \) as 1 if vehicle \(r\) traverses arc \((i, j)\), and 0 otherwise.


\begin{equation}
\min \quad \sum_{r=1}^p \sum_{i=0}^n \sum_{j=0, j \neq i}^n c_{ij} x_{rij}
\end{equation}


1. \textbf{Degree Constraints}: Ensure each customer is visited exactly once:
\begin{equation}
\sum_{r=1}^p \sum_{i=0, i \neq j}^n x_{rij} = 1 \quad \forall j \in \{1, \ldots, n\}
\end{equation}

2. \textbf{Depot Constraints}: Ensure each vehicle leaves the depot only once:
\begin{equation}
\sum_{j=1}^n x_{r0j} = 1 \quad \forall r \in \{1, \ldots, p\}
\end{equation}

3. \textbf{Flow Conservation Constraints}: Ensure flow consistency for all nodes:
\begin{equation}
\sum_{i=0, i \neq j}^n x_{rij} = \sum_{i=0}^n x_{rji} \quad \forall j \in \{0, \ldots, n\}, \; r \in \{1, \ldots, p\}
\end{equation}

4. \textbf{Capacity Constraints}: Ensure vehicle capacities are not exceeded:
\begin{equation}
\sum_{i=0}^n \sum_{j=1, j \neq i}^n d_j x_{rij} \leq Q \quad \forall r \in \{1, \ldots, p\}
\end{equation}

5. \textbf{Sub-tour Elimination Constraints}: Prevent cycles that do not pass through the depot:
\begin{equation}
\sum_{r=1}^p \sum_{i \in S} \sum_{j \in S, j \neq i} x_{rij} \leq |S| - 1 \quad \forall S \subseteq \{1, \ldots, n\}
\end{equation}

6. \textbf{Binary Constraints}: Ensure decision variables are binary:
\begin{equation}
x_{rij} \in \{0, 1\} \quad \forall r \in \{1, \ldots, p\}, \; \forall i, j \in \{0, \ldots, n\}, \; i \neq j
\end{equation}
****
###

###
Format Requirements
===
1) Please output the tours for each robot as a list of city indices. Each tour should start and end at the depot city 0.
2) Please output the total travel cost for each tour and the overall total travel cost.
3) Ensure that the demand of each city is met and the capacity constraints of each robot are not violated.

For example, if there are two robots with the following tours and costs:
Robot 0: 0 -> 1 -> 2 -> 0 with a travel cost of 50
Robot 1: 0 -> 3 -> 4 -> 0 with a travel cost of 60
then the output should be:

Robot 0 Tour: [0, 1, 2, 0]
Robot 0 Total Travel Cost: 50

Robot 1 Tour: [0, 3, 4, 0]
Robot 1 Total Travel Cost: 60

Overall Total Travel Cost: 110
###